<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PHPstrom配置</title>
    <link href="/2021/04/08/PHP/PHPstrom%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/04/08/PHP/PHPstrom%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="PSR-配置"><a href="#PSR-配置" class="headerlink" title="PSR 配置"></a>PSR 配置</h3><p><img src="https://user-images.githubusercontent.com/21000558/114130537-5bf38580-9933-11eb-91fb-4c3f6627bf93.png" alt="image"></p><ul><li><a href="https://learnku.com/docs/psr">https://learnku.com/docs/psr</a></li></ul><h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><ul><li><p><a href="https://plugins.jetbrains.com/plugin/7320-php-annotations">PHP Annotation</a></p></li><li><p><a href="https://plugins.jetbrains.com/plugin/9525--env-files-support">.env files support</a></p></li><li><p><a href="https://plugins.jetbrains.com/plugin/4230-bashsupport">BashSupport</a></p></li><li><p><a href="https://plugins.zhile.io/">IDE Eval Reset</a></p><blockquote><p>在Settings/Preferences… -&gt; Plugins 内手动添加第三方插件仓库地址：<a href="https://plugins.zhile.io/">https://plugins.zhile.io</a></p></blockquote></li><li><p><a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets">Rainbow Brackets</a></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>grep</title>
    <link href="/2021/04/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/Linux/grep/"/>
    <url>/2021/04/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/Linux/grep/</url>
    
    <content type="html"><![CDATA[<blockquote><p>我们平常在linux服务器查询日志文件的时候，经常会使用 <code>cat xxx.log | grep &#39;aaa&#39;</code> 来找寻自己要搜索的东西，但是也会出现这样的场景，我们要搜的东西，不知道落到了哪个目录或者文件下面，所以就需要使用全量模糊搜索</p></blockquote><p><img src="../../images/image-20210408204947514.png" alt="image-20210408204947514"></p><p><strong>grep 命令文档</strong> ：<a href="https://www.runoob.com/linux/linux-comm-grep.html">https://www.runoob.com/linux/linux-comm-grep.html</a></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><ul><li><p>以递归的方式查找符合条件的文件。例如，查找指定目录/etc/acpi 及其子目录（如果存在子目录的话）下所有文件中包含字符串”update”的文件，并打印出该字符串所在行的内容，使用的命令为：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grep -rn update /etc/acpi <br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mac环境变量</title>
    <link href="/2021/03/30/%E8%BF%90%E7%BB%B4/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <url>/2021/03/30/%E8%BF%90%E7%BB%B4/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>把路径配置到  /etc/paths 里面</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git Commit Template</title>
    <link href="/2021/03/29/Git/Git%20Commit%20Template/"/>
    <url>/2021/03/29/Git/Git%20Commit%20Template/</url>
    
    <content type="html"><![CDATA[<p>JetBrain 公司软件可以使用的一会插件，团队可以标准化git提交</p><p><a href="https://plugins.jetbrains.com/plugin/9861-git-commit-template">https://plugins.jetbrains.com/plugin/9861-git-commit-template</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git submoudle</title>
    <link href="/2021/03/29/Git/git%20submoudle/"/>
    <url>/2021/03/29/Git/git%20submoudle/</url>
    
    <content type="html"><![CDATA[<p>git submoudle</p><p>git submoudle的使用方法</p><p>项目根目录执行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git submodule init<br>git submodule update<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>5G时代Vlog原型系统开发</title>
    <link href="/2021/03/24/Golang/5G%E6%97%B6%E4%BB%A3Vlog%E5%8E%9F%E5%9E%8B%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/"/>
    <url>/2021/03/24/Golang/5G%E6%97%B6%E4%BB%A3Vlog%E5%8E%9F%E5%9E%8B%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h5 id="5G时代Vlog原型系统开发"><a href="#5G时代Vlog原型系统开发" class="headerlink" title="5G时代Vlog原型系统开发"></a>5G时代Vlog原型系统开发</h5><p>课程地址：<a href="https://www.imooc.com/learn/1131">https://www.imooc.com/learn/1131</a></p><h5 id="课程代码"><a href="#课程代码" class="headerlink" title="课程代码"></a>课程代码</h5><p>ps：其中的文件上传不知道哪里出错了，一直不成功</p><figure class="highlight golang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;crypto/md5&quot;</span><br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;path/filepath&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sayHello</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>w.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;hello world&quot;</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>fileHandler := http.FileServer(http.Dir(<span class="hljs-string">&quot;./video&quot;</span>))<br><br>http.Handle(<span class="hljs-string">&quot;/video/&quot;</span>, http.StripPrefix(<span class="hljs-string">&quot;/video/&quot;</span>, fileHandler))<br><br>http.HandleFunc(<span class="hljs-string">&quot;/api/upload&quot;</span>, uploadHandler)<br><br>http.HandleFunc(<span class="hljs-string">&quot;/api/list&quot;</span>, getFileListHandler)<br><br>http.HandleFunc(<span class="hljs-string">&quot;/sayHello&quot;</span>, sayHello)<br><br>http.ListenAndServe(<span class="hljs-string">&quot;:8090&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">上传文件</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">uploadHandler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>r.Body = http.MaxBytesReader(w, r.Body, <span class="hljs-number">10</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>)<br>err := r.ParseMultipartForm(<span class="hljs-number">10</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, err.Error(), http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>file, fileHeader, err := r.FormFile(<span class="hljs-string">&quot;uploadFile&quot;</span>)<br>ret := strings.HasSuffix(fileHeader.Filename, <span class="hljs-string">&quot;.mp4&quot;</span>)<br><span class="hljs-keyword">if</span> ret == <span class="hljs-literal">false</span> &#123;<br>http.Error(w, <span class="hljs-string">&quot;not mp4&quot;</span>, http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>md5Byte := md5.Sum([]<span class="hljs-keyword">byte</span>(fileHeader.Filename + time.Now().String()))<br>md5Str := fmt.Sprintf(<span class="hljs-string">&quot;%x&quot;</span>, md5Byte)<br>newFileName := md5Str + <span class="hljs-string">&quot;.mp4&quot;</span><br><br>dst, err := os.Create(<span class="hljs-string">&quot;./video/&quot;</span> + newFileName)<br><span class="hljs-keyword">defer</span> dst.Close()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, err.Error(), http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> file.Close()<br><span class="hljs-keyword">if</span> _, err := io.Copy(dst, file); err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, err.Error(), http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getFileListHandler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>files, _ := filepath.Glob(<span class="hljs-string">&quot;video/*&quot;</span>)<br><span class="hljs-keyword">var</span> ret []<span class="hljs-keyword">string</span><br><span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> files &#123;<br>ret = <span class="hljs-built_in">append</span>(ret, <span class="hljs-string">&quot;http://&quot;</span>+r.Host+filepath.Base(file))<br>&#125;<br>retJson, _ := json.Marshal(ret)<br>w.Write(retJson)<br><span class="hljs-keyword">return</span><br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Beego</title>
    <link href="/2021/03/24/Golang/Beego/"/>
    <url>/2021/03/24/Golang/Beego/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190428134858948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190428134923877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190428134935702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190428134957610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190428135008573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190428135018507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190428135027266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GO语言语法入门篇</title>
    <link href="/2021/03/24/Golang/GO%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <url>/2021/03/24/Golang/GO%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h5 id="GO语言语法入门篇"><a href="#GO语言语法入门篇" class="headerlink" title="GO语言语法入门篇"></a>GO语言语法入门篇</h5><p>课程地址：<a href="https://www.imooc.com/learn/968">https://www.imooc.com/learn/968</a></p><p><img src="https://img-blog.csdnimg.cn/20190617085622206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085637240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2019061708564567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085723299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085743963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085752627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085805632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085911739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085932216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085944782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085950368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019061709000264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090008810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090013779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090019236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090026145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090033652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090039467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090045655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090052935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090058564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Golang之文本编码处理</title>
    <link href="/2021/03/24/Golang/Golang%E4%B9%8B%E6%96%87%E6%9C%AC%E7%BC%96%E7%A0%81%E5%A4%84%E7%90%86/"/>
    <url>/2021/03/24/Golang/Golang%E4%B9%8B%E6%96%87%E6%9C%AC%E7%BC%96%E7%A0%81%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>课程地址：<a href="https://www.imooc.com/coursescore/305">https://www.imooc.com/coursescore/305</a></p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fileExists</span><span class="hljs-params">(filename <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>_, err := os.Stat(filename)<br><span class="hljs-keyword">return</span> err == <span class="hljs-literal">nil</span> || os.IsExist(err)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">copyFileAction</span><span class="hljs-params">(src, dst <span class="hljs-keyword">string</span>, showProgress, force <span class="hljs-keyword">bool</span>)</span></span>  &#123;<br><span class="hljs-keyword">if</span> !force &#123;<br><span class="hljs-keyword">if</span> fileExists(dst) &#123;<br>fmt.Println(<span class="hljs-string">&quot;%s exists override ? y/n\n&quot;</span>, dst)<br>reader := bufio.NewReader(os.Stdin)<br>data, _, _ := reader.ReadLine()<br><br><span class="hljs-keyword">if</span> strings.TrimSpace(<span class="hljs-keyword">string</span>(data)) != <span class="hljs-string">&quot;y&quot;</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br><br>copyFile(src, dst)<br><br><span class="hljs-keyword">if</span> showProgress &#123;<br>fmt.Println(<span class="hljs-string">&quot;&#x27;%s&#x27; -&gt; &#x27;%s&#x27;\n&quot;</span>, src, dst)<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">copyFile</span><span class="hljs-params">(src, dst <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(w <span class="hljs-keyword">int64</span>, err error)</span></span>  &#123;<br>srcFile, err := os.Open(src)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">defer</span> srcFile.Close()<br><br>dstFile, err := os.Create(dst)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">defer</span> dstFile.Close()<br><br><span class="hljs-keyword">return</span> io.Copy(dstFile, srcFile)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> showProgress, force <span class="hljs-keyword">bool</span><br><br><span class="hljs-comment">// 定义命令行参数</span><br>flag.BoolVar(&amp;force, <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;force copy when existing&quot;</span>)<br>flag.BoolVar(&amp;showProgress, <span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;explain what is being done&quot;</span>)<br><br>flag.Parse()<br><br><span class="hljs-comment">// 非法命令行数量检测</span><br><span class="hljs-keyword">if</span> flag.NArg() &lt; <span class="hljs-number">2</span> &#123;<br>flag.Usage()<br><span class="hljs-keyword">return</span><br>&#125;<br><br>copyFileAction(flag.Arg(<span class="hljs-number">0</span>), flag.Arg(<span class="hljs-number">1</span>), showProgress, force)<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Go语言学习笔记5-面向接口</title>
    <link href="/2021/03/24/Golang/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05-%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3/"/>
    <url>/2021/03/24/Golang/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05-%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190625095314114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="接口的定义和实现"><a href="#接口的定义和实现" class="headerlink" title="接口的定义和实现"></a>接口的定义和实现</h5><p><img src="https://img-blog.csdnimg.cn/20190625130255954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190625134807481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/201906251348495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190625135221955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JsonWebToken</title>
    <link href="/2021/03/24/Java/JsonWebToken/"/>
    <url>/2021/03/24/Java/JsonWebToken/</url>
    
    <content type="html"><![CDATA[<p>参考阮一峰老师的博客：<a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</a></p><p>课程参考：<a href="https://www.imooc.com/video/19018">https://www.imooc.com/video/19018</a></p><p>JWT官网：<a href="https://jwt.io/">https://jwt.io/</a><br><img src="https://img-blog.csdnimg.cn/20190428161255871.png?x-oss-process=image/wat!%5B%E5%9C%A8%E8%BF%99%E9%87%8C%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%8F%8F%E8%BF%B0%5D(https://img-blog.csdnimg.cn/2019042816125835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190428161617968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Maven基础入门</title>
    <link href="/2021/03/24/Java/Maven%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <url>/2021/03/24/Java/Maven%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven-Learning-Notes"><a href="#Maven-Learning-Notes" class="headerlink" title="Maven Learning Notes"></a>Maven Learning Notes</h1><h1 id="Maven学习笔记"><a href="#Maven学习笔记" class="headerlink" title="Maven学习笔记"></a>Maven学习笔记</h1><hr><h2 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一.介绍"></a>一.介绍</h2><p><strong>Maven</strong>是基于项目对象模型（POM），可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。</p><ol><li>bin目录是包含mvn的运行脚本</li><li>boot目录包含一个类加载器的框架，maven使用它加载自己的类库</li><li>conf配置文件</li><li>lib包含maven运行时的依赖类库</li></ol><h2 id="二-环境变量的配置"><a href="#二-环境变量的配置" class="headerlink" title="二.环境变量的配置"></a>二.环境变量的配置</h2><p><a href="http://maven.apache.org/download.cgi" title="下载地址">点击下载</a><br><br><strong>maven</strong>环境配置，增加一个环境变量<strong>MAVEN_HOME</strong>,值是maven的安装路径（<code>C:\Program Files\apache-maven-3.5.0-bin\apache-maven-3.5.0</code>）<br>修改path则是在path最后面添加<code>;%MAVEN_HOME%\bin</code>。</p><h3 id="Maven的项目结构"><a href="#Maven的项目结构" class="headerlink" title="Maven的项目结构"></a>Maven的项目结构</h3><div class="hljs code-wrapper"><pre><code>项目名    -src        -main            -java                 -package       -test            -java                 -package    -pom.xml</code></pre></div><h2 id="三-常用命令"><a href="#三-常用命令" class="headerlink" title="三.常用命令"></a>三.常用命令</h2><div class="hljs code-wrapper"><pre><code>    mvn -v         查看maven版本     compile    编译     test        测试     package    打包     clean        删除target     install    安装jar包到本地仓库</code></pre></div><h3 id="maven快速创建项目骨架目录"><a href="#maven快速创建项目骨架目录" class="headerlink" title="maven快速创建项目骨架目录"></a>maven快速创建项目骨架目录</h3><h4 id="两种方式："><a href="#两种方式：" class="headerlink" title="两种方式："></a>两种方式：</h4><div class="hljs code-wrapper"><pre><code>1.  mvn archetype:generate 按照提示进行选择2.  mvn archetype:generate  -DgroupId=com.imooc.maven   -DartifactId=  maven-service   -Dversion=1.0.0SNAPSHOT   -Dpackage=com.imooc.maven.demo    1. -DgroupId=组织名，公司网址反写+项目名    2. -DartifactId=项目名+模块名    3. -Dversion=版本号    4. -Dpackage=代码所存在的包名</code></pre></div><h2 id="四-Maven中的坐标和仓库"><a href="#四-Maven中的坐标和仓库" class="headerlink" title="四.Maven中的坐标和仓库"></a>四.Maven中的坐标和仓库</h2><p><strong>构件坐标:</strong></p><div class="hljs code-wrapper"><pre><code>        1. groupId:公司名字+项目名        2. artifactId：项目名+模块名        3. varsion:版本号</code></pre></div><p><strong>仓库：</strong></p><div class="hljs code-wrapper"><pre><code>        1. 本地仓库        2. 远程仓库        3. 镜像仓库</code></pre></div><h2 id="五-更改仓库默认路径"><a href="#五-更改仓库默认路径" class="headerlink" title="五.更改仓库默认路径"></a>五.更改仓库默认路径</h2><p>已安装到本地仓库中的jar包位置：</p><div class="hljs code-wrapper"><pre><code>C:\Users\用户\.m2\repository\com\tiakon\demo</code></pre></div><p>安装路径conf文件夹下settings.xml文件<br>打开找到这段备注是的代码：</p><div class="hljs code-wrapper"><pre><code>      &lt;!-- localRepository       | The path to the local repository maven will use to store artifacts.       | Default: $&#123;user.home&#125;/.m2/repository      &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;      --&gt;</code></pre></div><p>复制粘贴出来</p><div class="hljs code-wrapper"><pre><code>    &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code></pre></div><p><strong>将localRepository便签内的值替换成新路径即可。</strong></p><h2 id="六-maven生命周期"><a href="#六-maven生命周期" class="headerlink" title="六.maven生命周期"></a>六.maven生命周期</h2><p>完整的项目构建过程包括：</p><p><strong>清理、编译、测试、打包、集成测试、验证、部署</strong></p><p><strong>maven三套独立的生命周期</strong></p><div class="hljs code-wrapper"><pre><code>    clean     清理项目            1.pre-clean    执行清理前的工作            2.clean        清理上一次构建生成的所有文件            3.post-clean     执行清理后的文件    default 构建项目（最核心）            compile test package install    site     生成项目站点            1. pre-site     在生成项目站点前要完成的工作            2. site     生成项目的站点文档            3. post-site    在生成项目站点后要完成的工作            4. site-deploy    发布生成的站点到服务器上</code></pre></div><h2 id="七-maven中pom-xml常见元素介绍"><a href="#七-maven中pom-xml常见元素介绍" class="headerlink" title="七.maven中pom.xml常见元素介绍"></a>七.maven中pom.xml常见元素介绍</h2><div class="hljs code-wrapper"><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;             xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;!--指定了当前pom的版本--&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;groupId&gt;com.tiakon.maven.demo&lt;/groupId&gt;    &lt;artifactId&gt;HoictasStudio-MavenDemo01&lt;/artifactId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;!--        第一个0表示大版本号        第二个0表示分支版本号        第三个0表示小版本号        0.0.1        snapshot    快照        alpha       内部测试        beta        公测        Release     稳定        GA          正式发布    --&gt;    &lt;!--        打包方式:默认是jar,可选war、zip、pom        &lt;packaging&gt;&lt;/packaging&gt;    --&gt;    &lt;!--        项目名        &lt;name&gt;&lt;/name&gt;        项目地址        &lt;url&gt;&lt;/url&gt;        项目描述        &lt;description&gt;&lt;/description&gt;        开发人员列表        &lt;developers&gt;&lt;/developers&gt;        许可证信息        &lt;licenses&gt;&lt;/licenses&gt;        组织信息        &lt;organization&gt;&lt;/organization&gt;    --&gt;</code></pre></div><p>​<br>        <!--依赖列表--><br>        <dependencies><br>            <!--依赖项--><br>            <dependency><br>                <groupId>junit</groupId><br>                <artifactId>junit</artifactId><br>                <version>RELEASE</version><br>                <!--<type></type>--><br>                <!--依赖范围--><br>                <!--<scope></scope>--><br>                <!--设置依赖是否可选（默认）false--><br>                <!--<optional></optional>--><br>                <!--排斥依赖传递列表--><br>                <!--                    <exclusions>                        <exclusion>                        </exclusion>                    </exclusions>                --><br>            </dependency><br>        </dependencies><br>        <!--依赖的管理，作用主要定义在父模块中，对子模块进行管理--><br>        &lt;!–<br>            <dependencyManagement><br>                <dependencies></p><div class="hljs code-wrapper"><pre><code>            &lt;/dependencies&gt;        &lt;/dependencyManagement&gt;    --&gt;    &lt;!--对构件的行为提供相应的支持--&gt;    &lt;build&gt;        &lt;!--插件列表--&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;                &lt;version&gt;3.0.1&lt;/version&gt;                &lt;executions&gt;                    &lt;execution&gt;                        &lt;phase&gt;package&lt;/phase&gt;                        &lt;goals&gt;                            &lt;goal&gt;                                jar-no-fork                            &lt;/goal&gt;                        &lt;/goals&gt;                    &lt;/execution&gt;                &lt;/executions&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;    &lt;!--通常用于子模块对父模块pom的继承--&gt;    &lt;!--&lt;parent&gt;&lt;/parent&gt;--&gt;    &lt;!--用来聚合运行Maven项目，指定多个模块一起编译--&gt;    &lt;!--        &lt;modules&gt;            &lt;module&gt;&lt;/module&gt;        &lt;/modules&gt;    --&gt;&lt;/project&gt;</code></pre></div><h2 id="八-Maven的依赖范围"><a href="#八-Maven的依赖范围" class="headerlink" title="八.Maven的依赖范围"></a>八.Maven的依赖范围</h2><div class="hljs code-wrapper"><pre><code>三种classpath    1. 编译    2. 测试    3. 运行</code></pre></div><p><strong>maven提供了6种可选依赖范围:</strong></p><div class="hljs code-wrapper"><pre><code>1. compile:    默认范围，编译测试运行都有效。2. provided:    在编译和测试时有效。（比如说在开发JavaEE时，你在本地运行的servlet，是需要调用已添加到项目中的servlet-api.jar这个jar包的。这个过程就包含了编译【就是把Java文件编译成class文件的过程中也要调用】和测试【测试就是在本地运行】，那么他说的运行是指，整个项目已开发完成，编译、测试通过后，将class文件或包含有class文件的war包发布到服务器上的Tomcat中运行，这时启动项目，就可以直接调Tomcat中的servlet-api.jar，不必再将自己的jar包添加到项目中去。也就是说当你选择provided时，项目发布时Maven不会将你添加的jar包，加入到项目中。）3. runtime:    在测试和运行时有效。(典型例子：JDBC驱动的实现。)4. test:    只在测试是有效。5. system:    类似provided，与本机系统相关联，可移植性差。6. import:    导入范围，他只是用在dependencyManagement中，表示从其他的pom中导入dependecy的配置。（以下引用官网案例并不难理解。）Importing Dependencies&lt;project&gt;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;groupId&gt;maven&lt;/groupId&gt;  &lt;artifactId&gt;B&lt;/artifactId&gt;  &lt;packaging&gt;pom&lt;/packaging&gt;  &lt;name&gt;B&lt;/name&gt;  &lt;version&gt;1.0&lt;/version&gt;  &lt;dependencyManagement&gt;        &lt;dependencies&gt;                  &lt;dependency&gt;                    &lt;groupId&gt;maven&lt;/groupId&gt;                    &lt;artifactId&gt;A&lt;/artifactId&gt;                    &lt;version&gt;1.0&lt;/version&gt;                    &lt;type&gt;pom&lt;/type&gt;                    &lt;scope&gt;import&lt;/scope&gt;                  &lt;/dependency&gt;                          &lt;dependency&gt;                            &lt;groupId&gt;test&lt;/groupId&gt;                            &lt;artifactId&gt;d&lt;/artifactId&gt;                            &lt;version&gt;1.0&lt;/version&gt;                          &lt;/dependency&gt;        &lt;/dependencies&gt;  &lt;/dependencyManagement&gt;  &lt;dependencies&gt;            &lt;dependency&gt;              &lt;groupId&gt;test&lt;/groupId&gt;              &lt;artifactId&gt;a&lt;/artifactId&gt;              &lt;version&gt;1.0&lt;/version&gt;              &lt;scope&gt;runtime&lt;/scope&gt;            &lt;/dependency&gt;                    &lt;dependency&gt;                      &lt;groupId&gt;test&lt;/groupId&gt;                      &lt;artifactId&gt;c&lt;/artifactId&gt;                      &lt;scope&gt;runtime&lt;/scope&gt;                    &lt;/dependency&gt;  &lt;/dependencies&gt;&lt;/project&gt;</code></pre></div><p>Assuming A is the pom defined in the preceding example, the end result would be the same. <strong>All of A’s managed dependencies would be incorporated into B except for d since it is defined in this pom.</strong></p><p>假设A是前面示例中定义的pom，那么最终结果将是相同的。<strong>所有管理的依赖项都将被合并到B中，除了在这个pom中定义的d之外。</strong></p><h2 id="九-依赖冲突"><a href="#九-依赖冲突" class="headerlink" title="九.依赖冲突"></a>九.依赖冲突</h2><div class="hljs code-wrapper"><pre><code>1.短路优先:    C-&gt;B-&gt;A-&gt;X1(jar)    C-&gt;B-&gt;X2(jar)【C依赖B,B依赖A,A和B都包含同一个不同版本的Jar,则取B的依赖版本。（c的pom.xml中不必注明jar坐标）】2.先声明先优先    如果路径相同长度相同，则谁先声明，先解析谁。【C依赖A和B,A和B都包含同一个不同版本的Jar,谁依赖在前取谁的依赖版本。】</code></pre></div><h2 id="十-聚合与继承"><a href="#十-聚合与继承" class="headerlink" title="十.聚合与继承"></a>十.聚合与继承</h2><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><div class="hljs code-wrapper"><pre><code>&lt;packaging&gt;pom&lt;/packaging&gt;&lt;modules&gt;    &lt;module&gt;../HoictasStudio-MavenDemo01&lt;/module&gt;    &lt;module&gt;../HoictasStudio-MavenDemo02&lt;/module&gt;    &lt;module&gt;../HoictasStudio-MavenDemo03&lt;/module&gt;&lt;/modules&gt;</code></pre></div><p>假设在<strong>HoictasStudio-MavenParent</strong>模块中添如以上代码，输入<code>clean install</code>命令后，即可同时安装多个jar到本地仓库中</p><div class="hljs code-wrapper"><pre><code>    [INFO] HoictasStudio-MavenDemo01 .......................... SUCCESS [  4.618 s]    [INFO] HoictasStudio-MavenDemo02 .......................... SUCCESS [  0.828 s]    [INFO] HoictasStudio-MavenDemo03 .......................... SUCCESS [  0.923 s]    [INFO] HoictasStudio-MavenParent .......................... SUCCESS [  0.021 s]</code></pre></div><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><strong>根据官方文档说明继承会根据父模块与子模块的包含与否，对pom.xml的写法则有两种。</strong></p><h4 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h4><p>假设我们有两个模块，前一个叫 <code>com.mycompany.app:my-app:1</code>，后一个叫<code>com.mycompany.app:my-module:1</code>。</p><p>my-app的pom文件为：</p><div class="hljs code-wrapper"><pre><code>&lt;project&gt;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;  &lt;artifactId&gt;my-app&lt;/artifactId&gt;  &lt;version&gt;1&lt;/version&gt;&lt;/project&gt;</code></pre></div><p>my-module的pom文件为：</p><div class="hljs code-wrapper"><pre><code>&lt;project&gt;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;  &lt;artifactId&gt;my-module&lt;/artifactId&gt;  &lt;version&gt;1&lt;/version&gt;&lt;/project&gt;</code></pre></div><p>我们指定如下项目结构：</p><div class="hljs code-wrapper"><pre><code>    .     |-- my-module     |   `-- pom.xml     `-- pom.xml</code></pre></div><p>那么，我们需要<code>my-module</code>去继承<code>my-app</code>，则需要在<code>my-module</code>的pom文件中添加以下代码：</p><div class="hljs code-wrapper"><pre><code>    &lt;project&gt;      &lt;parent&gt;        &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;        &lt;artifactId&gt;my-app&lt;/artifactId&gt;        &lt;version&gt;1&lt;/version&gt;      &lt;/parent&gt;      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;      &lt;artifactId&gt;my-module&lt;/artifactId&gt;      &lt;version&gt;1&lt;/version&gt;    &lt;/project&gt;</code></pre></div><h4 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h4><div class="hljs code-wrapper"><pre><code>However, that would work if the parent project was already installed inour local repository or was in that specific directory structure (parent pom.xml is one directory higher than that of the module&#39;s pom.xml). But what if the parent is not yet installed and if the directory structure is. |-- my-module |   `-- pom.xml `-- parent     `-- pom.xml    </code></pre></div><p>上一段话摘自官网对继承的介绍，就是说如果你的父模块已在本地安装或者父模块不包含子模块，目录级别甚至是<br>比子模块的还要高，就在第一种写法上添加<code>&lt;relativePath&gt;</code>标签。</p><div class="hljs code-wrapper"><pre><code>&lt;project&gt;      &lt;parent&gt;        &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;        &lt;artifactId&gt;my-app&lt;/artifactId&gt;        &lt;version&gt;1&lt;/version&gt;        &lt;relativePath&gt;../parent/pom.xml&lt;/relativePath&gt;      &lt;/parent&gt;      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;artifactId&gt;my-module&lt;/artifactId&gt;&lt;/project&gt;</code></pre></div><p>笔者在看视频时就发现，当父模块与子模块处于同一级别时，在按照视频中的写法（第一种写法）test时就会报错，<br>而此时的情况是不包含子模块，所以应该在<code>&lt;parent&gt;</code>标签中添加<code>&lt;relativePath&gt;</code>标签即可测试通过。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Netty入门之WebSocket-1</title>
    <link href="/2021/03/24/Java/Netty%E5%85%A5%E9%97%A8%E4%B9%8BWebSocket-1/"/>
    <url>/2021/03/24/Java/Netty%E5%85%A5%E9%97%A8%E4%B9%8BWebSocket-1/</url>
    
    <content type="html"><![CDATA[<p>课程地址：<a href="https://www.imooc.com/learn/1118">https://www.imooc.com/learn/1118</a></p><p><img src="../images/2019122712345645.png"></p><p><img src="../images/2020022021533739.png" alt="2020022021533739"></p><p><img src="../images/20191227123315503.png" alt="20191227123315503"></p><p><img src="../images/20191227123818509-1.png" alt="20191227123818509-1"></p><p><img src="../images/20191227123818509.png" alt="20191227123818509"></p><p><img src="../images/20191227123840309.png" alt="20191227123840309"></p><p><img src="../images/20191227124110634.png" alt="20191227124110634"></p><p><img src="../images/20191227124127188.png" alt="20191227124127188"></p><p><img src="../images/20191227124522259.png" alt="20191227124522259"></p><p><img src="../images/20191227124546309.png" alt="20191227124546309"></p><p><img src="../images/20191227125344840.png" alt="20191227125344840"></p><p><img src="../images/20191227125409161.png" alt="20191227125409161"></p><p><img src="../images/20191227125647446.png" alt="20191227125647446"></p><p><img src="../images/20191227125731360.png" alt="20191227125731360"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Netty入门之WebSocket-2</title>
    <link href="/2021/03/24/Java/Netty%E5%85%A5%E9%97%A8%E4%B9%8BWebSocket-2/"/>
    <url>/2021/03/24/Java/Netty%E5%85%A5%E9%97%A8%E4%B9%8BWebSocket-2/</url>
    
    <content type="html"><![CDATA[<p>课程代码<br><strong>websocket.html</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset = utf-8&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>WebSocket客户端<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> socket;</span><br><span class="javascript"><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">window</span>.WebSocket)&#123;</span><br><span class="javascript"><span class="hljs-built_in">window</span>.WebSocket = <span class="hljs-built_in">window</span>.MozWebSocket;</span><br>&#125;<br><br><span class="javascript"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">window</span>.WebSocket)&#123;</span><br><span class="javascript">socket = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">&quot;ws://localhost:8888/websocket&quot;</span>);</span><br><span class="javascript">socket.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> ta = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;responseContent&#x27;</span>);</span><br><span class="javascript">ta.value += event.data + <span class="hljs-string">&quot;\r\n&quot;</span>;</span><br>&#125;;<br><br><span class="javascript">socket.onopen = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> ta = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;responseContent&#x27;</span>);</span><br><span class="javascript">ta.value = <span class="hljs-string">&quot;你当前的浏览器支持WebSocket,请进行后续操作\r\n&quot;</span>;</span><br>&#125;;<br><br><span class="javascript">socket.onclose = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> ta = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;responseContent&#x27;</span>);</span><br><span class="javascript">ta.value = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">ta.value = <span class="hljs-string">&quot;WebSocket连接已经关闭\r\n&quot;</span>;</span><br>&#125;;<br><span class="javascript">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">alert(<span class="hljs-string">&quot;您的浏览器不支持WebSocket&quot;</span>);</span><br>&#125;<br><br><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params">message</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">window</span>.WebSocket)&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span>;</span><br>&#125;<br>if(socket.readyState == WebSocket.OPEN)&#123;<br>socket.send(message);<br><span class="javascript">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">alert(<span class="hljs-string">&quot;WebSocket连接没有建立成功！！&quot;</span>);</span><br>&#125;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&quot;return false;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;发送WebSocket请求消息&quot;</span> <span class="hljs-attr">onClick</span> = <span class="hljs-string">&quot;send(this.form.message.value)&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>客户端接收到服务端返回的应答消息<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;responseContent&quot;</span> <span class="hljs-attr">style</span> = <span class="hljs-string">&quot;width:1024px; height:300px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>NettyConfig.java</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.imooc.netty;<br><br><span class="hljs-keyword">import</span> io.netty.channel.group.ChannelGroup;<br><span class="hljs-keyword">import</span> io.netty.channel.group.DefaultChannelGroup;<br><span class="hljs-keyword">import</span> io.netty.util.concurrent.GlobalEventExecutor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 存储整个工程的全局配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuyazhuang</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NettyConfig</span> </span>&#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 存储每一个客户端接入进来时的channel对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ChannelGroup group = <span class="hljs-keyword">new</span> DefaultChannelGroup(GlobalEventExecutor.INSTANCE);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>MyWebSocketHandler.java</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.imooc.netty;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">import</span> io.netty.buffer.ByteBuf;<br><span class="hljs-keyword">import</span> io.netty.buffer.Unpooled;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelFuture;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelFutureListener;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelHandlerContext;<br><span class="hljs-keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.DefaultFullHttpResponse;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.FullHttpRequest;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.HttpResponseStatus;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.HttpVersion;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.PingWebSocketFrame;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.PongWebSocketFrame;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.TextWebSocketFrame;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.WebSocketFrame;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory;<br><span class="hljs-keyword">import</span> io.netty.util.CharsetUtil;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 接收/处理/响应客户端websocket请求的核心业务处理类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuyazhuang</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyWebSocketHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleChannelInboundHandler</span>&lt;<span class="hljs-title">Object</span>&gt; </span>&#123;<br><br><span class="hljs-keyword">private</span> WebSocketServerHandshaker handshaker;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String WEB_SOCKET_URL = <span class="hljs-string">&quot;ws://localhost:8888/websocket&quot;</span>;<br><span class="hljs-comment">//客户端与服务端创建连接的时候调用</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>NettyConfig.group.add(ctx.channel());<br>System.out.println(<span class="hljs-string">&quot;客户端与服务端连接开启...&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//客户端与服务端断开连接的时候调用</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelInactive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>NettyConfig.group.remove(ctx.channel());<br>System.out.println(<span class="hljs-string">&quot;客户端与服务端连接关闭...&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//服务端接收客户端发送过来的数据结束之后调用</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelReadComplete</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>ctx.flush();<br>&#125;<br><br><span class="hljs-comment">//工程出现异常的时候调用</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exceptionCaught</span><span class="hljs-params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>cause.printStackTrace();<br>ctx.close();<br>&#125;<br><br><span class="hljs-comment">//服务端处理客户端websocket请求的核心方法</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">messageReceived</span><span class="hljs-params">(ChannelHandlerContext context, Object msg)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-comment">//处理客户端向服务端发起http握手请求的业务</span><br><span class="hljs-keyword">if</span> (msg <span class="hljs-keyword">instanceof</span> FullHttpRequest) &#123;<br>handHttpRequest(context,  (FullHttpRequest)msg);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (msg <span class="hljs-keyword">instanceof</span> WebSocketFrame) &#123; <span class="hljs-comment">//处理websocket连接业务</span><br>handWebsocketFrame(context, (WebSocketFrame)msg);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理客户端与服务端之前的websocket业务</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ctx</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> frame</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handWebsocketFrame</span><span class="hljs-params">(ChannelHandlerContext ctx, WebSocketFrame frame)</span></span>&#123;<br><span class="hljs-comment">//判断是否是关闭websocket的指令</span><br><span class="hljs-keyword">if</span> (frame <span class="hljs-keyword">instanceof</span> CloseWebSocketFrame) &#123;<br>handshaker.close(ctx.channel(), (CloseWebSocketFrame)frame.retain());<br>&#125;<br><span class="hljs-comment">//判断是否是ping消息</span><br><span class="hljs-keyword">if</span> (frame <span class="hljs-keyword">instanceof</span> PingWebSocketFrame) &#123;<br>ctx.channel().write(<span class="hljs-keyword">new</span> PongWebSocketFrame(frame.content().retain()));<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//判断是否是二进制消息，如果是二进制消息，抛出异常</span><br><span class="hljs-keyword">if</span>( ! (frame <span class="hljs-keyword">instanceof</span> TextWebSocketFrame) )&#123;<br>System.out.println(<span class="hljs-string">&quot;目前我们不支持二进制消息&quot;</span>);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;【&quot;</span>+<span class="hljs-keyword">this</span>.getClass().getName()+<span class="hljs-string">&quot;】不支持消息&quot;</span>);<br>&#125;<br><span class="hljs-comment">//返回应答消息</span><br><span class="hljs-comment">//获取客户端向服务端发送的消息</span><br>String request = ((TextWebSocketFrame) frame).text();<br>System.out.println(<span class="hljs-string">&quot;服务端收到客户端的消息====&gt;&gt;&gt;&quot;</span> + request);<br>TextWebSocketFrame tws = <span class="hljs-keyword">new</span> TextWebSocketFrame(<span class="hljs-keyword">new</span> Date().toString() <br>+ ctx.channel().id() <br>+ <span class="hljs-string">&quot; ===&gt;&gt;&gt; &quot;</span> <br>+ request);<br><span class="hljs-comment">//群发，服务端向每个连接上来的客户端群发消息</span><br>NettyConfig.group.writeAndFlush(tws);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理客户端向服务端发起http握手请求的业务</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ctx</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handHttpRequest</span><span class="hljs-params">(ChannelHandlerContext ctx, FullHttpRequest req)</span></span>&#123;<br><span class="hljs-keyword">if</span> (!req.getDecoderResult().isSuccess() <br>|| ! (<span class="hljs-string">&quot;websocket&quot;</span>.equals(req.headers().get(<span class="hljs-string">&quot;Upgrade&quot;</span>)))) &#123;<br>sendHttpResponse(ctx, req, <br><span class="hljs-keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.BAD_REQUEST));<br><span class="hljs-keyword">return</span>;<br>&#125;<br>WebSocketServerHandshakerFactory wsFactory = <span class="hljs-keyword">new</span> WebSocketServerHandshakerFactory(<br>WEB_SOCKET_URL, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">false</span>);<br>handshaker = wsFactory.newHandshaker(req);<br><span class="hljs-keyword">if</span> (handshaker == <span class="hljs-keyword">null</span>) &#123;<br>WebSocketServerHandshakerFactory.sendUnsupportedWebSocketVersionResponse(ctx.channel());<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>handshaker.handshake(ctx.channel(), req);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 服务端向客户端响应消息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ctx</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> res</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendHttpResponse</span><span class="hljs-params">(ChannelHandlerContext ctx, FullHttpRequest req,</span></span><br><span class="hljs-function"><span class="hljs-params">DefaultFullHttpResponse res)</span></span>&#123;<br><span class="hljs-keyword">if</span> (res.getStatus().code() != <span class="hljs-number">200</span>) &#123;<br>ByteBuf buf = Unpooled.copiedBuffer(res.getStatus().toString(), CharsetUtil.UTF_8);<br>res.content().writeBytes(buf);<br>buf.release();<br>&#125;<br><span class="hljs-comment">//服务端向客户端发送数据</span><br>ChannelFuture f = ctx.channel().writeAndFlush(res);<br><span class="hljs-keyword">if</span> (res.getStatus().code() != <span class="hljs-number">200</span>) &#123;<br>f.addListener(ChannelFutureListener.CLOSE);<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>MyWebSocketChannelHandler.java</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.imooc.netty;<br><br><span class="hljs-keyword">import</span> io.netty.channel.ChannelInitializer;<br><span class="hljs-keyword">import</span> io.netty.channel.socket.SocketChannel;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.HttpObjectAggregator;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;<br><span class="hljs-keyword">import</span> io.netty.handler.stream.ChunkedWriteHandler;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化连接时候的各个组件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuyazhuang</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyWebSocketChannelHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ChannelInitializer</span>&lt;<span class="hljs-title">SocketChannel</span>&gt; </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(SocketChannel e)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>e.pipeline().addLast(<span class="hljs-string">&quot;http-codec&quot;</span>, <span class="hljs-keyword">new</span> HttpServerCodec());<br>e.pipeline().addLast(<span class="hljs-string">&quot;aggregator&quot;</span>, <span class="hljs-keyword">new</span> HttpObjectAggregator(<span class="hljs-number">65536</span>));<br>e.pipeline().addLast(<span class="hljs-string">&quot;http-chunked&quot;</span>, <span class="hljs-keyword">new</span> ChunkedWriteHandler());<br>e.pipeline().addLast(<span class="hljs-string">&quot;handler&quot;</span>, <span class="hljs-keyword">new</span> MyWebSocketHandler());<br>&#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>Main.java</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.imooc.netty;<br><br><span class="hljs-keyword">import</span> io.netty.bootstrap.ServerBootstrap;<br><span class="hljs-keyword">import</span> io.netty.channel.Channel;<br><span class="hljs-keyword">import</span> io.netty.channel.EventLoopGroup;<br><span class="hljs-keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;<br><span class="hljs-keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 程序的入口，负责启动应用</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuyazhuang</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>EventLoopGroup bossGroup = <span class="hljs-keyword">new</span> NioEventLoopGroup();<br>EventLoopGroup workGroup = <span class="hljs-keyword">new</span> NioEventLoopGroup();<br><span class="hljs-keyword">try</span> &#123;<br>ServerBootstrap b = <span class="hljs-keyword">new</span> ServerBootstrap();<br>b.group(bossGroup, workGroup);<br>b.channel(NioServerSocketChannel.class);<br>b.childHandler(<span class="hljs-keyword">new</span> MyWebSocketChannelHandler());<br>System.out.println(<span class="hljs-string">&quot;服务端开启等待客户端连接....&quot;</span>);<br>Channel ch = b.bind(<span class="hljs-number">8888</span>).sync().channel();<br>ch.closeFuture().sync();<br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-comment">//优雅的退出程序</span><br>bossGroup.shutdownGracefully();<br>workGroup.shutdownGracefully();<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>springboot启动失败常见问题</title>
    <link href="/2021/03/24/Java/springboot%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <url>/2021/03/24/Java/springboot%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<!-- - 刚开始使用springboot连接mysql数据库，项目启动的时候报了一个错误 --><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Loading class `com.mysql.jdbc.Driver<span class="hljs-string">&#x27;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&#x27;</span>. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.<br></code></pre></div></td></tr></table></figure><p>原因：现在很多定的教学视频都比较老，教学使用的mysql版本和你自己本地使用的版本不一致，新版本的mysql需要设置成  “com.mysql.cj.jdbc.Driver”，另外还需要增加一个参数 serverTimezone=UTC<br>参考文档：<a href="https://blog.csdn.net/weixin_43770545/article/details/90486809">https://blog.csdn.net/weixin_43770545/article/details/90486809</a></p><ul><li>项目启动的时候报错，很显然数据库没有正常连接<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">java.sql.SQLException: Access denied <span class="hljs-keyword">for</span> user <span class="hljs-string">&#x27;&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> (using password: NO)<br></code></pre></div></td></tr></table></figure>我当时写的配置是，写的时候IDEA直接提示选了一个，单词没选对data-username 和 data-password，实际应该使用 username 和 password，主要还是没有记清楚配置。当作是一个教训吧。<br>错误的配置：<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;charseterEncoding=utf-8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">data-username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">data-password:</span> <span class="hljs-string">root</span><br></code></pre></div></td></tr></table></figure>正确的配置<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;charseterEncoding=utf-8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx unit</title>
    <link href="/2021/03/24/NGINX/Nginx%20unit/"/>
    <url>/2021/03/24/NGINX/Nginx%20unit/</url>
    
    <content type="html"><![CDATA[<p>1、nginx  unit 的配置时直接在内存中更新的，如何做到语法错误检测<br>2、怎么配置不同语言的App应用<br>3、配置语法是怎样的，和nginx的区别大吗<br>4、不同语言的App在使用unit作为web容器的时候，都需要做出什么样的改动，例如：golang使用unit的时候需要将http.handler替换陈unit.handler</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx架构及核心流程及模块介绍</title>
    <link href="/2021/03/24/NGINX/Nginx%E6%9E%B6%E6%9E%84%E5%8F%8A%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B%E5%8F%8A%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/03/24/NGINX/Nginx%E6%9E%B6%E6%9E%84%E5%8F%8A%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B%E5%8F%8A%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p>Nginx架构及核心流程及模块介绍：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2MjEyMDI5NA==&amp;mid=2247483697&amp;idx=1&amp;sn=a1e79703c39b00224ba613ba6c01a98e&amp;chksm=ce0df138f97a782e0f97a2748dd8c4d1b48941d6229f4b6d5e22b60a9edf2e46041be062eefc&amp;mpshare=1&amp;scene=24&amp;srcid=0314M9iypvJXOF6eYPXj9mx4&amp;key=bf4cf7f356eb27520c9277b9384b285123f7e2159c8b4f2dfc4e404b8d08db6c2dc3c3639b3ffc54cd4213fb1eb08860918edddf3081951de0b3fc834cf98bd32b84fb59b7604e54f11484b60f6a931f&amp;ascene=14&amp;uin=MTkwNjk4NjAxMA==&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=JogDaVDjKXx9W3zQZ2sl6TAUdMDS7rKA0Zb9hMwwVMC4ALxeAySdvq8JADMCeINW">https://mp.weixin.qq.com/s?__biz=Mzg2MjEyMDI5NA==&amp;mid=2247483697&amp;idx=1&amp;sn=a1e79703c39b00224ba613ba6c01a98e&amp;chksm=ce0df138f97a782e0f97a2748dd8c4d1b48941d6229f4b6d5e22b60a9edf2e46041be062eefc&amp;mpshare=1&amp;scene=24&amp;srcid=0314M9iypvJXOF6eYPXj9mx4&amp;key=bf4cf7f356eb27520c9277b9384b285123f7e2159c8b4f2dfc4e404b8d08db6c2dc3c3639b3ffc54cd4213fb1eb08860918edddf3081951de0b3fc834cf98bd32b84fb59b7604e54f11484b60f6a931f&amp;ascene=14&amp;uin=MTkwNjk4NjAxMA%3D%3D&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=JogDaVDjKXx9W3zQZ2sl6TAUdMDS7rKA0Zb9hMwwVMC4ALxeAySdvq8JADMCeINW</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx知识梳理</title>
    <link href="/2021/03/24/NGINX/Nginx%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    <url>/2021/03/24/NGINX/Nginx%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><strong>Nginx进程管理信信号</strong></p><p><img src="../images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70.png" alt="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nginx  resolver</title>
    <link href="/2021/03/24/NGINX/nginx%20%20resolver/"/>
    <url>/2021/03/24/NGINX/nginx%20%20resolver/</url>
    
    <content type="html"><![CDATA[<p><strong>背景</strong>：nginx 配置proxy_pass后，访问接口出现no resolver defined to resolve错误，或者接口直接502，404，需要配置 nginx resolver</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">server &#123;<br>server_name wfk.mohuani.com<br><br>location / &#123;<br>resolver <span class="hljs-number">114.114</span>.<span class="hljs-number">114.114</span>;<br>proxy_pass https:<span class="hljs-regexp">//</span>wfk.mohuani.com<span class="hljs-regexp">/abc/</span><span class="hljs-variable">$1</span>/<span class="hljs-variable">$2</span>  ---<span class="hljs-number">404</span><br>proxy_pass https:<span class="hljs-regexp">//</span>www.baidu.com<span class="hljs-regexp">/abc/</span><span class="hljs-variable">$1</span>/<span class="hljs-variable">$2</span>  ---<span class="hljs-number">502</span><br>proxy_pass https:<span class="hljs-regexp">//</span><span class="hljs-number">113.105</span>.<span class="hljs-number">77.194</span><span class="hljs-regexp">/abc/</span><span class="hljs-variable">$1</span>/<span class="hljs-variable">$2</span>  ---<span class="hljs-number">404</span><br>proxy_pass https:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/abc/</span><span class="hljs-variable">$1</span>/<span class="hljs-variable">$2</span>   ---<span class="hljs-number">404</span><br>&#125;<br><br></code></pre></div></td></tr></table></figure><h5 id="不配置-resolver的情况接口的状态"><a href="#不配置-resolver的情况接口的状态" class="headerlink" title="不配置 resolver的情况接口的状态"></a>不配置 resolver的情况接口的状态</h5><ul><li>proxy_pass 代理的是域名（非自身server_name），且代理的地址中包含变量，接口502</li><li>proxy_pass 代理的是ip，且代理的地址中包含变量，接口404</li><li>proxy_pass 代理的域名如果和自身server_name相同接口会404，如果和自身的server_name不相同的话接口会502</li></ul><p> ps：个人猜测，当proxy_pass 设置为自身server_name 时，server_name会被转成127.0.0.1，导致接口报的是404，而不是502。</p><h5 id="具体什么情况下需要配置-resolver"><a href="#具体什么情况下需要配置-resolver" class="headerlink" title="具体什么情况下需要配置 resolver"></a>具体什么情况下需要配置 resolver</h5><ul><li>proxy_pass 代理的是<strong>域名</strong>或者<strong>ip</strong>,且代理的接口中包含 <strong>变量</strong></li></ul><h5 id="resolver设置哪些DNS"><a href="#resolver设置哪些DNS" class="headerlink" title="resolver设置哪些DNS"></a>resolver设置哪些DNS</h5><p>resolver 设置公共的DNS或者公司内部的DNS都可以</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">resolver</span> <span class="hljs-number">114.114.114.114</span>;<br><span class="hljs-attribute">resolver</span> <span class="hljs-number">8.8.8.8</span>;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nginx关键字</title>
    <link href="/2021/03/24/NGINX/nginx%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2021/03/24/NGINX/nginx%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>对关键字的解释会慢慢加上</p><p>master进程：<br>worker进程：<br>pass_proxy</p><hr><p>core Nginx.c：<br>daemon<br>master_process<br>timer_resolution<br>pid<br>lock_file<br>worker_processes<br>debug_points<br>user<br>worker_priority<br>worker_cpu_affinity<br>worker_rlimit_nofile<br>worker_rlimit_core<br>worker_rlimit_sigpending<br>working_directory<br>worker_threads<br>thread_stack_size</p><p>core Ngx_conf_file.c:<br>include</p><p>event Ngx_devpoll_modules.c:<br>devpoll_changes<br>devpoll_events</p><p>event Ngx_epoll_modules.c:<br>epoll_events</p><p>event Ngx_event.c:<br>events<br>worker_connections<br>connections<br>use<br>multi_accept<br>accept_mutex<br>accept_mutex_delay<br>debug_connection</p><p>core Ngx_eventport_modules.c:<br>eventport_events</p><p>core Ngx_event_openssl.c:<br>ssl_engine</p><p>http Ngx_http.c:<br>http</p><p>http modules Ngx_http_access_modules.c:<br>allow<br>deny</p><p>http modules Ngx_http_addition_filter_modules.c:<br>add_before_body<br>add_after_body</p><p>http modules Ngx_http_auth_basic_modules.c:<br>auth_basic<br>auth_basic_user_file</p><p>http modules Ngx_http_autoindex_module.c:<br>autoindex<br>autoindex_localtime<br>autoindex_exact_size</p><p>http modules Ngx_http_browser_module.c:<br>modern_browser<br>ancient_browser<br>modern_browser_value<br>ancient_browser_value</p><p>http modules Ngx_http_charset_filter_module.c:<br>charset<br>source_charset<br>override_charset<br>charset_map</p><p>http Ngx_http_copy_filter_module.c:<br>output_buffers</p><p>http Ngx_http_core_module.c:<br>variables_hash_max_size<br>variables_hash_bucket_size<br>server_names_hash_max_size<br>server_names_hash_bucket_size<br>server<br>connection_pool_size<br>request_pool_size<br>client_header_timeout<br>client_header_buffer_size<br>large_client_header_buffers<br>optimize_server_names<br>optimize_host_names<br>ignore_invalid_headers<br>location<br>listen<br>server_name<br>types_hash_max_size<br>types_hash_bucket_size<br>types<br>default_type<br>root<br>alias<br>limit_except<br>client_max_body_size<br>client_body_buffer_size<br>client_body_timeout<br>client_body_temp_path<br>client_body_in_file_only<br>sendfile<br>tcp_nopush<br>tcp_nodelay<br>send_timeout<br>send_lowat<br>postpone_output<br>limit_rate<br>keepalive_timeout<br>satisfy_any<br>internal<br>lingering_time<br>lingering_timeout<br>reset_timedout_connection<br>port_in_redirect<br>msie_padding<br>msie_refresh<br>log_not_found<br>recursive_error_pages<br>error_page<br>post_action<br>error_log<br>open_file_cache</p><p>http modules ngx_http_dav_module.c:<br>dav_methods<br>create_full_put_path<br>dav_access</p><p>http modules ngx_http_empty_gif_module.c:<br>empty_gif</p><p>http modules ngx_http_fastcgi_module.c:<br>fastcgi_pass<br>fastcgi_index<br>fastcgi_ignore_client_abort<br>fastcgi_connect_timeout<br>fastcgi_send_timeout<br>fastcgi_send_lowat<br>fastcgi_buffer_size<br>fastcgi_header_buffer_size<br>fastcgi_pass_request_headers<br>fastcgi_pass_request_body<br>fastcgi_intercept_errors<br>fastcgi_redirect_errors<br>fastcgi_read_timeout<br>fastcgi_buffers<br>fastcgi_busy_buffers_size<br>fastcgi_temp_path<br>fastcgi_max_temp_file_size<br>fastcgi_temp_file_write_size<br>fastcgi_next_upstream<br>fastcgi_upstream_max_fails<br>fastcgi_upstream_fail_timeout<br>fastcgi_param<br>fastcgi_pass_header<br>fastcgi_hide_header</p><p>http modules ngx_http_flv_modules.c:<br>flv</p><p>http modules ngx_http_geo_modules.c:<br>geo</p><p>http modules ngx_http_gzip_filter_modules.c:<br>gzip<br>gzip_buffers<br>gzip_types<br>gzip_comp_level<br>gzip_window<br>gzip_hash<br>gzip_no_buffer<br>gzip_http_version<br>gzip_proxied<br>gzip_min_length</p><p>http modules ngx_http_headers_filter_modules.c:<br>expires<br>add_header</p><p>http modules ngx_http_index_modules.c:<br>index<br>index_cache</p><p>http modules ngx_http_log_modules.c:<br>log_format<br>access_log</p><p>http modules ngx_http_map_modules.c:<br>map<br>map_hash_max_size<br>map_hash_bucket_size</p><p>http modules ngx_http_memcached_modules.c:<br>memcached_pass<br>memcached_connect_timeout<br>memcached_send_timeout<br>memcached_buffer_size<br>memcached_read_timeout<br>memcached_next_upstream<br>memcached_upstream_max_fails<br>memcached_upstream_fail_timeout</p><p>mysql ngx_http_mysql_test.c<br>mysql_test</p><p>http modules ngx_http_perl_modules.c:<br>perl_modules<br>perl_require<br>perl<br>perl_set</p><p>http modules ngx_http_proxy_modules.c:<br>proxy_pass<br>proxy_redirect<br>proxy_buffering<br>proxy_ignore_client_abort<br>proxy_connect_timeout<br>proxy_send_timeout<br>proxy_send_lowat<br>proxy_intercept_errors<br>proxy_redirect_errors<br>proxy_set_header<br>proxy_set_body<br>proxy_method<br>proxy_pass_request_headers<br>proxy_pass_request_body<br>proxy_buffer_size<br>proxy_header_buffer_size<br>proxy_read_timeout<br>proxy_buffers<br>proxy_busy_buffers_size<br>proxy_temp_path<br>proxy_max_temp_file_size<br>proxy_temp_file_write_size<br>proxy_next_upstream<br>proxy_upstream_max_fails<br>proxy_upstream_fail_timeout<br>proxy_pass_header<br>proxy_hide_header</p><p>http modules ngx_http_realip_module.c:<br>set_real_ip_from<br>real_ip_header</p><p>http modules ngx_http_referer_module.c:<br>valid_referers</p><p>http modules ngx_http_rewrite_module.c:<br>rewrite<br>return<br>break<br>if<br>set<br>rewrite_log<br>uninitialized_variable_warn</p><p>http modules ngx_http_ssi_filter_module.c:<br>ssi<br>ssi_silent_errors<br>ssi_ignore_recycled_buffers<br>ssi_min_file_chunk<br>ssi_value_length<br>ssi_types</p><p>http modules Ngx_http_ssl_module.c:<br>ssl<br>ssl_certificate<br>ssl_certificate_key<br>ssl_protocols<br>ssl_ciphers<br>ssl_verify_client<br>ssl_verify_depth<br>ssl_client_certificate<br>ssl_prefer_server_ciphers<br>ssl_session_timeout</p><p>http modules Ngx_http_static_module.c:<br>redirect_cache</p><p>http modules Ngx_http_status_module.c:<br>status</p><p>http modules Ngx_http_stub_status_module.c:<br>stub_status</p><p>http Ngx_http_upstream.c:<br>upstream<br>server</p><p>http modules Ngx_http_upstream_ip_hash_module.c：<br>ip_hash</p><p>http modules Ngx_http_userid_filter_module.c：<br>userid<br>userid_service<br>userid_name<br>userid_domain<br>userid_path<br>userid_expires<br>userid_p3p<br>userid_mark</p><p>imap Ngx_imap.c：<br>imap</p><p>imap Ngx_imap_auth_http_module.c:<br>auth_http<br>auth_http_timeout<br>auth_http_header</p><p>imap Ngx_imap_core_module.c:<br>server<br>listen<br>protocol<br>imap_client_buffer<br>so_keepalive<br>timeout<br>pop3_capabilities<br>imap_capabilities<br>server_name<br>auth</p><p>imap Ngx_imap_proxy_module.c:<br>proxy<br>proxy_buffer<br>proxy_timeout<br>proxy_pass_error_message</p><p>imap Ngx_imap_ssl_module.c:<br>ssl<br>starttls<br>ssl_certificate<br>ssl_certificate_key<br>ssl_protocols<br>ssl_ciphers<br>ssl_prefer_server_ciphers<br>ssl_session_timeout</p><p>event modules Ngx_iocp_module.c:<br>iocp_threads<br>post_acceptex<br>acceptex_read</p><p>event modules Ngx_kqueue_module.c:<br>kqueue_changes<br>kqueue_events</p><p>core Ngx_log.c:<br>error_log</p><p>event modules Ngx_rtsig_module.c:<br>rtsig_signo<br>rtsig_overflow_events<br>rtsig_overflow_test<br>rtsig_overflow_threshold</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>深入浅出nginx9-10</title>
    <link href="/2021/03/24/NGINX/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAnginx9-10/"/>
    <url>/2021/03/24/NGINX/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAnginx9-10/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190702002835367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190702002932802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><a href="https://www.bilibili.com/video/av46744851/?p=10">https://www.bilibili.com/video/av46744851/?p=10</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP 水印  验证码</title>
    <link href="/2021/03/24/PHP/PHP%20%E6%B0%B4%E5%8D%B0%20%20%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <url>/2021/03/24/PHP/PHP%20%E6%B0%B4%E5%8D%B0%20%20%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p><strong>PHP水印</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a25511a9bd25726528c0df256433354a.png" alt="PHP水印"></p><hr><p><strong>PHP验证码处理</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/20a0a84e2cc9836d36e41e6496fbe783.png" alt="PHP验证码处理"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP7的基本变量</title>
    <link href="/2021/03/24/PHP/PHP7%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8F%98%E9%87%8F/"/>
    <url>/2021/03/24/PHP/PHP7%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h4 id="课程地址：https-www-imooc-com-learn-1085"><a href="#课程地址：https-www-imooc-com-learn-1085" class="headerlink" title="课程地址：https://www.imooc.com/learn/1085"></a>课程地址：<a href="https://www.imooc.com/learn/1085">https://www.imooc.com/learn/1085</a></h4><p><img src="https://img-blog.csdnimg.cn/20190428145419579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190428145455679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHPUnit单元测试</title>
    <link href="/2021/03/24/PHP/PHPUnit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <url>/2021/03/24/PHP/PHPUnit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>###前言<br>单元测试这个问题对于新人来说总感觉没意思，感觉单元测试做不做都没啥问题，有时候还总觉得做单元测试很浪费时间。我总感觉 PHP 的开发者们并没有对 PHP 的质量有所追求，让大部分的开发者总以为浏览器访问就没有问题，所以很多时候，做 PHP 开发的，就没有单元测试的这些概念了。能不能有点追求？作为一个开发者，或者说是一个产品的经手人，就应该用心地去做好每个细节，一次比一次要更好。但是做单元测试，质量检查，是需要一定的时间和人力投入的，但我敢保证地说，你花时间投入的，绝对不会是没用的，一定对你，对项目来说，是一个质的提升，只要你肯投入时间用心去做。</p><p>单元测试是对单独的代码对象进行测试的过程，比如对函数、类、方法进行测试。单元测试可以使用任意一段已经写好的测试代码，也可以使用一些已经存在的测试框架，比如JUnit、PHPUnit或者Cantata++，单元测试框架提供了一系列共同、有用的功能来帮助人们编写自动化的检测单元，例如检查一个实际的值是否符合我们期望的值的断言。单元测试框架经常会包含每个测试的报告，以及给出你已经覆盖到的代码覆盖率。总之一句话，使用 phpunit 进行自动测试，会使你的代码更健壮，减少后期维护的成本，也是一种比较标准的规范。现如今流行的PHP框架都带了单元测试，如Laraval,Symfony,Yii2等，单元测试已经成了标配。另外，单元测试用例是通过命令操控测试脚本的，而不是通过浏览器访问URL的。</p><p>直接简单讲讲 PHPUnit吧。<br>官网：<a href="https://phpunit.de/">https://phpunit.de/</a><br>中文版官网：<a href="http://www.phpunit.cn/">http://www.phpunit.cn/</a><br>###1.安装<br>习惯用 composer，使用 composer 安装吧。关于composer的安装可以参考<a href="https://www.phpcomposer.com/">https://www.phpcomposer.com/</a> 的介绍。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">composer <span class="hljs-built_in">require</span> <span class="hljs-comment">--dev phpunit/phpunit ^6.5</span><br>//这里的 ^<span class="hljs-number">6.5</span> 是版本号<br></code></pre></div></td></tr></table></figure><p>###2.PHPunit的已引入</p><figure class="highlight php-template"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php-template"><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><br><span class="php"><span class="hljs-keyword">use</span> <span class="hljs-title">PHPUnit</span>\<span class="hljs-title">Framework</span>\<span class="hljs-title">TestCase</span>;</span><br><br><span class="php"><span class="hljs-comment">//类名不能以Test开头，否则无法运行</span></span><br><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span> </span></span><br><span class="php">&#123;</span><br><span class="php"><span class="hljs-comment">//Todo</span></span><br><span class="php">&#125;</span><br></code></pre></div></td></tr></table></figure><p>###3.输出格式的解读。</p><p>.    成功<br>F    失败<br>E 错误<br>R 有风险<br>S 跳过<br>I 未完成</p><p>###4.常见的断言方法<br>详细的断言方法和参数详解可以参考PHPUnit中文网站的文档<a href="https://phpunit.readthedocs.io/zh_CN/latest/assertions.html">https://phpunit.readthedocs.io/zh_CN/latest/assertions.html</a></p><p>1.判断一个数组中是否含有指定的key</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertArrayHasKey</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>2.判断是否含有数组形式的子集</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertArraySubset</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>3.判断数组中是否含有指定的值</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertContains</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>4.判断数组中不含指定的值，与3相反</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertNotContains</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>5.判断数组中的数据是否仅是指定的数据类型，比如interger，float，boolean，object，string等。</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertContainsOnly</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>6.与5相反，比如interger，float，boolean，object，string等</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertNotContainsOnly</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>7.</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertContainsOnlyInstancesOf</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>8.判断数组的长度和指定的数组长度是否相等</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertCount</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>9.判断指定的多个数组的值是否相等，数组的元素顺序和值都会进行判断</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertEquals</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>10.与9相反</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertNotEquals</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>###5.字符串的常用断言方法<br>1.判断字符串中是否含有某个字符</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertContains</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>2.判断字符串</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertEquals</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>3.判断字符串与指定的正则表达式能否匹配</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertRegExp</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>4.判断字符串</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertStringMatchesFormat</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>5.判断字符串</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertStringMatchesFormatFile</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>6.判断字符串与指定字符是否相等，assertSame()采用===判断，assertEquals()采用==判断</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertSame</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>7.与6相反</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertNotSame</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>8.判断字符串是否以指定的字符结尾</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertStringEndsWith</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>9.判断字符串是否与指定的文件内容相等</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertStringEqualsFile</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>10.判断字符串是否以指定的字符开头</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertStringStartsWith</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>###6.类的断言方法<br>1.判断类中是否含有指定的某个属性，不管这个属性是否为static，public，private，protected都可以</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertClassHasAttribute</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>2.判断类中是否含有静态属性，只判断是否有static修饰</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertClassHasStaticAttribute</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>3.判断类是否相等，会判断类里面的值，单不判断数据类型，采用==判断</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertEquals</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>4.判断一个类是否来自一个指定的继承类</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertInstanceOf</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>5.断言一个类的实例是否含有指定的属性</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertObjectHasAttribute</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP 优秀资源汇集</title>
    <link href="/2021/03/24/PHP/PHP%20%E4%BC%98%E7%A7%80%E8%B5%84%E6%BA%90%E6%B1%87%E9%9B%86/"/>
    <url>/2021/03/24/PHP/PHP%20%E4%BC%98%E7%A7%80%E8%B5%84%E6%BA%90%E6%B1%87%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="php-awesome"><a href="#php-awesome" class="headerlink" title="php-awesome"></a>php-awesome</h1><blockquote><p>以下是我整理好的 PHP 资源，各位看官拿去用，不用再自己找了。</p><p>每周在 <a href="https://github.com/shockerli/php-awesome">GitHub</a> 上更新，觉得不错请点个 Star ❤️</p><p>如转载分享，请保留出处，谢谢 ?</p><p>原文地址: <a href="https://shockerli.net/post/php-awesome">https://shockerli.net/post/php-awesome</a></p><p>GitHub: <a href="https://github.com/shockerli/php-awesome">https://github.com/shockerli/php-awesome</a></p></blockquote><ul><li><p><strong>PHP PSR 代码标准</strong></p><ul><li>官网: <a href="https://www.php-fig.org/">https://www.php-fig.org</a></li><li>原文: <a href="https://github.com/php-fig/fig-standards">https://github.com/php-fig/fig-standards</a></li><li>中文: <a href="https://psr.phphub.org/">https://psr.phphub.org</a></li></ul></li><li><p><a href="https://github.com/ziadoz/awesome-php">PHP 资源列表</a></p></li><li><p><a href="https://github.com/domnikl/DesignPatternsPHP">PHP 设计模式</a></p></li><li><p><a href="https://github.com/m9rco/algorithm-php">用 PHP 的方式实现的各类算法合集</a></p></li><li><p><a href="https://raw.githubusercontent.com/justjavac/awesome-awesomeness-zh_CN/master/assets/php-mind-map.jpg">PHP 知识技能树</a></p></li></ul><h2 id="资源站点"><a href="#资源站点" class="headerlink" title="资源站点"></a>资源站点</h2><ul><li><a href="http://www.phpweekly.com/">PHP Weekly</a> - PHP 周报邮件</li><li><a href="http://thephpleague.com/zh-cn/"><strong>PHP League</strong></a> - PHP 软件包的发展者联盟</li><li><a href="http://knplabs.com/"><strong>KnpLabs</strong></a> - Object oriented Menus for your Symfony projects</li></ul><h2 id="项目框架"><a href="#项目框架" class="headerlink" title="项目框架"></a>项目框架</h2><ul><li><a href="https://github.com/karsonzhang/fastadmin"><strong>FastAdmin</strong></a> - 基于 ThinkPHP5 + Bootstrap 的极速后台开发框架</li><li><a href="https://gitee.com/rainfer/YFCMF">YFCMF</a> - 后台内容管理框架，基于 ThinkPHP5.1</li><li><a href="https://github.com/thinkcmf/thinkcmf">ThinkCMF</a> - 后台内容管理框架，基于 ThinkPHP5</li><li><a href="https://github.com/geesondog/rhaphp">RhaPHP</a> - 微信开发、小程序开发、微信公众号管理系统</li><li><a href="https://gitee.com/Bigotry/OneBase">OneBase</a> - 基于 ThinkPHP5 的后台开发框架</li></ul><h2 id="成品软件"><a href="#成品软件" class="headerlink" title="成品软件"></a>成品软件</h2><h3 id="未归类"><a href="#未归类" class="headerlink" title="未归类"></a>未归类</h3><ul><li><a href="https://github.com/matomo-org/matomo"><strong>Matomo</strong></a> - 开源 Web 统计软件，原 Piwik</li><li><a href="https://github.com/duckchat/gaga">DuckChat</a> - 私有聊天软件</li><li><a href="https://github.com/BookStackApp/BookStack">BookStack</a> - 类 wiki 和在线书籍写作平台</li><li><a href="https://github.com/lifei6671/SmartWiki">SmartWiki</a> - 支持 Markdown 的文档工具</li><li><a href="https://github.com/Codiad/Codiad">Codiad</a> - Web 在线 IDE</li><li><a href="https://github.com/Qsnh/meedu">MeEdu</a> - 基于 Laravel 开发的在线点播系统</li><li><a href="https://github.com/CachetHQ/Cachet">Cachet</a> - The open source status page system</li><li><a href="https://github.com/magento/magento2">Magento</a> - 电商系统</li><li><a href="https://github.com/monicahq/monica">Monica</a> - 个人 CRM</li><li><a href="https://github.com/phpservermon/phpservermon">PHP Server Monitor</a> - 服务器监控工具</li><li><a href="https://github.com/phpsysinfo/phpsysinfo">phpSysInfo</a> - 系统信息展示</li><li><a href="https://github.com/YouPHPTube/YouPHPTube">YouPHPTube</a> - YouTube 克隆工具</li></ul><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><ul><li><a href="https://github.com/getgrav/grav">Grav</a> - 基于文件的 CMS</li><li><a href="https://github.com/octobercms/october">October</a> - 基于 Laravel 开发的 CMS</li></ul><h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><ul><li><a href="https://github.com/flarum/flarum">Flarum</a> - 基于 PHP 和 Mithril.js 开发的轻社区</li><li><a href="https://github.com/slince/phpdish">PHPDish</a> - 基于 Symfony 框架开发的内容社区系统</li></ul><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><ul><li><a href="https://github.com/nextcloud/server">Nextcloud Server</a> - 基于 PHP 的私有云服务</li><li><a href="https://github.com/HFO4/Cloudreve">Cloudreve</a> - 支持多家云存储的云盘系统</li><li><a href="https://github.com/thephpleague/flysystem">Flysystem</a> - 支持几十种驱动的文件管理库</li></ul><h3 id="微信相关"><a href="#微信相关" class="headerlink" title="微信相关"></a>微信相关</h3><ul><li><a href="https://gitee.com/laiketui/open">来客电商</a> - 微信小程序电商平台</li><li><a href="https://gitee.com/xany/bestshop-php">萤火小程序商城</a></li><li><a href="http://www.weiphp.cn/">WeiPHP</a></li><li><a href="http://www.we7.cc/">微擎</a></li></ul><h3 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h3><ul><li><a href="https://www.zentao.net/"><strong>禅道</strong></a> - 项目管理软件</li><li><a href="https://github.com/jitamin/jitamin">Jitamin</a> - 项目管理系统</li><li><a href="https://github.com/fguillot/kanboard">Kanboard</a> - 项目管理工具</li><li><a href="https://github.com/Alanaktion/phproject">Phproject</a> - 项目管理系统</li></ul><h3 id="构建-部署"><a href="#构建-部署" class="headerlink" title="构建/部署"></a>构建/部署</h3><ul><li><p><a href="https://github.com/phacility/phabricator"><strong>Phabricator</strong></a> - 用于敏捷开发的项目管理软件, 含代码托管、Code Review、任务管理、文档管理、问题跟踪、构建与持续集成、博客、内部聊天等</p><blockquote><ul><li><a href="https://phabricator.webfuns.net/">Phabricator 中文站</a> - 含中文文档、全部插件演示和配置文档</li></ul></blockquote></li><li><p><a href="https://github.com/meolu/walle-web">Walle</a> - Web系统部署工具</p></li><li><p><a href="https://github.com/Piplin/Piplin">Piplin</a> - 持续集成系统</p></li><li><p><a href="https://github.com/phingofficial/phing">Phing</a> - PHP项目构建工具</p></li><li><p><a href="https://github.com/deployphp/deployer">Deployer</a> - PHP项目部署工具</p></li><li><p><a href="https://github.com/block8/phpci">PHPCI</a> - 持续集成工具</p></li></ul><h2 id="基础框架"><a href="#基础框架" class="headerlink" title="基础框架"></a>基础框架</h2><ul><li><a href="https://github.com/slimphp/Slim"><strong>Slim</strong></a> - 非常优秀的轻量级框架，适合开发小型 API 应用</li><li><a href="https://github.com/symfony/symfony">Symfony</a> - 组件式框架，提供了众多优秀的 PHP 类库</li><li><a href="https://github.com/laravel/laravel">Laravel</a> - 号称最优雅的 PHP 框架</li><li><a href="https://github.com/bcit-ci/CodeIgniter">CodeIgniter</a> - 著名的 MVC 框架</li><li><a href="https://github.com/codeigniter4/CodeIgniter4">CodeIgniter4</a> - CodeIgniter 全新现代版本</li><li><a href="https://github.com/yiisoft/yii2">Yii 2</a></li><li><a href="https://github.com/top-think/think">ThinkPHP 5</a></li><li><a href="https://github.com/zendframework/zendframework">Zend Framework</a></li><li><a href="https://github.com/mikecao/flight">Flight</a> - RESTful 框架</li><li><a href="https://github.com/vlucas/bulletphp">Bullet</a> - RESTful 框架</li><li><a href="http://auraphp.com/">Aura</a> - 包含许多组件</li><li><a href="https://kohanaframework.org/">Kohana</a> - HMVC框架</li><li><a href="https://github.com/walkor/workerman"><strong>Workerman</strong></a> - PHP Socket服务器框架</li><li><a href="https://github.com/OpenIBC/Ohsce">Ohsce</a> - 高可靠性 PHP 通信&amp;控制框架 SOCKET</li><li><a href="https://github.com/php-pm/php-pm">PPM</a> - PHP Process Manager</li><li><a href="https://github.com/shenzhe/zphp">ZPHP</a> - SOA 服务框架</li><li><a href="https://github.com/appserver-io/appserver">appserver.io</a> - 多线程的 PHP 应用服务器</li><li><a href="https://github.com/lixuancn/MeepoPS">MeepoPS</a> - 多进程 SocketService</li><li><a href="https://github.com/kakserpom/phpdaemon">phpDaemon</a> - PHP 异步框架</li><li><a href="https://github.com/Comos/qpm">QPM</a> - Quick PHP 进程管理框架</li><li><a href="https://github.com/youzan/zan">Zan PHP Framework</a> - 有赞团队开源的基于 PHP 协程的网络服务框架 </li><li><a href="http://www.swoole.com/">Swoole</a> - PHP 语言的高性能网络通信框架</li><li><a href="https://github.com/phalcon/cphalcon">Phalcon</a> - 扩展型框架</li><li><a href="https://github.com/reactphp/react">React</a> - 异步框架(PHP 版 node.js)</li><li><a href="https://github.com/phalcon/zephir">Zephir</a> - 可以用近似 PHP 的一种中间代码写程序，然后自动转为 C++，并作为扩展来运行</li><li><a href="https://github.com/laruence/php-yaf">Yaf</a> - 鸟哥写的扩展型框架</li><li><a href="https://github.com/frqnck/apix">APIx</a></li><li><a href="https://github.com/goaop/framework">Go!</a> - PHP AOP 框架</li><li><a href="https://github.com/bcosca/fatfree">Fat-Free Framework</a></li><li><a href="https://github.com/cakephp/cakephp">CakePHP</a> - 老牌框架</li><li><a href="https://github.com/lizhichao/one">One</a> - 基于 swoole 常驻内存框架</li></ul><h2 id="类库"><a href="#类库" class="headerlink" title="类库"></a>类库</h2><h3 id="未归类-1"><a href="#未归类-1" class="headerlink" title="未归类"></a>未归类</h3><ul><li><a href="https://github.com/Seldaek/monolog">Monolog</a></li><li><a href="http://hoa-project.net/"><strong>Hoa</strong></a> - An extensible set of PHP libraries</li><li><a href="https://github.com/ilya-dev/belt">Belt</a> - 工具函数库</li><li><a href="https://github.com/pawelantczak/php-sitemap-generator">PHP Sitemap Generator</a> - 网站地图生成类</li><li><a href="http://www.lalit.org/lab/convert-php-array-to-xml-with-attributes">Array2XML</a></li><li><a href="http://www.lalit.org/lab/convert-xml-to-array-in-php-xml2array/">XML2Array</a></li><li><a href="http://www.pchart.net/">pChart</a> - 图表生成库</li><li><a href="http://phpqrcode.sourceforge.net/">PHP QR Code</a> - 二维码生成</li><li><a href="http://easybook-project.org/">Easybook</a></li><li><a href="http://hashids.org/php/">hashids</a> - 根据整数生成唯一、不连续的短 ID</li><li><a href="https://github.com/sschiau/Particle">Particle</a> - 唯一 ID 生成器</li><li><a href="https://github.com/overtrue/pinyin">Pinyin</a> - 中文转拼音工具</li><li><a href="https://github.com/ratchetphp/Ratchet/">Ratchet</a> - 创建实时、双向客户端服务器 WebSockets 应用</li><li><a href="https://github.com/netresearch/jsonmapper">JsonMapper</a> - 将内嵌 JSON 结构映射为 PHP 类的库</li><li><a href="https://github.com/silexphp/Pimple">Pimple</a> - 依赖注入容器</li><li><a href="https://github.com/PHP-DI/PHP-DI">PHP-DI</a> - 依赖注入容器</li><li><a href="https://github.com/serbanghita/Mobile-Detect">Mobile Detect</a> - 浏览器环境检测类</li><li><a href="https://github.com/matomo-org/device-detector">DeviceDetector</a> - 浏览器环境检测类</li><li><a href="https://github.com/poliander/cron">PHP Cron Expression Parser</a> - Crontab 格式解析</li><li><a href="https://github.com/box-project/box2">Box</a> - Phar 构建工具</li><li><a href="http://www.phpmyfaq.de/">phpMyFAQ</a> - F.A.Q. 应用</li><li><a href="https://github.com/doubleleft/hook">hook</a> - BaaS 软件</li><li><a href="https://github.com/kalcaddle/KODExplorer">KodExplorer</a> - 基于Web的在线文件管理、代码编辑器</li><li><a href="https://github.com/mattpass/ICEcoder">ICEcoder</a> - Web IDE(基于 Web 的代码编辑器)</li><li><a href="https://github.com/nikic/PHP-Parser">PHP-Parser</a> - PHP 解析器</li><li><a href="https://github.com/Corveda/PHPSandbox">PHPSandbox</a> - 将运行 PHP 作为独立进程的一种方式</li><li><a href="https://github.com/sebastianbergmann/phpcpd">PHPCPD</a> - 在代码中寻找类似模式的工具</li><li><a href="https://github.com/devster/ubench">Ubench</a> - 代码执行效率评测工具</li><li><a href="https://github.com/pear/Text_Diff">Text_Diff</a> - 代码文件比较工具</li><li><a href="https://scrutinizer-ci.com/docs/tools/php/php-analyzer/">PHP Analyzer</a> - 执行和编译器相同的流动分析</li><li><a href="https://github.com/mow/apache2nginx">apache2nginx</a> - 在线转换 apache 配置为 nginx 配置</li><li><a href="https://github.com/ekino/php-mirroring">php-mirroring</a> - Packagist and Github mirroring</li><li><a href="https://github.com/luofei614/SocketLog"><strong>SocketLog</strong></a> - 微信调试、API 调试和 AJAX 的调试的工具，能将日志通过 WebSocket 输出到 Chrome 浏览器的 console 中</li><li><a href="https://github.com/immobiliare/ApnsPHP">ApnsPHP</a> - iOS 推送通知</li><li><a href="https://github.com/clue/php-socket-raw">php-socket-raw</a></li><li><a href="https://github.com/fzaninotto/Faker">Faker</a> - 假数据生成器</li><li><a href="https://github.com/Respect/Validation">Validation</a> - 校验工具</li><li><a href="https://github.com/geocoder-php/Geocoder">Geocoder</a></li><li><a href="https://github.com/bjankord/Style-Guide-Boilerplate">Style-Guide-Boilerplate</a> - 手册制作工具</li><li><a href="https://github.com/coduo/php-humanizer"><strong>PHP Humanizer</strong></a> - 数据格式化（多语言）</li><li><a href="https://github.com/google/recaptcha">reCAPTCHA</a></li><li><a href="https://github.com/wapmorgan/UnifiedArchive">UnifiedArchive</a> - 压缩/解压</li><li><a href="https://github.com/sebastianbergmann/diff">Diff</a> - Diff的PHP实现</li><li><a href="https://github.com/php-ai/php-ml"><strong>PHP-ML</strong></a> - PHP 机器学习库</li><li><a href="https://github.com/thephpleague/geotools">Geotools</a> - GEO地理信息工具</li><li><a href="https://github.com/phpbrew/phpbrew"><strong>PHPBrew</strong></a> - PHP版本&amp;扩展管理工具</li><li><a href="https://github.com/kmvan/x-prober">X-Prober</a> - PHP探针</li><li><a href="https://github.com/mledoze/countries">Countries</a> - World countries in JSON, CSV, XML and YAML.</li><li><a href="https://github.com/vlucas/phpdotenv">PHP dotenv</a> - PHP <code>.env</code> 环境配置管理</li><li><a href="https://github.com/ramsey/uuid">ramsey/uuid</a> - uuid 生成器</li><li><a href="https://github.com/jrgp/linfo">Linfo</a> - Server stats UI/library</li><li><a href="https://github.com/php-casbin/php-casbin">PHP-Casbin</a> - 访问控制框架，支持 ACL、RBAC、ABAC 多种模型</li><li><a href="https://github.com/helei112g/payment">Payment</a> - 一个集成了支付宝支付、微信支付、招商支付的 PHP SDK</li><li><a href="https://github.com/emojione/emojione">EmojiOne</a> - Emoji 表情</li><li><a href="https://github.com/ennnnny/tbk">tbk</a> - 阿里淘宝客SDK</li><li><a href="https://github.com/medz/cors">CORS</a> - PHP CORS (Cross-origin resource sharing) middleware</li><li><a href="https://github.com/schmittjoh/php-option">php-option</a> - PHP Option Type</li><li><a href="https://github.com/paragonie/random_compat">random_compat</a> - PHP 5.x 版本的 <code>random_bytes()</code> 和 <code>random_int()</code></li><li><a href="https://github.com/sebastianbergmann/comparator">Comparator</a> - 对比两个 PHP 变量值是否相等</li><li><a href="https://github.com/sebastianbergmann/object-reflector">Object Reflector</a> - 对象反射</li><li><a href="https://github.com/Stichoza/google-translate-php">Google Translate PHP</a> - 谷歌翻译 API</li></ul><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><ul><li><a href="https://github.com/NoahBuscher/Macaw">Macaw</a> - PHP 路由类</li><li><a href="https://github.com/nikic/FastRoute">FastRoute</a> - PHP 路由类</li><li><a href="https://github.com/anandkunal/ToroPHP">ToroPHP</a> - 微型路由框架</li><li><a href="https://github.com/klein/klein.php">Klein.php</a> - 快速路由</li></ul><h3 id="异步-协程"><a href="#异步-协程" class="headerlink" title="异步/协程"></a>异步/协程</h3><ul><li><a href="https://github.com/amphp/amp">Amp</a> - 非阻塞协程并发框架</li><li><a href="https://github.com/recoilphp/recoil">Recoil</a> - 异步协程框架</li><li><a href="https://github.com/reactphp/promise">Promise</a> - Promises/A implementation for PHP</li><li><a href="https://github.com/guzzle/promises">Guzzle Promises</a> - Promises/A+ library for PHP with synchronous support</li></ul><h3 id="前端相关"><a href="#前端相关" class="headerlink" title="前端相关"></a>前端相关</h3><ul><li><a href="https://github.com/sabberworm/PHP-CSS-Parser">PHP-CSS-Parser</a> - PHP 实现的 CSS 解析器</li><li><a href="https://github.com/mrclay/minify">Minify</a> - JS 和 CSS 压缩工具</li><li><a href="http://mun.ee/">Munee</a> - 一个集图片尺寸调整、CSS-JS 合并/压缩、缓存等功能于一身的PHP库</li></ul><h3 id="聊天-短信"><a href="#聊天-短信" class="headerlink" title="聊天/短信"></a>聊天/短信</h3><ul><li><a href="https://github.com/overtrue/easy-sms">Easy SMS</a> - 短信发送组件</li><li><a href="https://github.com/toplan/phpsms">PhpSms</a> - 短信发送库</li><li><a href="https://github.com/botman/botman">BotMan</a> - 一个框架 PHP 库构建聊天机器人</li></ul><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><ul><li><a href="https://github.com/Rakume/pangu.php">pangu.php</a> - 自动添加文本的空格</li><li><a href="https://github.com/yosymfony/toml">TOML parser for PHP</a></li><li><a href="https://github.com/symfony/yaml">Yaml</a></li><li><a href="https://github.com/lizhichao/VicWord">VicWord</a> - 分词</li><li><a href="https://github.com/VerbalExpressions/PHPVerbalExpressions">PHPVerbalExpressions</a> - 更优雅的书写正则方式，就像 SQL Builder 一样</li></ul><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul><li><a href="https://github.com/mirahman/PHP-Data-Structure-and-Algorithms">PHP-Data-Structure-and-Algorithms</a> - PHP 数据结构和算法</li></ul><h3 id="代码检查-静态分析"><a href="#代码检查-静态分析" class="headerlink" title="代码检查/静态分析"></a>代码检查/静态分析</h3><ul><li><a href="https://github.com/phpstan/phpstan">PHPStan</a> - 静态分析工具，检测代码 Bug</li><li><a href="https://github.com/squizlabs/php_codesniffer">PHP_CodeSniffer</a> - PHP/JavaScript/CSS 代码规范检查工具</li><li><a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">PHP-CS-Fixer</a> - PHP 代码规范检测</li><li><a href="https://github.com/phpmd/phpmd">PHPMD</a> - PHP Mess Detector(PHP 问题探测器)</li><li><a href="https://github.com/PHPCheckstyle/phpcheckstyle">PHPCheckstyle</a> - 编码风格检测软件</li><li><a href="https://github.com/phpro/grumphp">GrumPHP</a> - 代码质量检测工具</li><li><a href="https://github.com/sebastianbergmann/php-code-coverage">CodeCoverage</a> - 代码覆盖率报表工具</li><li><a href="https://github.com/phpmetrics/PhpMetrics">PhpMetrics</a> - 可视化静态分析结果</li><li><a href="https://github.com/sebastianbergmann/phploc">PHPLOC</a> - 快速统计分析 PHP 项目结构</li></ul><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><ul><li><a href="https://github.com/thephpleague/climate"><strong>CLImate</strong></a> - 更好的命令行输出</li><li><a href="https://github.com/facebookarchive/phpsh">phpsh</a></li><li><a href="https://github.com/bobthecow/psysh">psysh</a></li><li><a href="https://github.com/borisrepl/boris">Boris</a></li><li><a href="https://github.com/c9s/CLIFramework">CLIFramework</a> - CLI 框架</li><li><a href="https://github.com/inhere/php-console">console tool</a> - PHP 命令行应用库</li><li><a href="https://github.com/clue/php-commander">clue/commander</a></li><li><a href="https://github.com/symfony/console">symfony/console</a></li></ul><h3 id="错误-异常"><a href="#错误-异常" class="headerlink" title="错误/异常"></a>错误/异常</h3><ul><li><a href="https://github.com/filp/whoops">Whoops</a> - 异常/错误处理类</li><li><a href="https://github.com/thephpleague/booboo">BooBoo</a> - 异常/错误处理类</li><li><a href="https://github.com/JosephLenton/PHP-Error">PHP-Error</a></li></ul><h3 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h3><ul><li><a href="https://github.com/maximebf/php-debugbar">PHP Debug Bar</a></li><li><a href="https://github.com/PeeHaa/OpCacheGUI">OpCacheGUI</a> - 漂亮且支持权限验证的 OPcache 界面管理工具</li><li><a href="https://github.com/rlerdorf/opcache-status">OPcache Status</a> - 单文件的 OPcache 状态配置管理</li><li><a href="https://www.php.net/manual/zh/book.phpdbg.php">phpdbg</a> - 内置的调试工具</li></ul><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ul><li><a href="https://github.com/caoym/phprs-restful">phprs</a> - 一款轻量、类 jax-rs、实用的 PHP 框架</li><li><a href="https://github.com/webonyx/graphql-php">graphql-php</a> - GraphQL 参考实现的 PHP 移植版本</li><li><a href="https://github.com/dingo/api">Dingo API</a> - A RESTful API package for the Laravel and Lumen frameworks</li></ul><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><ul><li><a href="https://github.com/acmephp/acmephp"><strong>Acme PHP</strong></a> - <code>Let&#39;s Encrypt</code> SSL 免费证书获取&amp;更新工具</li><li><a href="https://security.sensiolabs.org/">Security Advisories Checker</a> - 项目安全检测工具</li><li><a href="https://github.com/nbs-system/php-malware-finder">PHP Malware Finder</a> - 检测  webshell 和恶意软件混淆代码的工具</li><li><a href="https://github.com/danielmiessler/SecLists">SecLists</a> - 安全测试者的手</li><li><a href="https://github.com/psecio/iniscan">Iniscan</a> - <code>php.ini</code> 安全配置检测</li></ul><h3 id="加密-解密"><a href="#加密-解密" class="headerlink" title="加密/解密"></a>加密/解密</h3><ul><li><a href="https://github.com/defuse/php-encryption">php-encryption</a></li><li><a href="https://github.com/ircmaxell/password_compat">password_compat</a> - PHP版本 5.3.7 以上的 <code>password_*</code> 函数实现</li><li><a href="https://github.com/acmephp/ssl">Acme PHP SSL library</a> - SSL 工具</li></ul><h3 id="时间-日期"><a href="#时间-日期" class="headerlink" title="时间/日期"></a>时间/日期</h3><ul><li><a href="https://github.com/overtrue/chinese-calendar">Chinese calendar</a> - 中国农历（阴历）与阳历（公历）转换与查询工具</li><li><a href="https://github.com/briannesbitt/Carbon">Carbon</a> - 时间日期处理类</li></ul><h3 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h3><ul><li><a href="https://github.com/overtrue/wechat">EasyWeChat</a> - 微信 SDK</li><li><a href="https://github.com/dodgepudding/wechat-php-sdk">Wechat-PHP-SDK</a></li><li><a href="https://github.com/lixuancn/LaneWeChat">LaneWeChat</a></li><li><a href="https://github.com/HanSon/vbot">Vbot</a> - Web 微信机器人</li></ul><h3 id="网页抓取-代理"><a href="#网页抓取-代理" class="headerlink" title="网页抓取/代理"></a>网页抓取/代理</h3><ul><li><a href="https://github.com/JayBizzle/Crawler-Detect">CrawlerDetect</a> - 网页爬虫检查</li><li><a href="https://github.com/mvdbos/php-spider">PHP-Spider</a></li><li><a href="https://github.com/jae-jae/QueryList">QueryList</a></li><li><a href="https://github.com/fabpot/Goutte">Goutte</a> - 一个抓取网站数据的 PHP 库</li><li><a href="https://github.com/mmerian/phpcrawl">PHPcrawer</a></li><li><a href="https://github.com/blackfireio/player">Blackfire Player</a> - Blackfire Player is a powerful Web Crawling, Web Testing, and Web Scraper application</li></ul><h3 id="URL-Domain"><a href="#URL-Domain" class="headerlink" title="URL/Domain"></a>URL/Domain</h3><ul><li><a href="https://github.com/Cydrobolt/polr">Polr</a> - 开源短链工具</li><li><a href="https://github.com/mikecao/shorty">Shorty</a> - 开源短链工具</li><li><a href="https://github.com/jeremykendall/php-domain-parser">PHP Domain Parser</a> - 域名解析</li><li><a href="https://github.com/layershifter/TLDExtract">TLDExtract</a> - 顶级域名解析</li><li><a href="https://github.com/Whoisdoma/WhoisParser">WhoisParser</a> - Lookup domain names, IP addresses and AS numbers by WHOIS</li><li><a href="https://github.com/Whoisdoma/DomainParser">DomainParser</a> - A domain name parser to parse and to validate a domain name</li><li><a href="https://github.com/adriengibrat/torrent-rw">Torrent RW</a> - Torrent 文件读写</li></ul><h3 id="OAuth"><a href="#OAuth" class="headerlink" title="OAuth"></a>OAuth</h3><ul><li><a href="https://github.com/bshaffer/oauth2-server-php">oauth2-server-php</a></li><li><a href="http://code.google.com/p/oauth2-php/">OAuth2-PHP</a></li><li><a href="https://github.com/opauth/opauth">Opauth</a></li><li><a href="https://github.com/thephpleague/oauth2-server">OAuth 2.0 Server</a></li><li><a href="https://github.com/thephpleague/oauth2-client">OAuth 2.0 Client</a></li><li><a href="https://github.com/overtrue/socialite">Socialite</a></li><li><a href="https://github.com/hwi/HWIOAuthBundle">HWIOAuthBundle</a> - OAuth client integration for Symfony</li></ul><h3 id="Auth"><a href="#Auth" class="headerlink" title="Auth"></a>Auth</h3><ul><li><a href="https://github.com/tymondesigns/jwt-auth">jwt-auth</a> - JSON Web Token Authentication for Laravel &amp; Lumen</li></ul><h3 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a>API文档</h3><ul><li><a href="https://github.com/php-annotations/php-annotations">php-annotations</a> - 代码注解解析</li><li><a href="https://github.com/ApiGen/ApiGen">ApiGen</a> - 项目文档生成器</li><li><a href="https://github.com/FriendsOfPHP/Sami">Sami</a> - 项目文档生成工具</li><li><a href="https://github.com/nelmio/NelmioApiDocBundle">NelmioApiDocBundle</a> - REST API 文档生成</li><li><a href="https://github.com/Luracast/Restler"><strong>Restler</strong></a> - REST API 文档生成</li><li><a href="http://zircote.com/swagger-php">Swagger-PHP</a></li><li><a href="https://github.com/star7th/showdoc">ShowDoc</a></li><li><a href="https://github.com/phalapi/phalapi">PhalApi</a> - PHP 接口开发框架</li><li><a href="https://github.com/gouguoyin/phprap">PHPRAP</a> - API 接口文档管理系统</li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li><a href="https://github.com/doctrine">Doctine</a> - PHP 数据库 ORM（该组织还有其他优秀的开源项目）</li><li><a href="https://github.com/gabordemooij/redbean">RedBeanPHP</a> - ORM 映射框架</li><li><a href="https://github.com/robmorgan/phinx">Phinx</a> - 数据库迁移工具（支持 MySQL、PostgreSQL、SQLite、Microsoft SQL Server）</li><li><a href="https://github.com/vrana/adminer">Adminer</a> - 单文件 MySQL 管理客户端</li><li><a href="https://github.com/phpmyadmin/phpmyadmin">phpMyAdmin</a></li><li><a href="https://github.com/phpmyadmin/sql-parser">SQL Parser</a> - SQL 解析器</li><li><a href="https://github.com/catfan/Medoo">Medoo</a> - 最轻量级的 PHP 数据库框架</li><li><a href="https://github.com/dbtk/schema-loader">schema-loader</a> - Load database schema from an XML file</li><li><a href="https://github.com/ifsnop/mysqldump-php">MySQLDump-PHP</a> - 纯 PHP 实现的mysqldump工具</li><li><a href="https://github.com/shadowhand/latitude">Latitude</a> - SQL 语句构建工具</li><li><a href="https://github.com/mongodb/mongo-php-library">MongoDB PHP Library</a></li></ul><h3 id="队列-任务"><a href="#队列-任务" class="headerlink" title="队列/任务"></a>队列/任务</h3><ul><li><a href="https://github.com/Codegyre/Robo">RoboTask</a> - 面向对象的 PHP 任务运行器</li><li><a href="https://github.com/CoderKungfu/php-queue">PHP-Queue</a> - 管理队列后端的应用</li><li><a href="https://github.com/consolidation/Robo">RoboTask</a> - PHP 后台任务组件</li><li><a href="https://github.com/taskphp/task">Task</a> - 一个灵感来源于 Grunt 和 Gulp 的纯 PHP 任务运行器</li><li><a href="https://github.com/chrisboulton/php-resque">php-resque</a> - PHP 版Resque</li><li><a href="https://github.com/qq8044023/taskPHP">taskPHP</a> - 基于原生态 PHP 开发的定时计划任务框架</li><li><a href="https://github.com/SegmentFault/SimpleFork">SimpleFork</a> - 精简的 PHP 多进程控制库</li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul><li><a href="https://github.com/doctrine/cache">Doctrine Cache</a></li><li><a href="https://github.com/PHPSocialNetwork/phpfastcache">phpFastCache</a> - 缓存操作类</li><li><a href="https://github.com/tedious/Stash">Stash</a></li><li><a href="https://github.com/nrk/predis">Predis</a> - 纯 PHP 实现的 Redis 操作库</li><li><a href="https://github.com/thephpleague/monga">Monga</a> - 纯 PHP 实现的 MongoDB 操作库</li><li><a href="https://github.com/rogeriopvl/php-lrucache">php-lrucache</a> - LRU 算法缓存实现</li><li><a href="https://github.com/phpredis/phpredis">PhpRedis</a> - Redis 客户端扩展</li></ul><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ul><li><a href="https://github.com/michelf/php-markdown">PHP Markdown</a></li><li><a href="https://github.com/SegmentFault/HyperDown">HyperDown</a></li><li><a href="https://github.com/erusev/parsedown">Parsedown</a> - Markdown 解析类</li><li><a href="https://github.com/thephpleague/commonmark">CommonMark</a></li><li><a href="https://github.com/thephpleague/html-to-markdown">HTML To Markdown for PHP</a></li></ul><h3 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h3><ul><li><a href="http://swiftmailer.org/">Swift Mailer</a> - PHP 邮件库</li><li><a href="https://github.com/PHPMailer/PHPMailer">PHPMailer</a></li></ul><h3 id="Office"><a href="#Office" class="headerlink" title="Office"></a>Office</h3><ul><li><a href="https://github.com/PHPOffice/PHPWord">PHPWord</a></li><li><a href="https://github.com/PHPOffice/PhpSpreadsheet">PHPExcel</a></li><li><a href="https://github.com/PHPOffice/PHPPresentation">PHPPowerPoint</a></li><li><a href="https://github.com/thephpleague/csv">CSV</a> - CSV 操作类</li><li><a href="https://github.com/faisalman/simple-excel-php">Simple Excel</a></li><li><a href="https://github.com/PHPOffice/PHPProject">PHPProject</a></li><li><a href="https://github.com/PHPOffice/PHPVisio">PHPVisio</a></li></ul><h3 id="PDF-条形码"><a href="#PDF-条形码" class="headerlink" title="PDF/条形码"></a>PDF/条形码</h3><ul><li><a href="http://www.barcodephp.com/">Barcode</a> - Barcode 生成工具</li><li><a href="https://github.com/KnpLabs/snappy"><strong>Snappy</strong></a> - 根据 URL 或 HTML 页面生成图片或 PDF 格式的缩略图</li><li><a href="https://github.com/tecnickcom/TCPDF">TCPDF</a> - 使用官方 PDF 类生成 PDF 文档和条形码生成工具</li><li><a href="https://github.com/lsolesen/fpdf">FPDF</a> - 利用纯 PHP 代码生成 PDF 文件</li><li><a href="https://github.com/smalot/pdfparser">PDFParser</a> - PDF 文档解析库</li><li><a href="https://github.com/dompdf/dompdf">Dompdf</a></li><li><a href="https://github.com/spatie/browsershot">Browsershot</a> - 将 HTML 转换为图像、PDF 或字符串</li></ul><h3 id="HTTP-网络通信"><a href="#HTTP-网络通信" class="headerlink" title="HTTP/网络通信"></a>HTTP/网络通信</h3><ul><li><a href="https://github.com/guzzle/guzzle">Guzzle</a> - PHP HTTP client and webservice framework</li><li><a href="https://github.com/rmccue/Requests">Requests for PHP</a> - HTTP 库</li><li><a href="https://github.com/Mashape/unirest-php">Unirest</a> - HTTP 开发库</li><li><a href="https://github.com/php-curl-class/php-curl-class">PHP Curl Class</a> - 支持并发的 PHP Curl 封装类</li><li><a href="https://github.com/guzzle/RingPHP">RingPHP</a></li><li><a href="https://github.com/ares333/php-curlmulti">php-curlmulti</a> - 国产 CURL 并发类</li></ul><ul><li><a href="https://github.com/phpseclib/phpseclib">phpseclib</a> - 安全通信库</li><li><a href="https://github.com/symfony/http-foundation">symfony/http-foundation</a></li><li><a href="https://github.com/phpWhois/phpWhois">phpWhois</a> - Whois 信息查询</li></ul><h3 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h3><ul><li><a href="http://www.phpspec.net/">PHPSpec</a> - SpecBDD 测试框架</li><li><a href="http://behat.org/">Behat</a> - StoryBDD 测试框架</li><li><a href="http://codeception.com/">Codeception</a> - BDD 全栈测试框架</li><li><a href="https://github.com/sebastianbergmann/phpunit">PHPUnit</a> - 单元测试框架</li><li><a href="https://github.com/atoum/atoum">atoum</a> - 单元测试框架</li><li><a href="https://github.com/Enhance-PHP/Enhance-PHP">Enhance-PHP</a> - 单元测试框架</li><li><a href="https://github.com/mockery/mockery">Mockery</a></li></ul><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><ul><li><a href="http://twig.sensiolabs.org/">Twig</a></li><li><a href="http://www.smarty.net/">Smarty</a></li><li><a href="http://platesphp.com/">Plates</a></li><li><a href="https://github.com/bobthecow/mustache.php">Mustache</a></li><li><a href="http://phptal.org/">PHPTAL</a></li><li><a href="http://dwoo.org/">Dwoo</a></li><li><a href="https://github.com/nette/latte">Latte</a></li><li><a href="https://github.com/box/brainy">Brainy</a></li><li><a href="https://github.com/auraphp/Aura.View">Aura.View</a></li></ul><h3 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h3><ul><li><a href="https://github.com/avalanche123/Imagine">Imagine</a> - 图片操作类</li><li><a href="https://github.com/nielse63/php-image-cache">Image Cache</a> - 图片压缩、缓存类</li><li><a href="https://github.com/Sybio/ImageWorkshop">ImageWorkshop</a> - 管理和操作图片的 PHP 类库</li><li><a href="https://github.com/Intervention/image">Intervention Image</a> - 功能强大的图片操作类</li><li><a href="http://mun.ee/">Munee</a> - 图片尺寸调整、CSS-JS 合并/压缩、缓存等功能</li><li><a href="http://bastianallgeier.com/gantti">Gantti</a> - 甘特图生成</li><li><a href="http://wideimage.sourceforge.net/">Wideimage</a> - 图像处理库</li><li><a href="https://github.com/lincanbin/Material-Design-Avatars">Material Design Avatars</a> - PHP 头像生成类</li><li><a href="http://www.shearphoto.com/">ShearPhoto</a> - 截图工具</li><li><a href="https://github.com/thephpleague/glide">Glide</a> - 基于 HTTP 的图像操作</li><li><a href="https://github.com/thephpleague/color-extractor">ColorExtractor</a> - 获取图片中的颜色</li><li><a href="https://github.com/Gregwar/Captcha">Captcha</a> - 验证码</li><li><a href="https://github.com/electerious/Lychee">Lychee</a> - 图片管理系统</li></ul><h2 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h2><blockquote><p>最好用的 PHP 包管理器，没有之一</p></blockquote><ul><li>GitHub: <a href="https://github.com/composer/composer">https://github.com/composer/composer</a></li><li>官方站: <a href="https://getcomposer.org/">https://getcomposer.org</a></li><li>中文站: <a href="http://www.phpcomposer.com/">http://www.phpcomposer.com</a></li><li>包仓库: <a href="https://packagist.org/">https://packagist.org</a></li><li><a href="https://github.com/composer/installers">Composer Installers</a>: 多框架 Composer 库安装器</li><li>中国全量镜像: <a href="https://pkg.phpcomposer.com/">https://pkg.phpcomposer.com</a></li><li><a href="https://github.com/jakoch/awesome-composer">Awesome Composer</a>: A curated list of resources for Composer, Packagist, Satis, Plugins, Scripts, Videos, Tutorials</li><li><a href="https://github.com/zencodex/composer-mirror">ZComposer</a> - Composer 镜像，有助于了解 Composer 镜像的原理</li></ul><h2 id="PHP-扩展"><a href="#PHP-扩展" class="headerlink" title="PHP 扩展"></a>PHP 扩展</h2><ul><li><a href="https://github.com/FriendsOfPHP/pickle"><strong>pickle</strong></a> - PHP 扩展安装工具</li><li><a href="https://github.com/Qihoo360/phptrace">PHPTrace</a> - 跟踪和分析 PHP 脚本的工具</li><li><a href="https://github.com/phalcon/zephir">Zephir</a> - 编写 PHP 扩展的编程语言</li><li><a href="https://github.com/laruence/yaconf">Yaconf</a> - 高性能的配置管理扩展</li><li><a href="https://github.com/liexusong/php-beast">php-beast</a> - PHP 源码加密模块</li></ul><h2 id="PHP相关软件-工具"><a href="#PHP相关软件-工具" class="headerlink" title="PHP相关软件/工具"></a>PHP相关软件/工具</h2><ul><li><a href="https://github.com/laradock/laradock"><strong>Laradock</strong></a> - PHP Docker 开发环境工具</li><li><a href="https://lnmp.org/">LNMP一键安装包(1)</a></li><li><a href="https://github.com/lj2007331/lnmp">LNMP一键安装包(2)</a></li><li><a href="https://oneinstack.com/"><strong>OneinStack</strong></a> - 一键 PHP/JAVA 环境安装工具</li><li><a href="https://php-osx.liip.ch/">MacOS PHP安装工具</a></li><li><a href="https://github.com/wxphp/wxphp">wxPHP</a> - 用 PHP 开发桌面应用</li><li><a href="http://www.upupw.net/">UPUPW</a> - PHP 环境集成包</li><li><a href="http://www.phpbench.com/">PHP Benchmark</a> - PHP 性能测试工具</li><li><a href="http://www.firephp.org/">FirePHP</a> - PHP Debug 工具</li><li><a href="https://github.com/apache/thrift/tree/master/lib/php">Thrift for PHP</a></li><li><a href="https://github.com/rybakit/msgpack.php">msgpack.php</a></li><li><a href="https://github.com/hprose/hprose-php">Hprose for PHP</a> - 高性能的跨语言序列化与 RPC 引擎</li><li><a href="http://sourceforge.net/projects/hessianphp">HessianPHP</a> - 采用二进制格式传输的服务框架</li><li><a href="https://github.com/Neeke/JsonNet">JsonNet-PHP</a> - Google Jsonnet 对 PHP 的支持扩展</li><li><a href="https://github.com/benmatselby/sublime-phpcs">sublime-phpcs</a> - Sublime Text 的 PHP 代码格式检查插件</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP消息队列实现及应用</title>
    <link href="/2021/03/24/PHP/PHP%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <url>/2021/03/24/PHP/PHP%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>直接放置传送门：<a href="https://www.cnblogs.com/dump/p/8243868.html">https://www.cnblogs.com/dump/p/8243868.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP的自动加载机制</title>
    <link href="/2021/03/24/PHP/PHP%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/03/24/PHP/PHP%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>我们在写PHP代码的时候，总会遇到这种情况（A.php需要引入XXX.php才能正常运行），代码结构比较小的话，通常我们都是直接通过 include 或者 require 直接引入，如果需要引入的文件不多的话，还可以接受，但是如果引入的文件达到几十个以上，再用 include 和 require 就显得比较繁琐，影响代码的美观。因此我们需要引入PHP文件的自动加载机制。</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>使用 __autoload() 函数</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">// __autoload — Attempt to load undefined class</span><br><span class="hljs-comment">// void __autoload ( string $class )</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__autoload</span>(<span class="hljs-params"><span class="hljs-variable">$class</span></span>)</span>&#123;<br><span class="hljs-keyword">require_once</span>( <span class="hljs-variable">$class</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP简单图形图像处理</title>
    <link href="/2021/03/24/PHP/PHP%E7%AE%80%E5%8D%95%E5%9B%BE%E5%BD%A2%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    <url>/2021/03/24/PHP/PHP%E7%AE%80%E5%8D%95%E5%9B%BE%E5%BD%A2%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>#PHP简单图形图像处理</p><h2 id="引语"><a href="#引语" class="headerlink" title="引语"></a>引语</h2><p>php不仅仅局限于html的输出，还可以创建和操作各种各样的图像文件，如GIF、PNG、JPEG、WBMP、XBM等。</p><p>php还可以将图像流直接显示在浏览器中。</p><p>要处理图像，就要用到php的GD库。</p><p>ps：确保php.ini文件中可以加载GD库。可以在php.ini文件中找到“;extension=php_gd2.dll”，将选项前的分号删除，保存，再重启Apache服务器即可。</p><hr><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>在php中创建一个图像一般需要四个步骤：</p><ul><li><p>1.创建一个背景图像，以后的所有操作都是基于此背景。</p></li><li><p>2.在图像上绘图等操作。</p></li><li><p>3.输出最终图像。</p></li><li><p>4.销毁内存中的图像资源。</p></li></ul><hr><h2 id="1-创建背景图像"><a href="#1-创建背景图像" class="headerlink" title="1.创建背景图像"></a>1.创建背景图像</h2><p>下面的函数可以返回一个图像标识符，代表了一个宽为x_size像素、高为y_size像素的背景，默认为黑色。</p><blockquote><p>resource imagecreatetruecolor(int x_size , int y_size)</p></blockquote><p>在图像上绘图需要两个步骤：首先需要选择颜色。通过imagecolorallocate()函数创建颜色对象。</p><blockquote><p>int imagecolorallocate(resource image, int red, int green, int blue) </p></blockquote><p>然后将颜色绘制到图像上。</p><blockquote><p>bool imagefill(resource image, int x, int y, int color) </p></blockquote><p>imagefill()函数会在image图像的坐标（x，y）处用color颜色进行填充。</p><hr><h2 id="2-在图像上绘图"><a href="#2-在图像上绘图" class="headerlink" title="2.在图像上绘图"></a>2.在图像上绘图</h2><blockquote><p>bool iamgeline(resource image, int begin_x, int begin_y, int end_x, int end_y, int color) </p></blockquote><p>imageline()函数用color颜色在图像image中画出一条从（begin_x,begin_y）到（end_x,end_y）的线段。</p><blockquote><p>bool imagestring(resource image, int font, int begin_x, int begin_y, string s, int color ) </p></blockquote><p>imagestring()函数用color颜色将字符串s画到图像image的（begin_x,begin_y）处（这是字符串的左上角坐标）。如果font等于1,2,3,4或5，则使用内置字体，同时数字代表字体的粗细。如果font字体不是内置的，则需要导入字体库后使用。</p><hr><h2 id="3-输出最终图像"><a href="#3-输出最终图像" class="headerlink" title="3.输出最终图像"></a>3.输出最终图像</h2><p>创建图像以后就可以输出图形或者保存到文件中了，如果需要输出到浏览器中需要使用header()函数发送一个图形的报头“欺骗”浏览器，使它认为运行的php页面是一个图像。</p><blockquote><p>header(“Content-type: image/png”); </p></blockquote><p>发送数据报头以后，利用imagepng()函数输出图形。后面的filename可选，代表生成的图像文件的保存名称。</p><blockquote><p>bool image(resource image [, string filename]) </p></blockquote><hr><h2 id="4-销毁相关的内存资源"><a href="#4-销毁相关的内存资源" class="headerlink" title="4.销毁相关的内存资源"></a>4.销毁相关的内存资源</h2><p>最后需要销毁图像占用的内存资源。</p><blockquote><p>bool imagedestroy(resource image) </p></blockquote><p><strong>例子:</strong></p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><br>&lt;?php<br><span class="hljs-variable">$width</span>=<span class="hljs-number">300</span>;                                          <span class="hljs-regexp">//</span>图像宽度<br><span class="hljs-variable">$height</span>=<span class="hljs-number">200</span>;                                         <span class="hljs-regexp">//</span>图像高度<br>   <span class="hljs-variable">$img</span>=imagecreatetruecolor(<span class="hljs-variable">$width</span>,<span class="hljs-variable">$height</span>);           <span class="hljs-regexp">//</span>创建图像<br>   <span class="hljs-variable">$white</span>=imagecolorallocate(<span class="hljs-variable">$img</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>);         <span class="hljs-regexp">//</span>白色<br>   <span class="hljs-variable">$black</span>=imagecolorallocate(<span class="hljs-variable">$img</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);               <span class="hljs-regexp">//</span>黑色<br>   <span class="hljs-variable">$red</span>=imagecolorallocate(<span class="hljs-variable">$img</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);               <span class="hljs-regexp">//</span>红色<br>   <span class="hljs-variable">$green</span>=imagecolorallocate(<span class="hljs-variable">$img</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>);             <span class="hljs-regexp">//</span>绿色<br>   <span class="hljs-variable">$blue</span>=imagecolorallocate(<span class="hljs-variable">$img</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>);              <span class="hljs-regexp">//</span>蓝色<br>   imagefill(<span class="hljs-variable">$img</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$white</span>);                          <span class="hljs-regexp">//</span>将背景设置为白色<br>   imageline(<span class="hljs-variable">$img</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">260</span>,<span class="hljs-number">150</span>,<span class="hljs-variable">$red</span>);                  <span class="hljs-regexp">//</span>画出一条红色的线<br>   imagestring(<span class="hljs-variable">$img</span>,<span class="hljs-number">5</span>,<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;hello,world!!&quot;</span>,<span class="hljs-variable">$blue</span>);     <span class="hljs-regexp">//</span>显示蓝色的文字<br>   header(<span class="hljs-string">&quot;content-type: image/png&quot;</span>);                   <span class="hljs-regexp">//</span>输出图像的MIME类型<br>   imagepng(<span class="hljs-variable">$img</span>);                                      <span class="hljs-regexp">//</span>输出一个PNG图像数据<br>   imagedestroy(<span class="hljs-variable">$img</span>);                                   <span class="hljs-regexp">//</span>清空内存<br> ?&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP设计模式（适配器模式）</title>
    <link href="/2021/03/24/PHP/PHP%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <url>/2021/03/24/PHP/PHP%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="设计动机"><a href="#设计动机" class="headerlink" title="设计动机"></a>设计动机</h4><p>假如我们又这样软件系统，我们希望它能够和一个新的库搭配使用，但是这个库所提供的接口与我们的软件系统不兼容，我们不想改变现有代码就能解决这个问题，怎么办？这个时候我们就需要将这个新的库接口转换成我们所需要的接口，这就是适配器模式设计动机。</p><h4 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h4><ol><li><p>适配器模式就是将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。</p></li><li><p>在适配器模式中，我们可以定义一个包装类，包装不兼容接口的对象，这个包装类就是适配器，它所包装的对象就是适配者。</p></li><li><p>适配器提供给客户需要的接口，适配器的实现就是将客户的请求转换成对适配者的相应的接口的引用。也就是说，当客户调用适配器的方法时，适配器方法内部将调用适配者的方法，客户并不是直接访问适配者的，而是通过调用适配器方法访问适配者。因为适配器可以使互不兼容的类能够“合作愉快”。</p></li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p> <strong>1. 首先我们定义一个数据库操作对外，公用的API接口，里面主要设计了connect()   query()   close()  方法。</strong></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">IMooc</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IDatabase</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$passwd</span>, <span class="hljs-variable">$dbname</span></span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>)</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p> <strong>2. 使用mysql实现</strong></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">IMooc</span>\<span class="hljs-title">Database</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">IMooc</span>\<span class="hljs-title">IDatabase</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySQL</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IDatabase</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$conn</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$passwd</span>, <span class="hljs-variable">$dbname</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$conn</span> = mysql_connect(<span class="hljs-variable">$host</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$passwd</span>);<br>        mysql_select_db(<span class="hljs-variable">$dbname</span>, <span class="hljs-variable">$conn</span>);<br>        <span class="hljs-keyword">$this</span>-&gt;conn = <span class="hljs-variable">$conn</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$res</span> = mysql_query(<span class="hljs-variable">$sql</span>, <span class="hljs-keyword">$this</span>-&gt;conn);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        mysql_close(<span class="hljs-keyword">$this</span>-&gt;conn);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p> <strong>3. 使用mysqli实现</strong></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">IMooc</span>\<span class="hljs-title">Database</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">IMooc</span>\<span class="hljs-title">IDatabase</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySQLi</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IDatabase</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$conn</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$passwd</span>, <span class="hljs-variable">$dbname</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$conn</span> = mysqli_connect(<span class="hljs-variable">$host</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$passwd</span>, <span class="hljs-variable">$dbname</span>);<br>        <span class="hljs-keyword">$this</span>-&gt;conn = <span class="hljs-variable">$conn</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> mysqli_query(<span class="hljs-keyword">$this</span>-&gt;conn, <span class="hljs-variable">$sql</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        mysqli_close(<span class="hljs-keyword">$this</span>-&gt;conn);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p> <strong>4. 使用PDO实现</strong> </p><figure class="highlight php-template"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php-template"><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><span class="php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">IMooc</span>\<span class="hljs-title">Database</span>;</span><br><br><span class="php"><span class="hljs-keyword">use</span> <span class="hljs-title">IMooc</span>\<span class="hljs-title">IDatabase</span>;</span><br><br><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PDO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IDatabase</span></span></span><br><span class="php">&#123;</span><br>    /**<br>     * @var \PDO<br><span class="php">     */</span><br><span class="php">    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$conn</span>;</span><br><span class="php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$passwd</span>, <span class="hljs-variable">$dbname</span></span>)</span></span><br><span class="php">    &#123;</span><br><span class="php">        <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> \PDO(<span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$host</span>;dbname=<span class="hljs-subst">$dbname</span>&quot;</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$passwd</span>);</span><br><span class="php">        <span class="hljs-keyword">$this</span>-&gt;conn = <span class="hljs-variable">$conn</span>;</span><br><span class="php">    &#125;</span><br><br><span class="php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span></span><br><span class="php">    &#123;</span><br><span class="php">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;conn-&gt;query(<span class="hljs-variable">$sql</span>);</span><br><span class="php">    &#125;</span><br><br><span class="php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>)</span></span><br><span class="php">    &#123;</span><br><span class="php">        <span class="hljs-keyword">unset</span>(<span class="hljs-keyword">$this</span>-&gt;conn);</span><br><span class="php">    &#125;</span><br><span class="php">&#125;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>分布式之系统底层原理</title>
    <link href="/2021/03/24/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B9%8B%E7%B3%BB%E7%BB%9F%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <url>/2021/03/24/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B9%8B%E7%B3%BB%E7%BB%9F%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>分布式之系统底层原理：<a href="https://mp.weixin.qq.com/s/KKrxuVCrjlXXWMPTXQ-fvA">https://mp.weixin.qq.com/s/KKrxuVCrjlXXWMPTXQ-fvA</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>分布式系统的流言蜚语</title>
    <link href="/2021/03/24/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%B5%81%E8%A8%80%E8%9C%9A%E8%AF%AD/"/>
    <url>/2021/03/24/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%B5%81%E8%A8%80%E8%9C%9A%E8%AF%AD/</url>
    
    <content type="html"><![CDATA[<p>分布式系统的流言蜚语：<a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665515873&amp;idx=1&amp;sn=bf79a5a52c1ea3d2f7a1bb644866d1d6&amp;chksm=80d67322b7a1fa3429c36a418d3c3804688a9f01bea8a27b8ed46528ce6a40eb923d0ef5c45c&amp;scene=0&amp;xtrack=1&amp;key=bf4cf7f356eb2752dfab3431b61181e235018df6317ce9084d1e48e46a5e3a454b221538f9d88192d04d0a34283d416f08274ccf3bbcff5acf783e271bca10ab84ad7a7e6b5648d6f5ead23ea625dafc&amp;ascene=14&amp;uin=MTkwNjk4NjAxMA==&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=JogDaVDjKXx9W3zQZ2sl6TAUdMDS7rKA0Zb9hMwwVMC4ALxeAySdvq8JADMCeINW">https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665515873&amp;idx=1&amp;sn=bf79a5a52c1ea3d2f7a1bb644866d1d6&amp;chksm=80d67322b7a1fa3429c36a418d3c3804688a9f01bea8a27b8ed46528ce6a40eb923d0ef5c45c&amp;scene=0&amp;xtrack=1&amp;key=bf4cf7f356eb2752dfab3431b61181e235018df6317ce9084d1e48e46a5e3a454b221538f9d88192d04d0a34283d416f08274ccf3bbcff5acf783e271bca10ab84ad7a7e6b5648d6f5ead23ea625dafc&amp;ascene=14&amp;uin=MTkwNjk4NjAxMA%3D%3D&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=JogDaVDjKXx9W3zQZ2sl6TAUdMDS7rKA0Zb9hMwwVMC4ALxeAySdvq8JADMCeINW</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>is()和hasClass()</title>
    <link href="/2021/03/24/%E5%89%8D%E7%AB%AF/is()%E5%92%8ChasClass()/"/>
    <url>/2021/03/24/%E5%89%8D%E7%AB%AF/is()%E5%92%8ChasClass()/</url>
    
    <content type="html"><![CDATA[<h4 id="is-和hasClass"><a href="#is-和hasClass" class="headerlink" title="is()和hasClass()"></a>is()和hasClass()</h4><ul><li><p>jq中的is()有判断元素是否含有某个class的属性，但是hasClass()没有效果。下面是我找的对应的官方的文档，注意仔细阅读文档里面的小demo，并且注意里面的细微区别。</p></li><li><p>is()</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">https://api.jquery.com/is/<br><br>Description: Check the current matched <span class="hljs-built_in">set</span> of elements against a selector, element, or jQuery object and <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span> <span class="hljs-keyword">if</span> at least one of these elements matches the given arguments.<br></code></pre></div></td></tr></table></figure></li><li><p>hasClass()</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">https://api.jquery.com/hasClass/<span class="hljs-comment">#hasClass-className</span><br><br>Description: Determine whether any of the matched elements are assigned the given class.<br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AppImage ubuntu</title>
    <link href="/2021/03/24/%E5%B7%A5%E5%85%B7/AppImage%20ubuntu/"/>
    <url>/2021/03/24/%E5%B7%A5%E5%85%B7/AppImage%20ubuntu/</url>
    
    <content type="html"><![CDATA[<p>在Ubuntu上下载的软件有时候是 AppImage 格式的，怎么以快捷方式的形式启动软件，可以使用下面的这个应用管理这类软件</p><p>AppImageLauncher: <a href="https://github.com/TheAssassin/AppImageLauncher">https://github.com/TheAssassin/AppImageLauncher</a></p><p>下载一个deb的安装包，然后就可以用 AppImageLauncher 管理其他的AppImage应用了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MobaXterm自动断开连接设置</title>
    <link href="/2021/03/24/%E5%B7%A5%E5%85%B7/MobaXterm%E8%87%AA%E5%8A%A8%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E8%AE%BE%E7%BD%AE/"/>
    <url>/2021/03/24/%E5%B7%A5%E5%85%B7/MobaXterm%E8%87%AA%E5%8A%A8%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h4><p>使用MobaXterm工具通过SSH连接Linux服务器，如果一段时间没有操作，MobaXterm会把连接自动断开，这个设定很是不方便。通过更改下面的设置可以使SSH保持长连接，不会自动断开。</p><ul><li>点击设置<br><img src="https://img-blog.csdnimg.cn/20190415215615318.png" alt="在这里插入图片描述"></li><li>把 SSH keepalive 勾选上<br><img src="https://img-blog.csdnimg.cn/20190415215709198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Navicat Premium 12破解方法</title>
    <link href="/2021/03/24/%E5%B7%A5%E5%85%B7/Navicat%20Premium%2012%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/"/>
    <url>/2021/03/24/%E5%B7%A5%E5%85%B7/Navicat%20Premium%2012%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h5 id="Navicat-Premium-12破解方法"><a href="#Navicat-Premium-12破解方法" class="headerlink" title="Navicat Premium 12破解方法"></a>Navicat Premium 12破解方法</h5><div class="hljs code-wrapper"><pre><code>下载地址：http://www.navicat.com.cn/download/navicat-premium破解工具地址：https://github.com/DoubleLabyrinth/navicat-keygen/releases激活原理:https://www.52pojie.cn/thread-688820-1-1.html中文教程:https://www.jianshu.com/p/20eb454a1da4</code></pre></div><p>大家有能力的话，希望还是支持正版。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Phpstorm ubuntu创建图标</title>
    <link href="/2021/03/24/%E5%B7%A5%E5%85%B7/Phpstorm%20ubuntu%E5%88%9B%E5%BB%BA%E5%9B%BE%E6%A0%87/"/>
    <url>/2021/03/24/%E5%B7%A5%E5%85%B7/Phpstorm%20ubuntu%E5%88%9B%E5%BB%BA%E5%9B%BE%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<p>我们通过源码包的方式安装Jetbrain全家桶的软件时，桌面是没有快捷方式启动的，只能通过命令行的方式启动，很不方便。下面贴一下我的配置，通过快捷方式启动软件<br>ubuntu 2004</p><p>进入目录下面的目录，参考里面已有的文件创建一个xxx.desktop文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/usr/share/applications<br></code></pre></div></td></tr></table></figure><h3 id="PhpStorm"><a href="#PhpStorm" class="headerlink" title="PhpStorm"></a>PhpStorm</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[Desktop Entry]<br>Type=Application<br>Name=Phpstorm<br>GenericName=Phpstorm2020<br>Comment=Phpstorm2020:The PHP IDE<br>Exec=<span class="hljs-string">&quot;/home/mohuani/develop/PhpStorm-201.7846.90/bin/phpstorm.sh&quot;</span><br>Icon=/home/mohuani/develop/PhpStorm-201.7846.90/bin/phpstorm.svg<br>Terminal=phpstorm<br>Categories=Phpstorm<br></code></pre></div></td></tr></table></figure><h3 id="DataGrip"><a href="#DataGrip" class="headerlink" title="DataGrip"></a>DataGrip</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[Desktop Entry]<br>Type=Application<br>Name=Datagrip<br>GenericName=DataGrip2020<br>Comment=DataGrip2020:The SQL IDE<br>Exec=<span class="hljs-string">&quot;/home/mohuani/develop/DataGrip-2020.1.5/bin/datagrip.sh&quot;</span><br>Icon=/home/mohuani/develop/DataGrip-2020.1.5/bin/datagrip.svg<br>Terminal=datagrip<br>Categories=Datagrip<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu 20.04 设置不见了</title>
    <link href="/2021/03/24/%E5%B7%A5%E5%85%B7/ubuntu%2020.04%20%E8%AE%BE%E7%BD%AE%E4%B8%8D%E8%A7%81%E4%BA%86/"/>
    <url>/2021/03/24/%E5%B7%A5%E5%85%B7/ubuntu%2020.04%20%E8%AE%BE%E7%BD%AE%E4%B8%8D%E8%A7%81%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p>ubuntu20.04 用着用着突然发现设置不见了，即使重启电脑还是找不到设置，后来通过扒帖子发现是一个包丢失了，<code>gnome-control-center</code>，重新安装一个这个包就好了</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt install gnome-control-center<br></code></pre></div></td></tr></table></figure><p>附上前面扒到的帖子：</p><blockquote><p><a href="https://forum.ubuntu.com.cn/viewtopic.php?t=491114">https://forum.ubuntu.com.cn/viewtopic.php?t=491114</a></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>win10设置ubuntu系统root账户密码</title>
    <link href="/2021/03/24/%E5%B7%A5%E5%85%B7/win10%E8%AE%BE%E7%BD%AEubuntu%E7%B3%BB%E7%BB%9Froot%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81/"/>
    <url>/2021/03/24/%E5%B7%A5%E5%85%B7/win10%E8%AE%BE%E7%BD%AEubuntu%E7%B3%BB%E7%BB%9Froot%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h3 id="一、安装ubuntu"><a href="#一、安装ubuntu" class="headerlink" title="一、安装ubuntu"></a>一、安装ubuntu</h3><p>ubuntu安装docker官方文档： <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a></p><h3 id="二、修改root账户的密码"><a href="#二、修改root账户的密码" class="headerlink" title="二、修改root账户的密码"></a>二、修改root账户的密码</h3><p>在win10商店下载ubuntu，安装docker后，每次使用docker命令都需要输入sudo，不使用sudo会报错</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">Cannot connect to the Docker daemon at tcp://localhost:<span class="hljs-number">2375</span>. Is the docker daemon running?<br></code></pre></div></td></tr></table></figure><p>网上也有其他的解决方法，我试了都不行，干脆进到ubuntu后，直接切换成root用户，这样就不用每次输入sudo，下面操作如下</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">sudo passwd root<br>[<span class="hljs-type">sudo</span>] password <span class="hljs-keyword">for</span> mohuani:<br>Enter new UNIX password:<br>Retype new UNIX password:<br>passwd: password updated successfully<br><br>su root<br>Password:<br></code></pre></div></td></tr></table></figure><p>可以愉快的玩耍了…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>从零开始搭建创业公司后台技术栈</title>
    <link href="/2021/03/24/%E5%B7%A5%E5%85%B7/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%88%9B%E4%B8%9A%E5%85%AC%E5%8F%B8%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    <url>/2021/03/24/%E5%B7%A5%E5%85%B7/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%88%9B%E4%B8%9A%E5%85%AC%E5%8F%B8%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<p>从零开始搭建创业公司后台技术栈：<a href="https://mp.weixin.qq.com/s/rMQxxSVebFJMkSuzht5HDQ?client=tim&amp;ADUIN=1348954449&amp;ADSESSION=1561252296&amp;ADTAG=CLIENT.QQ.5603_.0&amp;ADPUBNO=26882">https://mp.weixin.qq.com/s/rMQxxSVebFJMkSuzht5HDQ?client=tim&amp;ADUIN=1348954449&amp;ADSESSION=1561252296&amp;ADTAG=CLIENT.QQ.5603_.0&amp;ADPUBNO=26882</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Restful API</title>
    <link href="/2021/03/24/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Restful%20API/"/>
    <url>/2021/03/24/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Restful%20API/</url>
    
    <content type="html"><![CDATA[<p>课程地址：<a href="https://coding.imooc.com/class/122.html">https://coding.imooc.com/class/122.html</a><br><img src="https://img-blog.csdnimg.cn/2019060415535131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>云原生概念-视频流媒体架构</title>
    <link href="/2021/03/24/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%A6%82%E5%BF%B5-%E8%A7%86%E9%A2%91%E6%B5%81%E5%AA%92%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
    <url>/2021/03/24/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%A6%82%E5%BF%B5-%E8%A7%86%E9%A2%91%E6%B5%81%E5%AA%92%E4%BD%93%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p><img src="../images/20200220215316337.png"></p><p><img src="../images/2020022021533739.png"></p><p><img src="../images/20200220215356131.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>微服务RPC问题</title>
    <link href="/2021/03/24/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1RPC%E9%97%AE%E9%A2%98/"/>
    <url>/2021/03/24/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1RPC%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>下面的问题，想到解决方案后再补充<br>1、多版本并行开发，上线时版本问题？</p><p>2、方法版本前后兼容问题，方法是否允许删除？</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>微服务理念</title>
    <link href="/2021/03/24/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%90%86%E5%BF%B5/"/>
    <url>/2021/03/24/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%90%86%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h4 id="知识参考："><a href="#知识参考：" class="headerlink" title="知识参考："></a>知识参考：</h4><p>简述 Microservices（微服务）：<a href="https://waylau.com/ahout-microservices/">https://waylau.com/ahout-microservices/</a></p><h4 id="单块架构"><a href="#单块架构" class="headerlink" title="单块架构"></a>单块架构</h4><p><img src="https://img-blog.csdnimg.cn/20190413125855470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190413130006726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h5><p><img src="https://img-blog.csdnimg.cn/20190413131311366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190413131559987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190413132112372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190413132542852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190413132602145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190413132635482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190413132703567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190413132729978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>服务雪崩、降级与熔断</title>
    <link href="/2021/03/24/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E9%9B%AA%E5%B4%A9%E3%80%81%E9%99%8D%E7%BA%A7%E4%B8%8E%E7%86%94%E6%96%AD/"/>
    <url>/2021/03/24/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E9%9B%AA%E5%B4%A9%E3%80%81%E9%99%8D%E7%BA%A7%E4%B8%8E%E7%86%94%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<p>服务雪崩、降级与熔断：<a href="https://mp.weixin.qq.com/s?__biz=MzAxNjk4ODE4OQ==&amp;mid=2247485781&amp;idx=1&amp;sn=8e23e1ca1803b8134097152dd9cc4af7&amp;chksm=9bed2827ac9aa13128981075470b013f9f41e593b2a11c13bdd6521ede7e72b08abe2a2a2ac8&amp;scene=0&amp;xtrack=1&amp;key=864f666bf0545584e1124e543625c424cc712ca1e6117345227ce43c008e49120baa6e6e7d47a9bd47b528d7996c3d4f04dc72dbeb92f93e50e441d54c0428c388016f9e2e69d8345811f0a16177eccc&amp;ascene=14&amp;uin=MTkwNjk4NjAxMA==&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=JogDaVDjKXx9W3zQZ2sl6TAUdMDS7rKA0Zb9hMwwVMC4ALxeAySdvq8JADMCeINW">https://mp.weixin.qq.com/s?__biz=MzAxNjk4ODE4OQ==&amp;mid=2247485781&amp;idx=1&amp;sn=8e23e1ca1803b8134097152dd9cc4af7&amp;chksm=9bed2827ac9aa13128981075470b013f9f41e593b2a11c13bdd6521ede7e72b08abe2a2a2ac8&amp;scene=0&amp;xtrack=1&amp;key=864f666bf0545584e1124e543625c424cc712ca1e6117345227ce43c008e49120baa6e6e7d47a9bd47b528d7996c3d4f04dc72dbeb92f93e50e441d54c0428c388016f9e2e69d8345811f0a16177eccc&amp;ascene=14&amp;uin=MTkwNjk4NjAxMA%3D%3D&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=JogDaVDjKXx9W3zQZ2sl6TAUdMDS7rKA0Zb9hMwwVMC4ALxeAySdvq8JADMCeINW</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker部署MySQL+PHP-FPM+Nginx服务</title>
    <link href="/2021/03/24/%E8%BF%90%E7%BB%B4/Docker/docker%E9%83%A8%E7%BD%B2MySQL+PHP-FPM+Nginx%E6%9C%8D%E5%8A%A1/"/>
    <url>/2021/03/24/%E8%BF%90%E7%BB%B4/Docker/docker%E9%83%A8%E7%BD%B2MySQL+PHP-FPM+Nginx%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>docker部署MySQL+PHP-FPM+Nginx服务：<a href="https://zhuanlan.zhihu.com/p/59863793?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=29127226687488&amp;from=groupmessage">https://zhuanlan.zhihu.com/p/59863793?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=29127226687488&amp;from=groupmessage</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装Docker</title>
    <link href="/2021/03/24/%E8%BF%90%E7%BB%B4/Centos7%E5%AE%89%E8%A3%85Docker/"/>
    <url>/2021/03/24/%E8%BF%90%E7%BB%B4/Centos7%E5%AE%89%E8%A3%85Docker/</url>
    
    <content type="html"><![CDATA[<h5 id="Centos7安装Docker"><a href="#Centos7安装Docker" class="headerlink" title="Centos7安装Docker"></a>Centos7安装Docker</h5><p>Docker官方给出的安装文档：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><p>其中的版本号选择可以不操作</p><p><a href="https://blog.csdn.net/tangyaliang11/article/details/87266194">https://blog.csdn.net/tangyaliang11/article/details/87266194</a></p><p><a href="https://www.runoob.com/docker/centos-docker-install.html">https://www.runoob.com/docker/centos-docker-install.html</a></p><p><a href="https://www.cnblogs.com/yufeng218/p/8370670.html">https://www.cnblogs.com/yufeng218/p/8370670.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>容器边缘节点</title>
    <link href="/2021/03/24/%E8%BF%90%E7%BB%B4/%E5%AE%B9%E5%99%A8%E8%BE%B9%E7%BC%98%E8%8A%82%E7%82%B9/"/>
    <url>/2021/03/24/%E8%BF%90%E7%BB%B4/%E5%AE%B9%E5%99%A8%E8%BE%B9%E7%BC%98%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>个人理解：<br>边缘节点：在业务中离用户最近的节点，不需要再经过其他网关服务进行转发的节点。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>gitignore文件不生效</title>
    <link href="/2021/03/24/Git/gitignore%E6%96%87%E4%BB%B6%E4%B8%8D%E7%94%9F%E6%95%88/"/>
    <url>/2021/03/24/Git/gitignore%E6%96%87%E4%BB%B6%E4%B8%8D%E7%94%9F%E6%95%88/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>添加了gitignore文件，设置了要过滤的文件，但是提交后发现要过滤的文件还是被提交上去了。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>在git忽略目录中，新建的文件在git中会有缓存，如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略路径也是不起作用的，</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>这时候我们就应该先把本地缓存删除，然后再进行git的提交，这样就不会出现忽略的文件了。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git rm -r --cached .<br>git add .<br>git commit -m <span class="hljs-string">&quot;remove .idea files&quot;</span><br>git push origin master<br></code></pre></div></td></tr></table></figure><p><img src="../images/20200405013811329.png" alt="20200405013811329"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git push出错</title>
    <link href="/2021/03/24/Git/Git%20push%E5%87%BA%E9%94%99/"/>
    <url>/2021/03/24/Git/Git%20push%E5%87%BA%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>本地一个项目，写的差不多的时候，想起来使用git进行版本管理，于是在远程git仓库创建了一个仓库，本地与远程进行关联后，git push时出现错误 error: failed to push some refs to</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>远程仓库创建的时候，生成了一部分文件（readme，gitignore），本地第一次往远程提交的时候，发现两边的内容不相同，push失败。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>远程仓库创建好后，本地项目还未使用 git inti 初始化，如果已经初始化，请直接删除 .git 文件，然后执行下面的步骤</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">git init<br>git remote add origin git@gitee.com:mohuani/bubble.git<br>git pull -<span class="hljs-literal">-rebase</span> origin master<br>git add .<br>git commit <span class="hljs-literal">-m</span> <span class="hljs-string">&quot;add xxx&quot;</span><br>git push origin master<br></code></pre></div></td></tr></table></figure><p>一般而言，正常的推送流程应为：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">1、在github上创建项目<br><br>2、使用git <span class="hljs-built_in">clone</span> https://github.com/name/project.git克隆到本地<br><br>3、编辑项目<br><br>4、git add . （将变更提交至缓存区）<br><br>5、git commit -m “提交说明（注释）”<br><br>6、git push origin master 将本地变更推送至远程仓库master分支<br></code></pre></div></td></tr></table></figure><hr><p>参考文章： </p><blockquote><p><a href="https://blog.csdn.net/MBuger/article/details/70197532">https://blog.csdn.net/MBuger/article/details/70197532</a></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GO语言全栈工程师2</title>
    <link href="/2021/03/24/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%882/"/>
    <url>/2021/03/24/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%882/</url>
    
    <content type="html"><![CDATA[<h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><p><img src="https://img-blog.csdnimg.cn/2019062017341078.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2019062017104812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620172120303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019062017213696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p><img src="https://img-blog.csdnimg.cn/20190620172218964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>部分操作和解释可以参考下面的博客<br><a href="https://www.cnblogs.com/thinkeridea/p/10317417.html">https://www.cnblogs.com/thinkeridea/p/10317417.html</a><br><a href="https://blog.csdn.net/xj178926426/article/details/78782786">https://blog.csdn.net/xj178926426/article/details/78782786</a><br><a href="https://blog.csdn.net/wfk2975019671/article/details/86838110">https://blog.csdn.net/wfk2975019671/article/details/86838110</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Google资深工程师深度讲解Go语言11-http及其他标准库</title>
    <link href="/2021/03/24/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%8011-http%E5%8F%8A%E5%85%B6%E4%BB%96%E6%A0%87%E5%87%86%E5%BA%93/"/>
    <url>/2021/03/24/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%8011-http%E5%8F%8A%E5%85%B6%E4%BB%96%E6%A0%87%E5%87%86%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190630223929865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190630223952906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019063022481518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190630224746124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Google资深工程师深度讲解Go语言3-内建容器</title>
    <link href="/2021/03/24/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%803-%E5%86%85%E5%BB%BA%E5%AE%B9%E5%99%A8/"/>
    <url>/2021/03/24/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%803-%E5%86%85%E5%BB%BA%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="go语言中只有值传递，没有引用传递"><a href="#go语言中只有值传递，没有引用传递" class="headerlink" title="go语言中只有值传递，没有引用传递"></a>go语言中只有值传递，没有引用传递</h4><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p><img src="https://img-blog.csdnimg.cn/20190213221143555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h4><p><img src="https://img-blog.csdnimg.cn/20190213221406268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p><img src="https://img-blog.csdnimg.cn/20190213221814765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="数组是值类型"><a href="#数组是值类型" class="headerlink" title="数组是值类型"></a>数组是值类型</h4><p><img src="https://img-blog.csdnimg.cn/20190213222908437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><p>切片可以看成是对数组的一种引用。<br>slice(start, end) 里面的start和end都是下标，end并不是指长度，且下标end是不包括的<br><img src="https://img-blog.csdnimg.cn/20190213225437397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="reslice"><a href="#reslice" class="headerlink" title="reslice"></a>reslice</h4><p><img src="https://img-blog.csdnimg.cn/20190213225515814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="slice扩展"><a href="#slice扩展" class="headerlink" title="slice扩展"></a>slice扩展</h4><p><img src="https://img-blog.csdnimg.cn/20190213230356814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190213230454766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620192636328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019062019300012.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><p><img src="https://img-blog.csdnimg.cn/20190620192137743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620192336653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620194457375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="rune数据类型"><a href="#rune数据类型" class="headerlink" title="rune数据类型"></a>rune数据类型</h4><p><a href="https://www.jianshu.com/p/4fbf529926ca">https://www.jianshu.com/p/4fbf529926ca</a><br><img src="https://img-blog.csdnimg.cn/20190620205734367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620210106955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Google资深工程师深度讲解Go语言4-面向对象</title>
    <link href="/2021/03/24/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%804-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/03/24/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%804-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h5 id="接口体和方法"><a href="#接口体和方法" class="headerlink" title="接口体和方法"></a>接口体和方法</h5><p><img src="https://img-blog.csdnimg.cn/20190624231127111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190624232338909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190624232702781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="包和封装"><a href="#包和封装" class="headerlink" title="包和封装"></a>包和封装</h5><p><img src="https://img-blog.csdnimg.cn/2019062501212967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190625013051362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190625013022974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190625013557977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="GOPATH以及目录结构"><a href="#GOPATH以及目录结构" class="headerlink" title="GOPATH以及目录结构"></a>GOPATH以及目录结构</h5><p><img src="https://img-blog.csdnimg.cn/20190625092642885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus入门1</title>
    <link href="/2021/03/24/Java/MyBatis/MyBatis-Plus%E5%85%A5%E9%97%A81/"/>
    <url>/2021/03/24/Java/MyBatis/MyBatis-Plus%E5%85%A5%E9%97%A81/</url>
    
    <content type="html"><![CDATA[<h4 id="课程资料"><a href="#课程资料" class="headerlink" title="课程资料"></a>课程资料</h4><p>视频地址：<a href="https://www.imooc.com/learn/1130">https://www.imooc.com/learn/1130</a><br>文档地址：<a href="https://mp.baomidou.com/guide/">https://mp.baomidou.com/guide/</a></p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>first<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- spring boot 启动器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- spring boot test 启动器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- lombok简化java代码 如果没有安装，先安装这个插件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- mybatis-plus插件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- mysql jdbc驱动 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mp?useSSL=false&amp;serverTimezone=GMT%2B8</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">root:</span> <span class="hljs-string">warn</span><br>    <span class="hljs-attr">com.mp.dao:</span> <span class="hljs-string">trace</span><br>  <span class="hljs-attr">pattern:</span><br>    <span class="hljs-attr">console:</span> <span class="hljs-string">&#x27;%p%m%n&#x27;</span><br>    <span class="hljs-comment"># %p: 日志级别</span><br>    <span class="hljs-comment"># %m: 日志内容</span><br>    <span class="hljs-comment"># %n: 换行</span><br></code></pre></div></td></tr></table></figure><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Data</td><td>注解是lombok.jar包下的注解，该注解通常用在实体bean上，不需要写出set和get方法，但是具备实体bean所具备的方法，简化编程提高变成速度</td></tr><tr><td>@TableId</td><td>设置主键，mp默认匹配数据表中的id字段为主键，如果没有id字段，需要在实体类使用该注解表名主键字段</td></tr><tr><td>@TableName(“mp_user”)</td><td>设置表名，表名和实体类的名字不一致</td></tr><tr><td>@TableField(“real_name”)</td><td>设置字段名，表中字段名和实体类的名字不一致</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/2019122500464781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="当一个字段在表中忽略"><a href="#当一个字段在表中忽略" class="headerlink" title="当一个字段在表中忽略 :"></a>当一个字段在表中忽略 :</h5><ol><li>用transient 不可序列化<br><code>private transient String remark;</code></li><li>用static 许自动生成setget<br><code>private static String remark;</code></li><li>@TableField(exist=false)</li></ol><h5 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h5><ol><li>selectById</li><li>selectBatchIds，实际查询是 select  where id in (id1, id2, id3)</li><li>selectByMap, 实际是拼接where条件查询，其中<strong>map里面的key和数据表字段大小写一致</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mp;<br><br><span class="hljs-keyword">import</span> com.mp.dao.UserMapper;<br><span class="hljs-keyword">import</span> com.mp.entity.User;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> mohuani</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-12-25 11:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RetrieveTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectById</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = userMapper.selectById(<span class="hljs-number">1088250446457389058L</span>);<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectBatchIds</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Long&gt; list = Arrays.asList(<span class="hljs-number">1088248166370832385L</span>, <span class="hljs-number">1094590409767661570L</span>, <span class="hljs-number">1209509417456001025L</span>);<br>        List&lt;User&gt; userList = userMapper.selectBatchIds(list);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByMap</span><span class="hljs-params">()</span> </span>&#123;<br>        Map&lt;String, Object&gt; columnMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        columnMap.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;李艺伟&quot;</span>);<br>        columnMap.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">28</span>);<br>        List&lt;User&gt; userList = userMapper.selectByMap(columnMap);<br>        userList.forEach(System.out::println);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus入门2</title>
    <link href="/2021/03/24/Java/MyBatis/MyBatis-Plus%E5%85%A5%E9%97%A82/"/>
    <url>/2021/03/24/Java/MyBatis/MyBatis-Plus%E5%85%A5%E9%97%A82/</url>
    
    <content type="html"><![CDATA[<h4 id="查询方法"><a href="#查询方法" class="headerlink" title="查询方法"></a>查询方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mp;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.Wrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Wrappers;<br><span class="hljs-keyword">import</span> com.mp.dao.UserMapper;<br><span class="hljs-keyword">import</span> com.mp.entity.User;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> mohuani</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-12-25 11:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RetrieveTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectById</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = userMapper.selectById(<span class="hljs-number">1088250446457389058L</span>);<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectBatchIds</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Long&gt; list = Arrays.asList(<span class="hljs-number">1088248166370832385L</span>, <span class="hljs-number">1094590409767661570L</span>, <span class="hljs-number">1209509417456001025L</span>);<br>        List&lt;User&gt; userList = userMapper.selectBatchIds(list);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByMap</span><span class="hljs-params">()</span> </span>&#123;<br>        Map&lt;String, Object&gt; columnMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        columnMap.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;李艺伟&quot;</span>);<br>        columnMap.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">28</span>);<br>        List&lt;User&gt; userList = userMapper.selectByMap(columnMap);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1、名字中包含雨并且年龄小于40</span><br><span class="hljs-comment">     * name like &#x27;%雨%&#x27; and age&lt;40</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;雨&quot;</span>).lt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">40</span>);<br><br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 2、名字中包含雨年并且龄大于等于20且小于等于40并且email不为空</span><br><span class="hljs-comment">     *    name like &#x27;%雨%&#x27; and age between 20 and 40 and email is not null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper2</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;雨&quot;</span>).between(<span class="hljs-string">&quot;age&quot;</span> ,<span class="hljs-number">20</span> ,<span class="hljs-number">40</span>).isNotNull(<span class="hljs-string">&quot;email&quot;</span>);<br><br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 3、名字为王姓或者年龄大于等于25，按照年龄降序排列，年龄相同按照id升序排列</span><br><span class="hljs-comment">     *    name like &#x27;王%&#x27; or age&gt;=25 order by age desc,id asc</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper3</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.likeRight(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;王&quot;</span>).or().gt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">25</span>).orderByDesc(<span class="hljs-string">&quot;age&quot;</span>).orderByAsc(<span class="hljs-string">&quot;id&quot;</span>);<br><br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 4、创建日期为2019年2月14日并且直属上级为名字为王姓</span><br><span class="hljs-comment">     *       date_format(create_time,&#x27;%Y-%m-%d&#x27;)=&#x27;2019-02-14&#x27; and manager_id in (select id from user where name like &#x27;王%&#x27;)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper4</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.apply(<span class="hljs-string">&quot;date_format(create_time, &#x27;%Y-%m-%d&#x27;) = &#123;0&#125;&quot;</span>, <span class="hljs-string">&quot;2019-02-14&quot;</span>)<br>                .inSql(<span class="hljs-string">&quot;manager_id&quot;</span>, <span class="hljs-string">&quot;select id from user where name like &#x27;王%&#x27;&quot;</span>);<br><br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 5、名字为王姓并且（年龄小于40或邮箱不为空）</span><br><span class="hljs-comment">     *     name like &#x27;王%&#x27; and (age&lt;40 or email is not null)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper5</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.likeRight(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;王&quot;</span>).and(userQueryWrapper -&gt; userQueryWrapper.gt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">40</span>).or().isNotNull(<span class="hljs-string">&quot;email&quot;</span>));<br><br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 6、名字为王姓或者（年龄小于40并且年龄大于20并且邮箱不为空）</span><br><span class="hljs-comment">     *     name like &#x27;王%&#x27; or (age&lt;40 and age&gt;20 and email is not null)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper6</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.likeRight(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;王&quot;</span>).or(userQueryWrapper -&gt; userQueryWrapper.lt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">40</span>).gt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>).isNotNull(<span class="hljs-string">&quot;email&quot;</span>));<br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 7、（年龄小于40或邮箱不为空）并且名字为王姓</span><br><span class="hljs-comment">     *     (age&lt;40 or email is not null) and name like &#x27;王%&#x27;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper7</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.nested(userQueryWrapper -&gt; userQueryWrapper.lt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">40</span>).or().isNotNull(<span class="hljs-string">&quot;email&quot;</span>))<br>                .likeRight(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;王&quot;</span>);<br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 8、年龄为30、31、34、35</span><br><span class="hljs-comment">     *     age in (30、31、34、35)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper8</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.in(<span class="hljs-string">&quot;age&quot;</span>, Arrays.asList(<span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>));<br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 9、只返回满足条件的其中一条语句即可</span><br><span class="hljs-comment">     * limit 1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper9</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.in(<span class="hljs-string">&quot;age&quot;</span>, Arrays.asList(<span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>)).last(<span class="hljs-string">&quot;limit 1&quot;</span>);<br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 二、select中字段不全部出现的查询</span><br><span class="hljs-comment">     * 10.1、名字中包含雨并且年龄小于40(需求1加强版)</span><br><span class="hljs-comment">     *     第一种情况：select id,name</span><br><span class="hljs-comment">     *     from user</span><br><span class="hljs-comment">     *     where name like &#x27;%雨%&#x27; and age&lt;40</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapperSupper</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.select(<span class="hljs-string">&quot;id, name&quot;</span>).like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;雨&quot;</span>).lt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">40</span>);<br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 10.2第二种情况：select id,name,age,email</span><br><span class="hljs-comment">     *     from user</span><br><span class="hljs-comment">     *     where name like &#x27;%雨%&#x27; and age&lt;40</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapperSupper2</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;雨&quot;</span>).lt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">40</span>)<br>                .select(User.class, tableFieldInfo -&gt; !tableFieldInfo.getColumn().equals(<span class="hljs-string">&quot;create_time&quot;</span>) &amp;&amp;<br>                        !tableFieldInfo.getColumn().equals(<span class="hljs-string">&quot;manager_id&quot;</span>));<br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapperMaps</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.select(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>).like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;雨&quot;</span>).lt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">40</span>);<br><br>        List&lt;Map&lt;String, Object&gt;&gt; userList = userMapper.selectMaps(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 11、按照直属上级分组，查询每组的平均年龄、最大年龄、最小年龄。</span><br><span class="hljs-comment">     * 并且只取年龄总和小于500的组。</span><br><span class="hljs-comment">     * select avg(age) avg_age,min(age) min_age,max(age) max_age</span><br><span class="hljs-comment">     * from user</span><br><span class="hljs-comment">     * group by manager_id</span><br><span class="hljs-comment">     * having sum(age) &lt;500</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapperMaps2</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.select(<span class="hljs-string">&quot;avg(age) avg_age&quot;</span>, <span class="hljs-string">&quot;min(age) min_age&quot;</span>, <span class="hljs-string">&quot;max(age) max_age&quot;</span>)<br>                .groupBy(<span class="hljs-string">&quot;manager_id&quot;</span>).having(<span class="hljs-string">&quot;sum(age)&lt;&#123;0&#125;&quot;</span>, <span class="hljs-number">500</span>);<br><br>        List&lt;Map&lt;String, Object&gt;&gt; userList = userMapper.selectMaps(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br>    <br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>实体作为条件构造器构造方法的参数时</strong></p><ul><li>实体参数和条件构造器构造的条件互不干扰，都会拼接到SQL语句里面，所以用的时候选择其中的一种方式就行了。</li></ul><p><strong>allEq</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">allEq(Map&lt;R, V&gt; params)<br>allEq(Map&lt;R, V&gt; params, <span class="hljs-keyword">boolean</span> null2IsNull)<br>allEq(<span class="hljs-keyword">boolean</span> condition, Map&lt;R, V&gt; params, <span class="hljs-keyword">boolean</span> null2IsNull)<br></code></pre></div></td></tr></table></figure><ul><li>全部eq(或个别isNull)</li></ul><blockquote><p>params : key为数据库字段名,value为字段值<br>null2IsNull : 为true则在map的value为null时调用 isNull 方法,为false时则忽略value为null的</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20191225180435655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参考： <a href="https://mp.baomidou.com/guide/wrapper.html#alleq">https://mp.baomidou.com/guide/wrapper.html#alleq</a></p><p><strong>selectObjs</strong></p><ul><li>只会返回结果集的第一列，其他列不返回，比较鸡肋</li></ul><p><strong>selectCount</strong></p><ul><li>查询总记录数</li></ul><p><strong>selectOne</strong></p><ul><li>返回一个实体对象，如果查询的结果不止一条就会直接报错</li></ul><h4 id="Lambda查询"><a href="#Lambda查询" class="headerlink" title="Lambda查询"></a>Lambda查询</h4><ul><li>编写查询条件的时候我们容易把字段名写错，但是编译检查不出来。使用Lambda的方式，可以减少字段名写错的情况，在编译的时候会直接检测出来。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 第一种构建方式</span><br>LambdaQueryWrapper&lt;User&gt; lambda = <span class="hljs-keyword">new</span> QueryWrapper&lt;User&gt;().lambda();<br><span class="hljs-comment">// 第二种构建方式</span><br>LambdaQueryWrapper&lt;User&gt; userLambdaQueryWrapper = <span class="hljs-keyword">new</span> LambdaQueryWrapper&lt;&gt;();<br><span class="hljs-comment">// 第三种构建方式</span><br>LambdaQueryWrapper&lt;User&gt; lambdaQuery = Wrappers.&lt;User&gt;lambdaQuery();<br></code></pre></div></td></tr></table></figure><p>查询示例代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectLambda</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">// LambdaQueryWrapper&lt;User&gt; lambda = new QueryWrapper&lt;User&gt;().lambda();</span><br>       <span class="hljs-comment">// LambdaQueryWrapper&lt;User&gt; userLambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br>       LambdaQueryWrapper&lt;User&gt; lambdaQuery = Wrappers.&lt;User&gt;lambdaQuery();<br>       lambdaQuery.like(User::getName, <span class="hljs-string">&quot;雨&quot;</span>).lt(User::getAge, <span class="hljs-number">40</span>);<br><br>       List&lt;User&gt; userList = userMapper.selectList(lambdaQuery);<br>       userList.forEach(System.out::println);<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *  5.名字为王姓并且（年龄小于40或邮箱不为空）</span><br><span class="hljs-comment">    *     name like &#x27;王%&#x27; and (age&lt;40 or email is not null)</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectLambda2</span><span class="hljs-params">()</span> </span>&#123;<br>       LambdaQueryWrapper&lt;User&gt; lambdaQuery = Wrappers.lambdaQuery();<br>       lambdaQuery.likeRight(User::getName, <span class="hljs-string">&quot;王&quot;</span>)<br>               .and(userLambdaQueryWrapper -&gt; userLambdaQueryWrapper.lt(User::getAge, <span class="hljs-number">40</span>).or().isNotNull(User::getEmail));<br>       List&lt;User&gt; userList = userMapper.selectList(lambdaQuery);<br>       userList.forEach(System.out::println);<br>   &#125;<br><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectLambda3</span><span class="hljs-params">()</span> </span>&#123;<br>       List&lt;User&gt; userList = <span class="hljs-keyword">new</span> LambdaQueryChainWrapper&lt;User&gt;(userMapper)<br>               .like(User::getName, <span class="hljs-string">&quot;雨&quot;</span>).ge(User::getAge, <span class="hljs-number">20</span>).list();<br><br>       userList.forEach(System.out::println);<br>   &#125;<br></code></pre></div></td></tr></table></figure><h4 id="自定义查询"><a href="#自定义查询" class="headerlink" title="自定义查询"></a>自定义查询</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mp.dao;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.Wrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Constants;<br><span class="hljs-keyword">import</span> com.mp.entity.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> mohuani</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-12-24 22:55</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;<br><br><span class="hljs-comment">// 此处的ew，写法是固定的，框架约定的名字</span><br>    <span class="hljs-meta">@Select(&quot;select * from user $&#123;ew.customSqlSegment&#125;&quot;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">selectAll</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;User&gt; wrapper)</span></span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectMy</span><span class="hljs-params">()</span> </span>&#123;<br>       LambdaQueryWrapper&lt;User&gt; lambdaQuery = Wrappers.lambdaQuery();<br>       lambdaQuery.likeRight(User::getName, <span class="hljs-string">&quot;王&quot;</span>)<br>               .and(userLambdaQueryWrapper -&gt; userLambdaQueryWrapper.lt(User::getAge, <span class="hljs-number">40</span>).or().isNotNull(User::getEmail));<br>       List&lt;User&gt; userList = userMapper.selectAll(lambdaQuery);<br>       userList.forEach(System.out::println);<br>   &#125;<br></code></pre></div></td></tr></table></figure><p>也可以通过xml配置自定义查询</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 无条件翻页查询</span><br><span class="hljs-function">IPage&lt;T&gt; <span class="hljs-title">page</span><span class="hljs-params">(IPage&lt;T&gt; page)</span></span>;<br><span class="hljs-comment">// 翻页查询</span><br><span class="hljs-function">IPage&lt;T&gt; <span class="hljs-title">page</span><span class="hljs-params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span></span>;<br><span class="hljs-comment">// 无条件翻页查询</span><br>IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps(IPage&lt;T&gt; page);<br><span class="hljs-comment">// 翻页查询</span><br>IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper);<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">分页查询步骤:<br>1:创建并完善配置类MybatisPlusConfig.java<br>2.实例化Page对象<br> 2.1: Page对象构造函数参数:<br>   1:当前页<br>   2:一页的数量<br>   3.分页总数<br>   4:是否需要查询总条数(false:不查,true:查,少发出一条sql)<br>3.1 使用selectPage 或 selectMapsPage(区别:前者封装进实体类中,后者封装进Map对象中)<br>3.2 如果为多表查询,则需要进行自定义方法,此时需要配置UserMapper接口文件,返回值为IPage类型<br>    注:切记不可返回Page类型,否者代码运行无报错,也能看到sql查询,但是在获取getRecords时无数据<br>   3.2.1 IPage&lt;User&gt; selectAllByPage(Page&lt;User&gt; page, @Param(Constants.WRAPPER) Wrapper&lt;User&gt; wrapper);<br>   3.2.2 配置@select注解 或者 配置xml文件<br>      @select注解附:@Select(&quot;select * from User $&#123;ew.customSqlSegment&#125;&quot;)<br>      xml配置附:&lt;select id=&quot;selectAllByPageXml&quot; resultType=&quot;com.mp.pojo.User&quot;&gt;<br>              select * from User $&#123;ew.customSqlSegment&#125;<br>           &lt;/select&gt;<br>4.传入参数Page对象和QueryWrapper对象<br>   4.1: 使用getTotal获取总条数<br>   4.2: 使用getPages获取总页数<br></code></pre></div></td></tr></table></figure><p>参考：<a href="https://mp.baomidou.com/guide/crud-interface.html#page">https://mp.baomidou.com/guide/crud-interface.html#page</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus入门3</title>
    <link href="/2021/03/24/Java/MyBatis/MyBatis-Plus%E5%85%A5%E9%97%A83/"/>
    <url>/2021/03/24/Java/MyBatis/MyBatis-Plus%E5%85%A5%E9%97%A83/</url>
    
    <content type="html"><![CDATA[<h4 id="update-更新"><a href="#update-更新" class="headerlink" title="update 更新"></a>update 更新</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 参考：https://mp.baomidou.com/guide/crud-interface.html#update</span><br><br><span class="hljs-comment">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">update</span><span class="hljs-params">(Wrapper&lt;T&gt; updateWrapper)</span></span>;<br><span class="hljs-comment">// 根据 whereEntity 条件，更新记录</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">update</span><span class="hljs-params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span></span>;<br><span class="hljs-comment">// 根据 ID 选择修改</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">updateById</span><span class="hljs-params">(T entity)</span></span>;<br><span class="hljs-comment">// 根据ID 批量更新</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">updateBatchById</span><span class="hljs-params">(Collection&lt;T&gt; entityList)</span></span>;<br><span class="hljs-comment">// 根据ID 批量更新</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">updateBatchById</span><span class="hljs-params">(Collection&lt;T&gt; entityList, <span class="hljs-keyword">int</span> batchSize)</span></span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mp;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Wrappers;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.additional.update.impl.LambdaUpdateChainWrapper;<br><span class="hljs-keyword">import</span> com.mp.dao.UserMapper;<br><span class="hljs-keyword">import</span> com.mp.entity.User;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> mohuani</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-12-24 23:01</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UpdateTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateById</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setId(<span class="hljs-number">1088248166370832385L</span>);<br>        user.setAge(<span class="hljs-number">26</span>);<br>        user.setEmail(<span class="hljs-string">&quot;wtf2@baomidou.com&quot;</span>);<br>        <span class="hljs-keyword">int</span> rows = userMapper.updateById(user);<br>        System.out.println(<span class="hljs-string">&quot;影响记录条数：&quot;</span> + rows);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过Wrapper形式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateByWrapper</span><span class="hljs-params">()</span> </span>&#123;<br>        UpdateWrapper&lt;User&gt; updateWrapper = <span class="hljs-keyword">new</span> UpdateWrapper&lt;&gt;();<br>        updateWrapper.eq(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;李艺伟&quot;</span>).eq(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">28</span>);<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setEmail(<span class="hljs-string">&quot;lyw2019@baomidou.com&quot;</span>);<br>        user.setAge(<span class="hljs-number">29</span>);<br>        <span class="hljs-keyword">int</span> rows = userMapper.update(user, updateWrapper);<br>        System.out.println(<span class="hljs-string">&quot;影响记录条数：&quot;</span> + rows);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造where条件的时候直接设置update的内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateByWrapper3</span><span class="hljs-params">()</span> </span>&#123;<br>        UpdateWrapper&lt;User&gt; updateWrapper = <span class="hljs-keyword">new</span> UpdateWrapper&lt;&gt;();<br>        updateWrapper.eq(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;李艺伟&quot;</span>).eq(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">29</span>).set(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">30</span>);<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setEmail(<span class="hljs-string">&quot;lyw2019@baomidou.com&quot;</span>);<br>        user.setAge(<span class="hljs-number">29</span>);<br>        <span class="hljs-keyword">int</span> rows = userMapper.update(user, updateWrapper);<br>        System.out.println(<span class="hljs-string">&quot;影响记录条数：&quot;</span> + rows);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过Lambda形式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateByWrapper4</span><span class="hljs-params">()</span> </span>&#123;<br>        LambdaUpdateWrapper&lt;User&gt; lambdaUpdateWrapper = Wrappers.lambdaUpdate();<br>        lambdaUpdateWrapper.eq(User::getName, <span class="hljs-string">&quot;李艺伟&quot;</span>).eq(User::getAge, <span class="hljs-number">30</span>).set(User::getAge, <span class="hljs-number">31</span>);<br><br>        <span class="hljs-keyword">int</span> rows = userMapper.update(<span class="hljs-keyword">null</span>, lambdaUpdateWrapper);<br>        System.out.println(<span class="hljs-string">&quot;影响记录条数：&quot;</span> + rows);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过Lambda形式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateByWrapper5</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> update = <span class="hljs-keyword">new</span> LambdaUpdateChainWrapper&lt;&gt;(userMapper)<br>                .eq(User::getName, <span class="hljs-string">&quot;李艺伟&quot;</span>).eq(User::getAge, <span class="hljs-number">31</span>).set(User::getAge, <span class="hljs-number">32</span>).update();<br>        System.out.println(update);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="删除-delete"><a href="#删除-delete" class="headerlink" title="删除 delete"></a>删除 delete</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 参考：https://mp.baomidou.com/guide/crud-interface.html#delete</span><br><br><span class="hljs-comment">// 根据 entity 条件，删除记录</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; wrapper)</span></span>;<br><span class="hljs-comment">// 删除（根据ID 批量删除）</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteBatchIds</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;<br><span class="hljs-comment">// 根据 ID 删除</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteById</span><span class="hljs-params">(Serializable id)</span></span>;<br><span class="hljs-comment">// 根据 columnMap 条件，删除记录</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteByMap</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mp;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Wrappers;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.additional.update.impl.LambdaUpdateChainWrapper;<br><span class="hljs-keyword">import</span> com.mp.dao.UserMapper;<br><span class="hljs-keyword">import</span> com.mp.entity.User;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> mohuani</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-12-24 23:01</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeleteTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteById</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> rows = userMapper.deleteById(<span class="hljs-number">1088248166370832385L</span>);<br>        System.out.println(<span class="hljs-string">&quot;删除记录条数：&quot;</span> + rows);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造where条件删除</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteByMap</span><span class="hljs-params">()</span> </span>&#123;<br>        Map&lt;String, Object&gt; columnMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        columnMap.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;刘明强5&quot;</span>);<br>        columnMap.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">31</span>);<br><br>        <span class="hljs-keyword">int</span> rows = userMapper.deleteByMap(columnMap);<br>        System.out.println(<span class="hljs-string">&quot;删除记录条数：&quot;</span> + rows);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量删除</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteBatchIds</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> rows = userMapper.deleteBatchIds(Arrays.asList(<span class="hljs-number">1209754139000852481L</span>, <span class="hljs-number">1209838254358319105L</span>, <span class="hljs-number">1209838329864204289L</span>));<br>        System.out.println(<span class="hljs-string">&quot;删除记录条数：&quot;</span> + rows);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过Lambda形式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateByWrapper4</span><span class="hljs-params">()</span> </span>&#123;<br>        LambdaQueryWrapper&lt;User&gt; lambdaQuery = Wrappers.lambdaQuery();<br>        lambdaQuery.gt(User::getAge, <span class="hljs-number">35</span>).lt(User::getAge, <span class="hljs-number">40</span>);<br>        <span class="hljs-keyword">int</span> rows = userMapper.delete(lambdaQuery);<br>        System.out.println(<span class="hljs-string">&quot;影响记录条数：&quot;</span> + rows);<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus入门4</title>
    <link href="/2021/03/24/Java/MyBatis/MyBatis-Plus%E5%85%A5%E9%97%A84/"/>
    <url>/2021/03/24/Java/MyBatis/MyBatis-Plus%E5%85%A5%E9%97%A84/</url>
    
    <content type="html"><![CDATA[<h4 id="AR模式"><a href="#AR模式" class="headerlink" title="AR模式"></a>AR模式</h4><p>通过直接操作实体类的方式，对数据表进行增删改查的操作</p><ol><li>必须存在对应的原始mapper并继承Model<User> 泛型类，并配置相应类注解</li><li>同时申明序列号  serialVersionUID = 1L</li><li>需要继承BaseMapper</li></ol><p><img src="https://img-blog.csdnimg.cn/2019122522344990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191225223524774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="主键策略"><a href="#主键策略" class="headerlink" title="主键策略"></a>主键策略</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 参考：https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/IdType.java</span><br><br><span class="hljs-keyword">package</span> com.baomidou.mybatisplus.annotation;<br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成ID类型枚举类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> hubin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2015-11-10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">IdType</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据库ID自增</span><br><span class="hljs-comment">     */</span><br>    AUTO(<span class="hljs-number">0</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</span><br><span class="hljs-comment">     */</span><br>    NONE(<span class="hljs-number">1</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户输入ID</span><br><span class="hljs-comment">     * &lt;p&gt;该类型可以通过自己注册自动填充插件进行填充&lt;/p&gt;</span><br><span class="hljs-comment">     */</span><br>    INPUT(<span class="hljs-number">2</span>),<br><br>    <span class="hljs-comment">/* 以下3种类型、只有当插入对象ID 为空，才自动填充。 */</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分配ID (主键类型为number或string）,</span><br><span class="hljs-comment">     * 默认实现类 &#123;<span class="hljs-doctag">@link</span> com.baomidou.mybatisplus.core.incrementer.DefaultIdentifierGenerator&#125;(雪花算法)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 3.3.0</span><br><span class="hljs-comment">     */</span><br>    ASSIGN_ID(<span class="hljs-number">3</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分配UUID (主键类型为 string)</span><br><span class="hljs-comment">     * 默认实现类 &#123;<span class="hljs-doctag">@link</span> com.baomidou.mybatisplus.core.incrementer.DefaultIdentifierGenerator&#125;(UUID.replace(&quot;-&quot;,&quot;&quot;))</span><br><span class="hljs-comment">     */</span><br>    ASSIGN_UUID(<span class="hljs-number">4</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@deprecated</span> 3.3.0 please use &#123;<span class="hljs-doctag">@link</span> #ASSIGN_ID&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    ID_WORKER(<span class="hljs-number">3</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@deprecated</span> 3.3.0 please use &#123;<span class="hljs-doctag">@link</span> #ASSIGN_ID&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    ID_WORKER_STR(<span class="hljs-number">3</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@deprecated</span> 3.3.0 please use &#123;<span class="hljs-doctag">@link</span> #ASSIGN_UUID&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    UUID(<span class="hljs-number">4</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> key;<br><br>    IdType(<span class="hljs-keyword">int</span> key) &#123;<br>        <span class="hljs-keyword">this</span>.key = key;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>策略配置：局部策略优先全局策略<br><a href="https://mp.baomidou.com/config/#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE">https://mp.baomidou.com/config/#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Gson创建和解析Json</title>
    <link href="/2021/03/24/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Gson%E5%88%9B%E5%BB%BA%E5%92%8C%E8%A7%A3%E6%9E%90Json/"/>
    <url>/2021/03/24/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Gson%E5%88%9B%E5%BB%BA%E5%92%8C%E8%A7%A3%E6%9E%90Json/</url>
    
    <content type="html"><![CDATA[<p>课程地址：<a href="https://www.imooc.com/learn/523">https://www.imooc.com/learn/523</a><br>Gson是google开发的一个开源Json解析库，最新版本以及源码可以在官方的github上查看：<a href="https://github.com/google/gson">https://github.com/google/gson</a></p><h5 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maven">&lt;dependency&gt;<br>  &lt;groupId&gt;com.google.code.gson&lt;&#x2F;groupId&gt;<br>  &lt;artifactId&gt;gson&lt;&#x2F;artifactId&gt;<br>  &lt;version&gt;2.8.5&lt;&#x2F;version&gt;<br>&lt;&#x2F;dependency&gt;<br></code></pre></div></td></tr></table></figure><h5 id="创建javaBean"><a href="#创建javaBean" class="headerlink" title="创建javaBean"></a>创建javaBean</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> bean;<br><br><span class="hljs-keyword">import</span> com.google.gson.annotations.SerializedName;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> mohuani</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-05-08 23:00</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Diaosi</span> </span>&#123;<br><br><span class="hljs-comment">//    @SerializedName(&quot;NAME&quot;)  // 通过注解将属性name变成NAME</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String school;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> has_girlfriend;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> age;<br>    <span class="hljs-keyword">private</span> Object car;<br>    <span class="hljs-keyword">private</span> Object house;<br>    <span class="hljs-keyword">private</span> String[] major;<br>    <span class="hljs-keyword">private</span> String comment;<br>    <span class="hljs-keyword">private</span> String birthday;<br><br><br><span class="hljs-comment">// 如果用transient声明一个实例变量，当对象存储时，它的值不需要维持。换句话来说就是，用transient关键字标记的成员变量不参与序列化过程</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String ignore;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getIgnore</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ignore;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setIgnore</span><span class="hljs-params">(String ignore)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.ignore = ignore;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSchool</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> school;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSchool</span><span class="hljs-params">(String school)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.school = school;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isHas_girlfriend</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> has_girlfriend;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHas_girlfriend</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> has_girlfriend)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.has_girlfriend = has_girlfriend;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">double</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getCar</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> car;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCar</span><span class="hljs-params">(Object car)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.car = car;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getHouse</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> house;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHouse</span><span class="hljs-params">(Object house)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.house = house;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String[] getMajor() &#123;<br>        <span class="hljs-keyword">return</span> major;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMajor</span><span class="hljs-params">(String[] major)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.major = major;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getComment</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> comment;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setComment</span><span class="hljs-params">(String comment)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.comment = comment;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBirthday</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBirthday</span><span class="hljs-params">(String birthday)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.birthday = birthday;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Diaosi&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, school=&#x27;&quot;</span> + school + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, has_girlfriend=&quot;</span> + has_girlfriend +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, car=&quot;</span> + car +<br>                <span class="hljs-string">&quot;, house=&quot;</span> + house +<br>                <span class="hljs-string">&quot;, major=&quot;</span> + Arrays.toString(major) +<br>                <span class="hljs-string">&quot;, comment=&#x27;&quot;</span> + comment + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, birthday=&#x27;&quot;</span> + birthday + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>ps:关键字  <strong>transient</strong>  如果用transient声明一个实例变量，当对象存储时，它的值不需要维持。换句话来说就是，用transient关键字标记的成员变量不参与序列化过程。</p><h5 id="生成json"><a href="#生成json" class="headerlink" title="生成json"></a>生成json</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> gson;<br><br><span class="hljs-keyword">import</span> bean.Diaosi;<br><span class="hljs-keyword">import</span> com.google.gson.FieldNamingStrategy;<br><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><span class="hljs-keyword">import</span> com.google.gson.GsonBuilder;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> mohuani</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-05-09 0:15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GsonCreateSample</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Diaosi diaosi = <span class="hljs-keyword">new</span> Diaosi();<br>        diaosi.setName(<span class="hljs-string">&quot;wfk&quot;</span>);<br>        diaosi.setAge(<span class="hljs-number">25.2</span>);<br>        diaosi.setBirthday(<span class="hljs-string">&quot;1996-07-01&quot;</span>);<br>        diaosi.setSchool(<span class="hljs-string">&quot;蓝翔&quot;</span>);<br>        diaosi.setMajor(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;理发&quot;</span>, <span class="hljs-string">&quot;挖掘机&quot;</span>&#125;);<br>        diaosi.setHas_girlfriend(<span class="hljs-keyword">true</span>);<br>        diaosi.setCar(<span class="hljs-keyword">null</span>);<br>        diaosi.setHouse(<span class="hljs-keyword">null</span>);<br>        diaosi.setComment(<span class="hljs-string">&quot;这是一个注释1&quot;</span>);<br>        diaosi.setIgnore(<span class="hljs-string">&quot;忽略这条属性&quot;</span>);<br><br>        Gson gson = <span class="hljs-keyword">new</span> Gson();<br>        System.out.println(gson.toJson(diaosi));<br><br>        <span class="hljs-comment">// 美化调试</span><br>        GsonBuilder gsonBuilder = <span class="hljs-keyword">new</span> GsonBuilder();<br>        gsonBuilder.setPrettyPrinting();<br>        gsonBuilder.setFieldNamingStrategy(<span class="hljs-keyword">new</span> FieldNamingStrategy() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">translateName</span><span class="hljs-params">(Field field)</span> </span>&#123;<br>                <span class="hljs-comment">// 将原有的属性name变成NAME</span><br>                <span class="hljs-keyword">if</span> (field.getName().equals(<span class="hljs-string">&quot;name&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;NAME&quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">return</span> field.getName();<br>            &#125;<br>        &#125;);<br>        Gson gson1 = gsonBuilder.create();<br>        System.out.println(gson1.toJson(diaosi));<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java 反射</title>
    <link href="/2021/03/24/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%20%E5%8F%8D%E5%B0%84/"/>
    <url>/2021/03/24/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%20%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h5 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h5><p>反射——Java高级开发必须懂的 <a href="https://www.imooc.com/learn/199">https://www.imooc.com/learn/199</a></p><hr><h4 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h4><ul><li>在面向对象的世界里，万事万物皆对象。（java语言中，静态的成员、普通数据类型除外)<br> 类是不是对象呢?类是(哪个类的对象呢?)谁的对象呢?<br> 类是对象，类是java.lang.Class类的实例对象</li><li>这个对象到底如何表示</li><li>Class.forName(“类的全称”)<div class="hljs code-wrapper"><pre><code> 不仅表示了，类的类类型，还代表了动态加载类 请大家区分编译、运行 编译时刻加载类是静态加载类， new创建对象是静态加载类，在编译时刻就需要加载所有的可能使用到的类， 运行时刻加载类是动态加载类</code></pre></div></li><li>基本的数据类型<div class="hljs code-wrapper"><pre><code>void关键字  都存在类类型 </code></pre></div></li><li>Class类的基本API操作</li></ul><h4 id="方法的反射"><a href="#方法的反射" class="headerlink" title="方法的反射"></a>方法的反射</h4><ul><li>如何获取某个方法<br>  方法的名称和方法的参数列表才能唯一决定某个方法</li><li>方法反射的操作<br> method.invoke(对象，参数列表)</li><li>为什么要用方法的反射<br>  why?指定方法名称调用方法<br>  举个实际应用的案例  —-&gt;通过标准JavaBean的属性名获取其属性值<br>  BeanUtil类</li><li>通过Class,Method来认识泛型的本质</li></ul><h5 id="反射-Class类的使用"><a href="#反射-Class类的使用" class="headerlink" title="反射-Class类的使用"></a>反射-Class类的使用</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.imooc.reflect;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassDemo1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//Foo的实例对象如何表示</span><br>Foo foo1 = <span class="hljs-keyword">new</span> Foo();<span class="hljs-comment">//foo1就表示出来了.</span><br><span class="hljs-comment">//Foo这个类 也是一个实例对象，Class类的实例对象,如何表示呢</span><br><span class="hljs-comment">//任何一个类都是Class的实例对象，这个实例对象有三种表示方式</span><br><br><span class="hljs-comment">//第一种表示方式---&gt;实际在告诉我们任何一个类都有一个隐含的静态成员变量class</span><br>Class c1 = Foo.class;<br><br><span class="hljs-comment">//第二中表达方式  已经知道该类的对象通过getClass方法</span><br>Class c2 = foo1.getClass();<br><br><span class="hljs-comment">/*官网 c1 ,c2 表示了Foo类的类类型(class type)</span><br><span class="hljs-comment"> * 万事万物皆对象，</span><br><span class="hljs-comment"> * 类也是对象，是Class类的实例对象</span><br><span class="hljs-comment"> * 这个对象我们称为该类的类类型</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//不管c1  or c2都代表了Foo类的类类型，一个类只可能是Class类的一个实例对象</span><br>System.out.println(c1 == c2);<br><br><span class="hljs-comment">//第三种表达方式</span><br>Class c3 = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>c3 = Class.forName(<span class="hljs-string">&quot;com.imooc.reflect.Foo&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>System.out.println(c2==c3);<br><br><span class="hljs-comment">//我们完全可以通过类的类类型创建该类的对象实例----&gt;通过c1 or c2 or c3创建Foo的实例对象</span><br><span class="hljs-keyword">try</span> &#123;<br>Foo foo = (Foo)c1.newInstance();<span class="hljs-comment">//需要有无参数的构造方法</span><br>foo.print();<br>&#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><br><br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;foo&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="动态加载类"><a href="#动态加载类" class="headerlink" title="动态加载类"></a>动态加载类</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.reflect;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassDemo2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>Class c1 = <span class="hljs-keyword">int</span>.class;<span class="hljs-comment">//int 的类类型</span><br>Class c2 = String.class;<span class="hljs-comment">//String类的类类型   String类字节码（自己发明的)</span><br>Class c3 = <span class="hljs-keyword">double</span>.class;<br>Class c4 = Double.class;<br>Class c5 = <span class="hljs-keyword">void</span>.class;<br><br>System.out.println(c1.getName());<br>System.out.println(c2.getName());<br>System.out.println(c2.getSimpleName());<span class="hljs-comment">//不包含包名的类的名称</span><br>System.out.println(c5.getName());<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="获取-方法信息-和-成员变量构造函数信息"><a href="#获取-方法信息-和-成员变量构造函数信息" class="headerlink" title="获取 方法信息 和 成员变量构造函数信息"></a>获取 方法信息 和 成员变量构造函数信息</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.reflect;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassUtil</span> </span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打印类的信息，包括类的成员函数、成员变量(只获取成员函数)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> obj 该对象所属类的信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printClassMethodMessage</span><span class="hljs-params">(Object obj)</span></span>&#123;<br><span class="hljs-comment">//要获取类的信息  首先要获取类的类类型</span><br>Class c = obj.getClass();<span class="hljs-comment">//传递的是哪个子类的对象  c就是该子类的类类型</span><br><span class="hljs-comment">//获取类的名称</span><br>System.out.println(<span class="hljs-string">&quot;类的名称是:&quot;</span>+c.getName());<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Method类，方法对象</span><br><span class="hljs-comment"> * 一个成员方法就是一个Method对象</span><br><span class="hljs-comment"> * getMethods()方法获取的是所有的public的函数，包括父类继承而来的</span><br><span class="hljs-comment"> * getDeclaredMethods()获取的是所有该类自己声明的方法，不问访问权限</span><br><span class="hljs-comment"> */</span><br>Method[] ms = c.getMethods();<span class="hljs-comment">//c.getDeclaredMethods()</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ms.length;i++)&#123;<br><span class="hljs-comment">//得到方法的返回值类型的类类型</span><br>Class returnType = ms[i].getReturnType();<br>System.out.print(returnType.getName()+<span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-comment">//得到方法的名称</span><br>System.out.print(ms[i].getName()+<span class="hljs-string">&quot;(&quot;</span>);<br><span class="hljs-comment">//获取参数类型---&gt;得到的是参数列表的类型的类类型</span><br>Class[] paramTypes = ms[i].getParameterTypes();<br><span class="hljs-keyword">for</span> (Class class1 : paramTypes) &#123;<br>System.out.print(class1.getName()+<span class="hljs-string">&quot;,&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;)&quot;</span>);<br>&#125;<br>&#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取成员变量的信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> obj</span><br><span class="hljs-comment">     */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printFieldMessage</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>Class c = obj.getClass();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 成员变量也是对象</span><br><span class="hljs-comment"> * java.lang.reflect.Field</span><br><span class="hljs-comment"> * Field类封装了关于成员变量的操作</span><br><span class="hljs-comment"> * getFields()方法获取的是所有的public的成员变量的信息</span><br><span class="hljs-comment"> * getDeclaredFields获取的是该类自己声明的成员变量的信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//Field[] fs = c.getFields();</span><br>Field[] fs = c.getDeclaredFields();<br><span class="hljs-keyword">for</span> (Field field : fs) &#123;<br><span class="hljs-comment">//得到成员变量的类型的类类型</span><br>Class fieldType = field.getType();<br>String typeName = fieldType.getName();<br><span class="hljs-comment">//得到成员变量的名称</span><br>String fieldName = field.getName();<br>System.out.println(typeName+<span class="hljs-string">&quot; &quot;</span>+fieldName);<br>&#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打印对象的构造函数的信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> obj</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printConMessage</span><span class="hljs-params">(Object obj)</span></span>&#123;<br>Class c = obj.getClass();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 构造函数也是对象</span><br><span class="hljs-comment"> * java.lang. Constructor中封装了构造函数的信息</span><br><span class="hljs-comment"> * getConstructors获取所有的public的构造函数</span><br><span class="hljs-comment"> * getDeclaredConstructors得到所有的构造函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//Constructor[] cs = c.getConstructors();</span><br>Constructor[] cs = c.getDeclaredConstructors();<br><span class="hljs-keyword">for</span> (Constructor constructor : cs) &#123;<br>System.out.print(constructor.getName()+<span class="hljs-string">&quot;(&quot;</span>);<br><span class="hljs-comment">//获取构造函数的参数列表---&gt;得到的是参数列表的类类型</span><br>Class[] paramTypes = constructor.getParameterTypes();<br><span class="hljs-keyword">for</span> (Class class1 : paramTypes) &#123;<br>System.out.print(class1.getName()+<span class="hljs-string">&quot;,&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;)&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.reflect;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassDemo3</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>String s = <span class="hljs-string">&quot;hello&quot;</span>;<br>ClassUtil.printClassMethodMessage(s);<br><br>    Integer n1 = <span class="hljs-number">1</span>;<br>    ClassUtil.printClassMethodMessage(n1);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.reflect;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassDemo5</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>ClassUtil.printConMessage(<span class="hljs-string">&quot;hello&quot;</span>);<br>ClassUtil.printConMessage(<span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>));<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="方法反射的基本操作"><a href="#方法反射的基本操作" class="headerlink" title="方法反射的基本操作"></a>方法反射的基本操作</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.reflect;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodDemo1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>   <span class="hljs-comment">//要获取print(int ,int )方法  1.要获取一个方法就是获取类的信息，获取类的信息首先要获取类的类类型</span><br>A a1 = <span class="hljs-keyword">new</span> A();<br>Class c = a1.getClass();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 2.获取方法 名称和参数列表来决定  </span><br><span class="hljs-comment"> * getMethod获取的是public的方法</span><br><span class="hljs-comment"> * getDelcaredMethod自己声明的方法</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//Method m =  c.getMethod(&quot;print&quot;, new Class[]&#123;int.class,int.class&#125;);</span><br>    Method m = c.getMethod(<span class="hljs-string">&quot;print&quot;</span>, <span class="hljs-keyword">int</span>.class,<span class="hljs-keyword">int</span>.class);<br>    <br>    <span class="hljs-comment">//方法的反射操作  </span><br>    <span class="hljs-comment">//a1.print(10, 20);方法的反射操作是用m对象来进行方法调用 和a1.print调用的效果完全相同</span><br>        <span class="hljs-comment">//方法如果没有返回值返回null,有返回值返回具体的返回值</span><br>    <span class="hljs-comment">//Object o = m.invoke(a1,new Object[]&#123;10,20&#125;);</span><br>    Object o = m.invoke(a1, <span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br>    System.out.println(<span class="hljs-string">&quot;==================&quot;</span>);<br>    <span class="hljs-comment">//获取方法print(String,String)</span><br>            Method m1 = c.getMethod(<span class="hljs-string">&quot;print&quot;</span>,String.class,String.class);<br>            <span class="hljs-comment">//用方法进行反射操作</span><br>            <span class="hljs-comment">//a1.print(&quot;hello&quot;, &quot;WORLD&quot;);</span><br>            o = m1.invoke(a1, <span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;WORLD&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;===================&quot;</span>);<br>            <span class="hljs-comment">//Method m2 = c.getMethod(&quot;print&quot;, new Class[]&#123;&#125;);</span><br>            Method m2 = c.getMethod(<span class="hljs-string">&quot;print&quot;</span>);<br>            <span class="hljs-comment">// m2.invoke(a1, new Object[]&#123;&#125;);</span><br>            m2.invoke(a1);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125; <br>     <br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>System.out.println(a+b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(String a,String b)</span></span>&#123;<br>System.out.println(a.toUpperCase()+<span class="hljs-string">&quot;,&quot;</span>+b.toLowerCase());<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>通过反射了解集合泛型的本质</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.reflect;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodDemo4</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br><br>ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>list1.add(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-comment">//list1.add(20);错误的</span><br>Class c1 = list.getClass();<br>Class c2 = list1.getClass();<br>System.out.println(c1 == c2);<br><span class="hljs-comment">//反射的操作都是编译之后的操作</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * c1==c2结果返回true说明编译之后集合的泛型是去泛型化的</span><br><span class="hljs-comment"> * Java中集合的泛型，是防止错误输入的，只在编译阶段有效，</span><br><span class="hljs-comment"> * 绕过编译就无效了</span><br><span class="hljs-comment"> * 验证：我们可以通过方法的反射来操作，绕过编译</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">try</span> &#123;<br>Method m = c2.getMethod(<span class="hljs-string">&quot;add&quot;</span>, Object.class);<br>m.invoke(list1, <span class="hljs-number">20</span>);<span class="hljs-comment">//绕过编译操作就绕过了泛型</span><br>System.out.println(list1.size());<br>System.out.println(list1);<br><span class="hljs-comment">/*for (String string : list1) &#123;</span><br><span class="hljs-comment">System.out.println(string);</span><br><span class="hljs-comment">&#125;*/</span><span class="hljs-comment">//现在不能这样遍历</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>  e.printStackTrace();<br>&#125;<br>&#125;<br><br>&#125;<br><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java-注解</title>
    <link href="/2021/03/24/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java-%E6%B3%A8%E8%A7%A3/"/>
    <url>/2021/03/24/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java-%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h5 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h5><p>反射——全面解析Java注解 <a href="https://www.imooc.com/learn/456">https://www.imooc.com/learn/456</a></p><hr><h4 id="Java中的常见注解"><a href="#Java中的常见注解" class="headerlink" title="Java中的常见注解"></a>Java中的常见注解</h4><p>JDK自带注解</p><ul><li><p>@Override，表示当前的方法定义将覆盖超类中的方法。</p></li><li><p>@Deprecated，使用了注解为它的元素编译器将发出警告，过时被弃用的代码，不建议再使用。</p></li><li><p>@SuppressWarnings，关闭不当编译器警告信息。</p><p>  例子：@SuppressWarnings(“deprecation”)，仍然使用已经不推荐的方法</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20190409151031923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="注解分类"><a href="#注解分类" class="headerlink" title="注解分类"></a>注解分类</h4><p><img src="https://img-blog.csdnimg.cn/20190409151116246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190409151127566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p><img src="https://img-blog.csdnimg.cn/20190409151219170.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190409151719465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190409151905183.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190409152012363.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190409152127111.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190409152211808.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="注解应用实战"><a href="#注解应用实战" class="headerlink" title="注解应用实战"></a>注解应用实战</h4><p><img src="https://img-blog.csdnimg.cn/20190409152502113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190409161122387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java中的session和cookie</title>
    <link href="/2021/03/24/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%E4%B8%AD%E7%9A%84session%E5%92%8Ccookie/"/>
    <url>/2021/03/24/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%E4%B8%AD%E7%9A%84session%E5%92%8Ccookie/</url>
    
    <content type="html"><![CDATA[<h5 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h5><p>cookie是小段文本信息，在网络服务器上生成，并发给浏览器，通过使用cookie可以记录一些请求数据。流览器将cookie以key/value的形式保存到客户端的某个指定目录下。<br>在使用cookie时，应确保客户端上允许使用cookie，如果客户端禁止使用cookie的话，将导致cookie失效。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">读取cookie<br>Cookie [] cookies=request.getCookies();<br><span class="hljs-keyword">for</span>(Cookie item:cookies)<br>&#123;<br>   System.out.println(item.getName()+”:”+URLDecoder.decode(item.getValue()));<br>\\System.out.println(item.getName()+”:”+ item.getValue());<br><br>设置cookie<br>Cookie cookie=<span class="hljs-keyword">new</span> Cookie(“userName”,”pwz”);<br>response.addCookie(cookie);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果指定名称的cookie已经存在了，那么执行addCookie方法后，新添加的cookie值将会覆盖旧值。</p><p>注意<br>在向cookie保存的信息中如果包含了中文，则需要先使用java.net.URLDecoder类下的encode()方法对信息编码。而在读取这个cookie信息的时候，需要使用decode()方法对信息进行解码</p><h5 id="cookie的作用域"><a href="#cookie的作用域" class="headerlink" title="cookie的作用域"></a>cookie的作用域</h5><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">1</span>、<span class="hljs-selector-tag">setPath</span>()<br>通过<span class="hljs-selector-tag">setPath</span>可以限制<span class="hljs-selector-tag">cookies</span>的使用范围，<span class="hljs-selector-tag">cookie</span>默认的使用方范围实在它产生的目录及其目录之内的目录，产生目录外的目录中都不能使用次<span class="hljs-selector-tag">cookie</span>。<br>假设在<span class="hljs-selector-tag">tomcat</span>的<span class="hljs-selector-tag">webapp</span>目录下有两个项目<span class="hljs-selector-tag">weba</span>和<span class="hljs-selector-tag">webb</span>，<br>如果在保存<span class="hljs-selector-tag">cookie</span>时将<span class="hljs-selector-tag">setPath</span>()的参数设置为“/”那么在<span class="hljs-selector-tag">weba</span>和<span class="hljs-selector-tag">webb</span>中都能使用次<span class="hljs-selector-tag">cookie</span>;<br>如果设置为“/<span class="hljs-selector-tag">weba</span>”或者”/<span class="hljs-selector-tag">web</span>/”,那么只能在<span class="hljs-selector-tag">weba</span>下面使用；<br>如果在<span class="hljs-selector-tag">weba</span>中创建的<span class="hljs-selector-tag">cookie</span>，而<span class="hljs-selector-tag">path</span>设置为”/<span class="hljs-selector-tag">webb</span>/”那么在<span class="hljs-selector-tag">weba</span>中也无法使用，只能在<span class="hljs-selector-tag">webb</span>中使用<br><span class="hljs-selector-tag">2</span>、<span class="hljs-selector-tag">setDomain</span>()<br><span class="hljs-selector-tag">A</span>机所在的域：<span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.com</span>,<span class="hljs-selector-tag">A</span>有应用<span class="hljs-selector-tag">weba</span> <br><span class="hljs-selector-tag">B</span>机所在的域：<span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.com</span>，<span class="hljs-selector-tag">B</span>有应用<span class="hljs-selector-tag">webb</span> <br><span class="hljs-selector-tag">1</span>）在<span class="hljs-selector-tag">weba</span>下面设置<span class="hljs-selector-tag">cookie</span>的时候，增加<span class="hljs-selector-tag">cookie</span><span class="hljs-selector-class">.setDomain</span>(“.b.com”);，这样在<span class="hljs-selector-tag">webb</span>下面就可以取到<span class="hljs-selector-tag">cookie</span>。<br><br><span class="hljs-selector-tag">2</span>）输入<span class="hljs-selector-tag">url</span>访问<span class="hljs-selector-tag">webapp_b</span>的时候，必须输入域名才能解析。比如说在<span class="hljs-selector-tag">A</span>机器输入：<span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//haha.b.com:8080/webb,可以获取weba在客户端设置的cookie，而B机器访问本机的应用，输入：http://localhost:8080/webb则不可以获得cookie。</span><br><br><span class="hljs-selector-tag">3</span>）设置了<span class="hljs-selector-tag">cookie</span><span class="hljs-selector-class">.setDomain</span>(“.b.com”);，还可以在默认的<span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.com</span>下面共享<br></code></pre></div></td></tr></table></figure><h5 id="cookie的有效期"><a href="#cookie的有效期" class="headerlink" title="cookie的有效期"></a>cookie的有效期</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">1、如果没有显示设置cookie的有效期，那么cookie的有效期就是浏览器关闭后失效<br>2、如果<span class="hljs-keyword">set</span>MaxAge<span class="hljs-params">()</span>的参数为整数，那么就cookie一直到指定时候后失效，这个过程中无论浏览器是否关闭，cookie中保存的信息都会有效。<br>3、如果<span class="hljs-keyword">set</span>MaxAge<span class="hljs-params">()</span>的参数为0，那么就表示删除该cookie。<br>4、如果<span class="hljs-keyword">set</span>MaxAge<span class="hljs-params">()</span>的参数为负数，那么cookie就是临时保存，不会持久化保存到浏览器指定的目录中去。当窗口或者子窗口关闭后就会失效。<br>5、<span class="hljs-keyword">set</span>MaxAge的参数单位是秒<br></code></pre></div></td></tr></table></figure><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><p> session在网络中被称为会话，和cookie的功能类似，用于保存请求信息。用户可以通过session在引用程序的web页面之间进行跳转，使整个会话一直保存，知道浏览器关闭。但是如果一个会话长时间没有向服务器发出请求，那么这个会话会自动关闭失效。这个时间取决于服务器，例如，tomcat服务器默认为30秒，这个时间可以通过程序进行修改。<br>实际上，一个会话过程可以理解为一次打电话，通过从拿起电话开始，到挂断电话为止，在这过程中，你可以聊很多话题，甚至是重复的话题。一个会话也是</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">保存会话信息<br><span class="hljs-keyword">session</span>.setAttribute(String <span class="hljs-type">name</span>,<span class="hljs-keyword">Object</span> <span class="hljs-keyword">object</span>);<br><span class="hljs-type">name</span>是会话信息中的名字，<span class="hljs-keyword">object</span>是会话名字所代表的值。<br><br>读取会话信息<br><span class="hljs-keyword">session</span>.getAttribute(String <span class="hljs-type">name</span>);<br>点用此方法的返回值是<span class="hljs-keyword">Object</span>类型的，因此在使用之前需要对其进行类型转化。<br><br>移除指定的会话<br><span class="hljs-keyword">session</span>.removeAttribute(String <span class="hljs-type">name</span>);<br>注：如果要需要的会话名不存在，那么将会抛出异常<br><br>设置<span class="hljs-keyword">session</span>有效时间<br>在浏览器长时间没有向服务器发出请求的情况下，可以设置<span class="hljs-keyword">session</span>在多少时间后过期<br><span class="hljs-keyword">session</span>.setMaxInactiveInterval(<span class="hljs-type">int</span> <span class="hljs-type">time</span>)//单位是秒<br><br>销毁<span class="hljs-keyword">session</span><br><span class="hljs-keyword">session</span>.invalidate();<br><span class="hljs-keyword">session</span>对象销毁后，就不可以在当前请求中继续使用该<span class="hljs-keyword">session</span>对象了，如果销毁后再调用就会抛出异常。当浏览器重新发出请求后，服务器会重新创建一个<span class="hljs-keyword">session</span>对象，之前的<span class="hljs-keyword">session</span>对象失效。<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java反射的三种实现方式</title>
    <link href="/2021/03/24/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%E5%8F%8D%E5%B0%84%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <url>/2021/03/24/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%E5%8F%8D%E5%B0%84%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>Java反射的三种实现方式</p><p>Foo foo = new Foo();</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">第一种：通过Object类的getClass方法<br>Class cla = foo.getClass();<br><br>第二种：通过对象实例方法获取对象<br>Class cla = foo.class;<br><br>第三种：通过Class.forName方式<br>Class cla = Class.forName(<span class="hljs-string">&quot;xx.xx.Foo&quot;</span>);<br><br>对于有空构造函数的类 可以直接用字节码文件获取实例：<br>Object o = clazz.newInstance();　　<span class="hljs-comment">// 会调用空参构造器 如果没有则会报错</span><br><br>对于没有空的构造函数的类则需要先获取到他的构造对象 在通过该构造方法类获取实例：<br>Constroctor constroctor = clazz.getConstructor(String.class, <span class="hljs-keyword">int</span>.class); <span class="hljs-comment">// 获取构造函数 </span><br>Object obj = constroctor.newInstance(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">18</span>); <span class="hljs-comment">// 通过构造器对象的newInstance方法进行对象的初始化</span><br><br>Constroctor constroctor = clazz.getConstructors(); <span class="hljs-comment">// 获取所有的构造函数 </span><br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProgramMain</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Persons person = getInstance(<span class="hljs-string">&quot;english&quot;</span>);<br>        person.say();<br><br>        Persons person2 = getInstanceByReflector(Chinese.class);<br>        person2.say();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Persons <span class="hljs-title">getInstance</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Persons person = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">if</span> (name.equalsIgnoreCase(<span class="hljs-string">&quot;Chinese&quot;</span>)) &#123;<br>            person = <span class="hljs-keyword">new</span> Chinese();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name.equalsIgnoreCase(<span class="hljs-string">&quot;English&quot;</span>)) &#123;<br>            person = <span class="hljs-keyword">new</span> English();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;请传递正确的参数&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过反射</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> personClass</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Persons <span class="hljs-title">getInstanceByReflector</span><span class="hljs-params">(Class personClass)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Persons person = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            person = (Persons) personClass.getConstructor().newInstance();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;请传入正确的参数&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="获取构造函数"><a href="#获取构造函数" class="headerlink" title="获取构造函数"></a>获取构造函数</h5><p>1、知道构造函数精确的参数类型的</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br>Constructor c=c1.getConstructor(String.class,Integer.class);<span class="hljs-comment">//参数可以为空，根据知道的参数类型和个数来写</span><br></code></pre></div></td></tr></table></figure><p>2、不知道构造函数精确的参数类型</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br>Constructor[] constructors=c1.getConstructors();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; constructors.length; i++) &#123;<br> Class [] parameters= constructors[i].getParameterTypes();<span class="hljs-comment">//获得构造函数的参数列表</span><br> <span class="hljs-keyword">if</span>(parameters.length&lt;=<span class="hljs-number">0</span>)<br> &#123;<br> <br> System.out.println(<span class="hljs-string">&quot;一个无参的构造函数&quot;</span>);<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br> String [] typeName=<span class="hljs-keyword">new</span> String[parameters.length];<br> <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;typeName.length;j++)<br> &#123;<br> typeName[j]= parameters[j].getSimpleName();<span class="hljs-comment">//获取参数的类型名 </span><br> &#125;<br> System.out.println(String.join(<span class="hljs-string">&quot;,&quot;</span>, typeName));<br> &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="创建实例对象"><a href="#创建实例对象" class="headerlink" title="创建实例对象"></a>创建实例对象</h5><p>通过构造函数去创建，调用Constructor对象的newInstance()方法创建对象。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br>Chinese chinese=(Chinese) c1.getConstructor().newInstance();<br>chinese.say();<br></code></pre></div></td></tr></table></figure><h5 id="获取方法并执行"><a href="#获取方法并执行" class="headerlink" title="获取方法并执行"></a>获取方法并执行</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">1</span>、获取所有的非<span class="hljs-keyword">private</span>方法<br>Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br>Object chinese= c1.getConstructor().newInstance();<br>Method[] methods1= c1.getMethods();<span class="hljs-comment">//获取所有的非private方法，并且父类的方法也会获取</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;methods1.length;i++)<br>&#123;<br>Class[] parameters= methods1[i].getParameterTypes();<br><span class="hljs-keyword">if</span>(parameters.length&lt;=<span class="hljs-number">0</span>)<br>&#123;<br> System.out.println(methods1[i].getName()+<span class="hljs-string">&quot;()&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>String [] typeName=<span class="hljs-keyword">new</span> String[parameters.length];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;parameters.length;j++)<br>&#123;<br><br>typeName[j]=parameters[j].getSimpleName();<br>&#125;<br>System.out.println(methods1[i].getName()+<span class="hljs-string">&quot;(&quot;</span>+String.join(<span class="hljs-string">&quot;,&quot;</span>,typeName)+<span class="hljs-string">&quot;)&quot;</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-number">2</span>、获取所有的当前类定义的所有方法，包括私有方法<br>Method[] methods1= c1.getDeclaredMethods();<span class="hljs-comment">//获取当前类定义的所有，包括私有方法</span><br><span class="hljs-number">3</span>、获取指定方法名的方法<br>    Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br>Object chinese= c1.getConstructor().newInstance();<br>    Method setNumber=c1.getDeclaredMethod(<span class="hljs-string">&quot;setNumber&quot;</span>, Integer.class);<span class="hljs-comment">//如果方法没有参数就可以不用写，另外需要注意参数类型和定义方法的参数类型保持一致</span><br><br><span class="hljs-number">4</span>、获取父类的私有方法<br>Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br>    Class c2=c1.getSuperclass();<br>    <span class="hljs-comment">//通过c2去获取父类中的私有方法</span><br><br><span class="hljs-number">5</span>、执行方法<br>Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br>Object chinese= c1.getConstructor().newInstance();<br>    Method setNumber=c1.getDeclaredMethod(<span class="hljs-string">&quot;setNumber&quot;</span>, Integer.class);<span class="hljs-comment">//如果方法没有参数就可以不用写，另外需要注意参数类型和定义方法的参数类型保持一致</span><br>    setNumber.invoke(chinese, <span class="hljs-number">1</span>);<span class="hljs-comment">//第一个参数是实例对象，后面的参数是调用方法所需的参数</span><br></code></pre></div></td></tr></table></figure><h5 id="获取字段"><a href="#获取字段" class="headerlink" title="获取字段"></a>获取字段</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-number">1</span>、获取所有非<span class="hljs-keyword">private</span>类型的字段，包括父类的<br> Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br> Object object=c1.getConstructor().newInstance();<br> Field [] fields=  c1.getFields();<span class="hljs-comment">//或者所有的非private类型的字段，包括父类的</span><br> <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;fields.length;i++)<br> &#123;<br> System.out.println(fields[i].getName());<br> &#125;<br> <br><span class="hljs-number">2</span>、获取当前类所有字段，包括私有的<br> Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br> Object object=c1.getConstructor().newInstance();<br> Field [] fields=  c1.getDeclaredFields();<span class="hljs-comment">//获取当前类中所有的字段</span><br> <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;fields.length;i++)<br> &#123;<br> System.out.println(fields[i].getName());<br> &#125;<br> <br><span class="hljs-number">3</span>、获取父类的所有字段，包括私有的<br><br>    Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br>    Class c2=c1.getSuperclass();<br>    <span class="hljs-comment">//通过c2去获取父类中的私有字段</span><br><span class="hljs-number">4</span>、获取指定的字段<br> Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br> Object object=c1.getConstructor().newInstance();<br> Field field=  c1.getDeclaredField(<span class="hljs-string">&quot;Age&quot;</span>);<br><br><span class="hljs-number">5</span>、使用<br> Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br> Object object1=c1.getConstructor().newInstance();<br> Field field=  c1.getDeclaredField(<span class="hljs-string">&quot;Age&quot;</span>);<br> field.setAccessible(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//如果字段是私有的，需要先这是允许访问</span><br> <span class="hljs-comment">//取值</span><br> Object  object2=field.get(object1);<br> System.out.println(object2);<br> <span class="hljs-comment">//赋值</span><br> field.set(object1, <span class="hljs-number">21</span>);<br> <span class="hljs-comment">//取值</span><br> Object  object3=field.get(object1);<br> System.out.println(object3);<br><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java序列化</title>
    <link href="/2021/03/24/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2021/03/24/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p>Java 中提供了一种对象持久化保存的技术。常规的对象，在程序结束后就会被回收处理，如果想要对象能被持久化保存下来方便下次使用，就需要使用到对象的序列化和反序列化。<br>序列化成功的条件</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua"><span class="hljs-number">1</span>、该类必须实现java.<span class="hljs-built_in">io</span>.Serializable接口<br><span class="hljs-number">2</span>、类的所有字段都必须是可序列化的（属性类型是实现类java.<span class="hljs-built_in">io</span>.Serializable接口的）；<br></code></pre></div></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs aspectj">序列化是排除某个字段<br>只需要用<span class="hljs-keyword">transient</span>关键字修饰这个字段。<br></code></pre></div></td></tr></table></figure><h5 id="序列化-1"><a href="#序列化-1" class="headerlink" title="序列化"></a>序列化</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pers.pwz.cmdemo;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProgramMain</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>  </span>&#123;<br>Persons p=<span class="hljs-keyword">new</span> Persons();<br>p.Age=<span class="hljs-number">10</span>;<br>p.Name=<span class="hljs-string">&quot;pwz&quot;</span>;<br>p.Height=<span class="hljs-number">170</span>;<br>p.Weight=<span class="hljs-number">60</span>;<br><span class="hljs-keyword">try</span> &#123;<br>File myFile=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;.\\temp&quot;</span>);<br><span class="hljs-keyword">if</span>(!myFile.exists())<br><br>&#123;<br>myFile.mkdirs();<br>&#125;<br><br>FileOutputStream fo=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;.\\temp\\persons.ser&quot;</span>);<br>ObjectOutputStream oo = <span class="hljs-keyword">new</span> ObjectOutputStream(fo);<br>oo.writeObject(p);<br>oo.close();<br>fo.close();<br><br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><br><br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Persons</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span>//这是个标记接口</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Age;<br><span class="hljs-keyword">public</span> String Name;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> Height;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> Weight;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>System.out.println(Name+<span class="hljs-string">&quot;你好&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pers.pwz.cmdemo;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProgramMain</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>  </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>FileInputStream fo=<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;.\\temp\\persons.ser&quot;</span>);<br>ObjectInputStream oo = <span class="hljs-keyword">new</span> ObjectInputStream(fo);<br>Persons p=(Persons) oo.readObject();<br>p.sayHello();<br>oo.close();<br>fo.close();<br><br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><br><br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Persons</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span>//这是个标记接口</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Age;<br><span class="hljs-keyword">public</span> String Name;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> Height;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> Weight;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>System.out.println(Name+<span class="hljs-string">&quot;你好&quot;</span>);<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nginx的中间件架构-HTTPS服务</title>
    <link href="/2021/03/24/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-HTTPS%E6%9C%8D%E5%8A%A1/"/>
    <url>/2021/03/24/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-HTTPS%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h4 id="secure-link-module"><a href="#secure-link-module" class="headerlink" title="secure_link_module"></a>secure_link_module</h4><p><img src="https://img-blog.csdnimg.cn/20190210115918944.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/201902101159349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190210120132744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="geoip-module"><a href="#geoip-module" class="headerlink" title="geoip_module"></a>geoip_module</h4><p><img src="https://img-blog.csdnimg.cn/20190210122757753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="http-geoip-module使用场景"><a href="#http-geoip-module使用场景" class="headerlink" title="http_geoip_module使用场景"></a>http_geoip_module使用场景</h4><p><img src="https://img-blog.csdnimg.cn/20190210122938312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190210123713696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="生成秘钥和CA证书"><a href="#生成秘钥和CA证书" class="headerlink" title="生成秘钥和CA证书"></a>生成秘钥和CA证书</h4><p><img src="https://img-blog.csdnimg.cn/20190210152829845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nginx的中间件架构-Lua开发</title>
    <link href="/2021/03/24/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-Lua%E5%BC%80%E5%8F%91/"/>
    <url>/2021/03/24/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-Lua%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h4 id="Lua介绍"><a href="#Lua介绍" class="headerlink" title="Lua介绍"></a>Lua介绍</h4><p><img src="https://img-blog.csdnimg.cn/20190210160956312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190210161027419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190210161049801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190210161115210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190210161258232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190210161322352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="nginx调用Lua指令"><a href="#nginx调用Lua指令" class="headerlink" title="nginx调用Lua指令"></a>nginx调用Lua指令</h4><p><img src="https://img-blog.csdnimg.cn/20190210163932385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="nginx-lua-api（lua调用nginx）"><a href="#nginx-lua-api（lua调用nginx）" class="headerlink" title="nginx lua api（lua调用nginx）"></a>nginx lua api（lua调用nginx）</h4><p><img src="https://img-blog.csdnimg.cn/20190210164213535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nginx的中间件架构-web静态资源</title>
    <link href="/2021/03/24/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-web%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    <url>/2021/03/24/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-web%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h4 id="http-x-forwarded-for"><a href="#http-x-forwarded-for" class="headerlink" title="http_x_forwarded_for"></a>http_x_forwarded_for</h4><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">http_x_forwarded_for = Client <span class="hljs-built_in">IP</span>, Proxy1 <span class="hljs-built_in">IP</span>, Client2 <span class="hljs-built_in">IP</span>, Client3 <span class="hljs-built_in">IP</span>...<br></code></pre></div></td></tr></table></figure><h4 id="http-auth-basic-module配置"><a href="#http-auth-basic-module配置" class="headerlink" title="http_auth_basic_module配置"></a>http_auth_basic_module配置</h4><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">Syntax:auth_basic string | <span class="hljs-keyword">off</span>;<br><span class="hljs-keyword">Default</span>:auth_basic <span class="hljs-keyword">off</span>;<br>Context:http, <span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>, limit_except<br> <span class="hljs-comment">------</span><br>Syntax:auth_basic_user_file file;<br><span class="hljs-keyword">Default</span>:—<br>Context:http, <span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>, limit_except<br> <span class="hljs-comment">------</span><br> <span class="hljs-keyword">location</span> ~ ^/<span class="hljs-keyword">admin</span>.html &#123;<br>root/opt/app/code;<br>auth_basic &quot;Auth access test ! imput your password !&quot;;<br>auth_basic_user_file/etc/nginx/auth_conf;  // auth_conf文件存放已经保存的用户名和密码<br><span class="hljs-keyword">index</span><span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br>&#125;<br><br>http_auth_basic_module的局限性：<br><span class="hljs-number">1</span>、用户信息依赖文件<br><span class="hljs-number">2</span>、操作管理机械，效率低下<br><br>解决方案：<br><span class="hljs-number">1</span>、nginx结合Lua实现高效验证<br><span class="hljs-number">2</span>、nginx和LDAP打通，利用nginx-auth-ladp模块<br></code></pre></div></td></tr></table></figure><h4 id="Nginx作为静态资源web服务-配置语法"><a href="#Nginx作为静态资源web服务-配置语法" class="headerlink" title="Nginx作为静态资源web服务_配置语法"></a>Nginx作为静态资源web服务_配置语法</h4><ul><li>   文件读取<figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">Syntax:sendfile <span class="hljs-keyword">on</span> | <span class="hljs-keyword">off</span>;<br><span class="hljs-keyword">Default</span>: sendfile <span class="hljs-keyword">off</span>;<br>Context:http, <span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>, <span class="hljs-keyword">if</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">location</span><br>引读：-<span class="hljs-keyword">with</span>-file-aio 异步文件读取<br></code></pre></div></td></tr></table></figure></li><li>tcp_nopush<figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">Syntax:</span>tcp_nopush <span class="hljs-keyword">on</span> | <span class="hljs-keyword">off</span>;<br><span class="hljs-symbol">Default:</span> tcp_nopush <span class="hljs-keyword">off</span>;<br><span class="hljs-symbol">Context:</span>http, server, location;<br>作用：sendfile开启的情况下，提高网络包的传输效率<br></code></pre></div></td></tr></table></figure></li><li>tcp_nodelay</li></ul><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">Syntax:</span>tcp_nodelay <span class="hljs-keyword">on</span> | <span class="hljs-keyword">off</span>;<br><span class="hljs-symbol">Default:</span> tcp_nodelay <span class="hljs-keyword">off</span>;<br><span class="hljs-symbol">Context:</span>http, server, location;<br>作用：keepalive连接下，提高网络包的额传输实时性<br></code></pre></div></td></tr></table></figure><ul><li>压缩</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">压缩<br>Syntax:gzip <span class="hljs-keyword">on</span> | <span class="hljs-keyword">off</span>;<br><span class="hljs-keyword">Default</span>: gzip <span class="hljs-keyword">off</span>;<br>Context:http, <span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>, <span class="hljs-keyword">if</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">location</span>;<br>作用：压缩传输<br><span class="hljs-comment">------</span><br>压缩比<br>Syntax:gzip_comp_level <span class="hljs-keyword">level</span>;<br><span class="hljs-keyword">Default</span>: gzip_comp_level <span class="hljs-number">1</span>;<br>Context:http, <span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>;<br><span class="hljs-comment">------</span><br>压缩版本<br>Syntax:gzip_http_version <span class="hljs-number">1.0</span> | <span class="hljs-number">1.1</span>;<br><span class="hljs-keyword">Default</span>: gzip_http_version <span class="hljs-number">1.1</span>;<br>Context:http, <span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>;<br><span class="hljs-comment">------</span><br>拓展nginx压缩模块<br>http_gzip_static_module - 预读gzip功能<br>http_gunzip_module - 引用支持gunzip的压缩格式<br></code></pre></div></td></tr></table></figure><h4 id="expires"><a href="#expires" class="headerlink" title="expires"></a>expires</h4><p>添加 Cache-Control、Expires头</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">Syntax:expires [modified] <span class="hljs-type">time</span>;<br>expires eposh | max | <span class="hljs-keyword">off</span>;<br><span class="hljs-keyword">Default</span>: expires <span class="hljs-keyword">off</span>;<br>Context:http, <span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>, <span class="hljs-keyword">if</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">location</span>;<br></code></pre></div></td></tr></table></figure><h4 id="跨域访问"><a href="#跨域访问" class="headerlink" title="跨域访问"></a>跨域访问</h4><p>Access-Control-Allow-Origin</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">Syntax:add_header <span class="hljs-type">name</span> <span class="hljs-keyword">value</span> [<span class="hljs-keyword">always</span>];<br><span class="hljs-keyword">Default</span>: -;<br>Context:http, <span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>, <span class="hljs-keyword">if</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">location</span>;<br></code></pre></div></td></tr></table></figure><h4 id="防盗链-http-refer"><a href="#防盗链-http-refer" class="headerlink" title="防盗链 http_refer"></a>防盗链 http_refer</h4><figure class="highlight lasso"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lasso">Syntax:valid_referers <span class="hljs-literal">none</span> | block | server_names | <span class="hljs-built_in">string</span><span class="hljs-params">...</span>;<br>Default: -;<br>Context:http, server, location;<br>------<br>valid_referers <span class="hljs-literal">none</span> blocked <span class="hljs-number">116.62</span><span class="hljs-number">.103</span><span class="hljs-number">.228</span>;<br><span class="hljs-keyword">if</span> ($valid_referer) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">403</span>;<br>&#125;<br>root /opt/app/code/images;<br>示例<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nginx的中间件架构-代理服务</title>
    <link href="/2021/03/24/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/"/>
    <url>/2021/03/24/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h4 id="代理区别"><a href="#代理区别" class="headerlink" title="代理区别"></a>代理区别</h4><p>正向代理代理的对象是客户端<br>反向代理代理的对象是服务端</p><h4 id="proxy-pass"><a href="#proxy-pass" class="headerlink" title="proxy_pass"></a>proxy_pass</h4><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">配置语法<br>Syntax:proxy_pass URL;<br>Default:-;<br>Context:location, <span class="hljs-keyword">if</span> <span class="hljs-keyword">in</span> location, limit_except;<br>------<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/uri/</span><br>https:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/uri/</span><br><br></code></pre></div></td></tr></table></figure><h4 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h4><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">Syntax:</span>proxy_buffering <span class="hljs-keyword">on</span> | <span class="hljs-keyword">off</span>;<br><span class="hljs-symbol">Default:</span>proxy_buffering <span class="hljs-keyword">on</span>;<br><span class="hljs-symbol">Context:</span>http, server, location;<br>拓展： proxy_buffer_size, proxy_buffers, proxy_busy_buffers_size<br></code></pre></div></td></tr></table></figure><h4 id="跳转重定向"><a href="#跳转重定向" class="headerlink" title="跳转重定向"></a>跳转重定向</h4><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">Syntax:</span>proxy_redirect <span class="hljs-keyword">default</span>; proxy_redirect <span class="hljs-keyword">off</span>; proxy_redirect redirect replacement;<br><span class="hljs-symbol">Default:</span>proxy_redirect ;<br><span class="hljs-symbol">Context:</span>server, location;<br></code></pre></div></td></tr></table></figure><h4 id="头信息"><a href="#头信息" class="headerlink" title="头信息"></a>头信息</h4><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss">Syntax:proxy_set_header field value;<br>Default:proxy_set_header Host <span class="hljs-variable">$proxy_host</span>;<br>proxy_set_header Connection close;<br>Context:server, location;<br>扩展：proxy_hide_header, proxy_set_body<br></code></pre></div></td></tr></table></figure><h4 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h4><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">Syntax:proxy_connect_timeout <span class="hljs-type">time</span>;<br><span class="hljs-keyword">Default</span>:proxy_connect_timeout <span class="hljs-number">60</span>s;<br>Context:<span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>;<br>扩展：proxy_read_timeout, proxy_send_timeout  <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nginx的中间件架构-性能优化</title>
    <link href="/2021/03/24/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2021/03/24/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h4 id="location匹配优先级"><a href="#location匹配优先级" class="headerlink" title="location匹配优先级"></a>location匹配优先级</h4><p> ~ 区分大小写，~~*不区分大小写<br><img src="https://img-blog.csdnimg.cn/20190210204325483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="try-files"><a href="#try-files" class="headerlink" title="try_files"></a>try_files</h4><p>场景：用于文件缓存<br><img src="https://img-blog.csdnimg.cn/20190210205237263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="root和alias的区别"><a href="#root和alias的区别" class="headerlink" title="root和alias的区别"></a>root和alias的区别</h4><p><img src="https://img-blog.csdnimg.cn/20190210205600926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190210205627916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="传递用户的真实ip"><a href="#传递用户的真实ip" class="headerlink" title="传递用户的真实ip"></a>传递用户的真实ip</h4><p>在代理1处直接获取用户的ip，然后通过层层代理透传到后端<br><img src="https://img-blog.csdnimg.cn/20190210210042226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="其他常见错误"><a href="#其他常见错误" class="headerlink" title="其他常见错误"></a>其他常见错误</h4><p><img src="https://img-blog.csdnimg.cn/20190210210327967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="文件句柄优化"><a href="#文件句柄优化" class="headerlink" title="文件句柄优化"></a>文件句柄优化</h4><p><img src="https://img-blog.csdnimg.cn/20190210213216549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 针对用户进行修改<br> <img src="https://img-blog.csdnimg.cn/20190210213355529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 针对进程限制<br> <img src="https://img-blog.csdnimg.cn/20190210213510966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="cpu亲和绑定"><a href="#cpu亲和绑定" class="headerlink" title="cpu亲和绑定"></a>cpu亲和绑定</h4><p><img src="https://img-blog.csdnimg.cn/20190211223904157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="gzip兼容"><a href="#gzip兼容" class="headerlink" title="gzip兼容"></a>gzip兼容</h4><p><img src="https://img-blog.csdnimg.cn/20190211225553944.png" alt="在这里插入图片描述"></p><h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><p><img src="https://img-blog.csdnimg.cn/20190211230042274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190211230546667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nginx的中间件架构-负载均衡</title>
    <link href="/2021/03/24/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <url>/2021/03/24/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    
    <content type="html"><![CDATA[<h4 id="upstream"><a href="#upstream" class="headerlink" title="upstream"></a>upstream</h4><p><img src="https://img-blog.csdnimg.cn/20190208163713131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="负载均衡调度状态"><a href="#负载均衡调度状态" class="headerlink" title="负载均衡调度状态"></a>负载均衡调度状态</h4><p><img src="https://img-blog.csdnimg.cn/20190208163801717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h4><p><img src="https://img-blog.csdnimg.cn/2019020816472012.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="url-hash"><a href="#url-hash" class="headerlink" title="url_hash"></a>url_hash</h4><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss">Syntax:hash key [consistent];<br>Default:-;<br>Context:upstream;<br>this directive appeared in version 1<span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.2</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190208165904559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="代理缓存"><a href="#代理缓存" class="headerlink" title="代理缓存"></a>代理缓存</h4><p><img src="https://img-blog.csdnimg.cn/20190208170329684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="proxy-cache"><a href="#proxy-cache" class="headerlink" title="proxy_cache"></a>proxy_cache</h4><ul><li>完整<br><img src="https://img-blog.csdnimg.cn/20190208170515936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>部分</li></ul><p><img src="https://img-blog.csdnimg.cn/2019020817072612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="缓存过期周期"><a href="#缓存过期周期" class="headerlink" title="缓存过期周期"></a>缓存过期周期</h4><p><img src="https://img-blog.csdnimg.cn/20190208170807576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="缓存的维度"><a href="#缓存的维度" class="headerlink" title="缓存的维度"></a>缓存的维度</h4><p><img src="https://img-blog.csdnimg.cn/20190208170844518.png" alt="在这里插入图片描述"></p><h4 id="如何清除指定缓存"><a href="#如何清除指定缓存" class="headerlink" title="如何清除指定缓存"></a>如何清除指定缓存</h4><p><img src="https://img-blog.csdnimg.cn/20190208171702548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="如何让指定页面不进行缓存"><a href="#如何让指定页面不进行缓存" class="headerlink" title="如何让指定页面不进行缓存"></a>如何让指定页面不进行缓存</h4><p><img src="https://img-blog.csdnimg.cn/20190208171754843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="大文件分片请求"><a href="#大文件分片请求" class="headerlink" title="大文件分片请求"></a>大文件分片请求</h4><p><img src="https://img-blog.csdnimg.cn/20190208172159437.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190208172303566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190208172232265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="rewrite规则"><a href="#rewrite规则" class="headerlink" title="rewrite规则"></a>rewrite规则</h4><ul><li>这里的规则可以用于写一个维护页面<br><img src="https://img-blog.csdnimg.cn/20190209222155472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h4>beak不会建立新的请求，last还会建立一个新的请求过来。向某个域名进行请求，301请求一次后再次请求不会经过服务器，302请求一次后再次请求还需求经过服务器<br><img src="https://img-blog.csdnimg.cn/20190209223509646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="rewrite规则优先级"><a href="#rewrite规则优先级" class="headerlink" title="rewrite规则优先级"></a>rewrite规则优先级</h4><img src="https://img-blog.csdnimg.cn/20190209225518691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019020922562388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Laravel - DB - facade实现CURD</title>
    <link href="/2021/03/24/PHP/Laravel/Laravel%20-%20DB%20-%20facade%E5%AE%9E%E7%8E%B0CURD/"/>
    <url>/2021/03/24/PHP/Laravel/Laravel%20-%20DB%20-%20facade%E5%AE%9E%E7%8E%B0CURD/</url>
    
    <content type="html"><![CDATA[<p>新建的数据表SQL</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> students(<br>    `id` <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    `age` TINYINT UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    `sex` TINYINT UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">10</span> COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>,<br>    `created_at` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> COMMENT <span class="hljs-string">&#x27;新增时间&#x27;</span>,<br>    `updated_at` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span><br>)ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>UTF8 AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">1001</span> COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;学生表&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>在控制器中实现基本的CURD</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">DB</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>    <span class="hljs-comment">//查询操作</span><br>        <span class="hljs-variable">$student</span> = DB::select(<span class="hljs-string">&#x27;select * from student&#x27;</span>);<br>        var_dump(<span class="hljs-variable">$student</span>);<br><br><span class="hljs-comment">//插入操作</span><br>        <span class="hljs-variable">$bool</span> = DB::insert(<span class="hljs-string">&#x27;insert into student (name, age) values (?, ?)&#x27;</span>,<br>            [<span class="hljs-string">&#x27;imooc&#x27;</span>, <span class="hljs-number">19</span>]);<br>        var_dump(<span class="hljs-variable">$bool</span>);<br><br><span class="hljs-comment">//更新操作</span><br>        <span class="hljs-variable">$num</span> = DB::update(<span class="hljs-string">&#x27;update student set age = ? where name = ?&#x27;</span>,<br>            [<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;wfk&#x27;</span>]);<br>        var_dump(<span class="hljs-variable">$num</span>);<br><br><span class="hljs-comment">//查询操作</span><br>        <span class="hljs-variable">$student</span> = DB::select(<span class="hljs-string">&#x27;select * from student where id &gt; ?&#x27;</span>,<br>            [<span class="hljs-number">1001</span>]);<br>        var_dump(<span class="hljs-variable">$student</span>);<br>        dd(<span class="hljs-variable">$student</span>);<br><br><span class="hljs-comment">//删除操作</span><br>        <span class="hljs-variable">$num</span> = DB::delete(<span class="hljs-string">&#x27;delete from student where id &gt; ?&#x27;</span>, [<span class="hljs-number">1001</span>]);<br>        var_dump(<span class="hljs-variable">$num</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Laravel - Eloquent ORM数据处理</title>
    <link href="/2021/03/24/PHP/Laravel/Laravel%20-%20Eloquent%20ORM%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <url>/2021/03/24/PHP/Laravel/Laravel%20-%20Eloquent%20ORM%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>#Laravel - Eloquent ORM数据处理</p><ul><li>将数据库和Model进行绑定</li></ul><figure class="highlight php-template"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php-template"><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><br><span class="php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;</span><br><br><span class="php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Model</span>;</span><br><br><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span></span><br><span class="php">&#123;</span><br><span class="php">    <span class="hljs-comment">// 指定表名</span></span><br><span class="php">    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;student&#x27;</span>;</span><br><br><span class="php">    <span class="hljs-comment">// 指定id</span></span><br><span class="php">    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$primaryKey</span> = <span class="hljs-string">&#x27;id&#x27;</span>;</span><br><br><span class="php">    <span class="hljs-comment">// 指定允许批量赋值的字段</span></span><br><span class="php">    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$fillable</span> = [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>];</span><br><br><span class="php">    <span class="hljs-comment">// 指定不允许批量赋值的字段</span></span><br><span class="php">    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$guarded</span> = [];</span><br><br><span class="php">    <span class="hljs-comment">//自动维护时间戳</span></span><br><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$timestamp</span> = <span class="hljs-literal">true</span>;</span><br><br><span class="php">    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDateFormat</span>(<span class="hljs-params"></span>)</span></span><br><span class="php">    &#123;</span><br><span class="php">        <span class="hljs-keyword">return</span> time();</span><br><span class="php">    &#125;</span><br><br><span class="php">    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asDateTime</span>(<span class="hljs-params"><span class="hljs-variable">$val</span></span>)</span></span><br><span class="php">    &#123;</span><br><span class="php">        <span class="hljs-keyword">return</span> <span class="hljs-variable">$val</span>;</span><br><span class="php">    &#125;</span><br><span class="php">&#125;</span><br></code></pre></div></td></tr></table></figure><p> <strong>1. 使用模型查询数据</strong></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">orm1</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//all()</span><br>    <span class="hljs-variable">$student</span> = Student::all();<br>    dd(<span class="hljs-variable">$student</span>);<br><br>    <span class="hljs-comment">//find()</span><br>    Student::find(<span class="hljs-number">1001</span>);<br>    dd(<span class="hljs-variable">$student</span>);<br><br>    <span class="hljs-comment">//findOrFail()</span><br>    <span class="hljs-variable">$student</span> = Student::findOrFail(<span class="hljs-number">1001</span>);<br>    dd(<span class="hljs-variable">$student</span>);<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>2.使用模型新增数据</strong></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">orm2</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//使用模型新增数据</span><br>    <span class="hljs-variable">$student</span> = <span class="hljs-keyword">new</span> Student();<br>    <span class="hljs-variable">$student</span>-&gt;name = <span class="hljs-string">&#x27;sean1&#x27;</span>;<br>    <span class="hljs-variable">$student</span>-&gt;age = <span class="hljs-number">19</span>;<br>    <span class="hljs-variable">$bool</span> = <span class="hljs-variable">$student</span>-&gt;save();<br>    dd(<span class="hljs-variable">$bool</span>);<br><br>    <span class="hljs-variable">$student</span> = Student::find(<span class="hljs-number">1012</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$student</span>-&gt;created_at;<br>    <span class="hljs-keyword">echo</span> date(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>);<br><br>    <span class="hljs-comment">//使用模型的Create()方法新增数据</span><br>    <span class="hljs-variable">$student</span> = Student::create(<br>        [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;imooc&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">18</span>]<br>    );<br>    dd(<span class="hljs-variable">$student</span>);<br><br>    <span class="hljs-comment">//firstOrCreate()</span><br>    <span class="hljs-variable">$student</span> = Student::firstOrCreate(<br>        [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;imoocs&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">18</span>]<br>    );<br>    dd(<span class="hljs-variable">$student</span>);<br><br>    <span class="hljs-comment">//firstOrNew()</span><br>    <span class="hljs-variable">$student</span> = Student::firstOrNew(<br>        [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;imoocss&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">18</span>]<br>    );<br>    <span class="hljs-variable">$bool</span> = <span class="hljs-variable">$student</span>-&gt;save();<br>    dd(<span class="hljs-variable">$student</span>);<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>3.通过模型更新数据</strong></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">orm3</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//通过模型更新数据</span><br>    <span class="hljs-variable">$student</span> = Student::find(<span class="hljs-number">1014</span>);<br>    <span class="hljs-variable">$student</span>-&gt;name = <span class="hljs-string">&#x27;kitty&#x27;</span>;<br>    <span class="hljs-variable">$bool</span> = <span class="hljs-variable">$student</span>-&gt;save();<br>    var_dump(<span class="hljs-variable">$bool</span>);<br><br>    <span class="hljs-variable">$sum</span> = Student::where(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-number">1013</span>)-&gt;update(<br>        [<span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">32</span>]<br>    );<br>    var_dump(<span class="hljs-variable">$sum</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>4.通过模型删除数据</strong></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">orm4</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//通过主键查找</span><br>    <span class="hljs-variable">$bool</span> = Student::find(<span class="hljs-number">1005</span>)-&gt;delete();<br>    dd(<span class="hljs-variable">$bool</span>);<br><br>    <span class="hljs-comment">//通过主键删除税数据</span><br>    <span class="hljs-variable">$num</span> = Student::detroy(<span class="hljs-number">1013</span>);<br>    <span class="hljs-variable">$num</span> = Student::detroy(<span class="hljs-number">1013</span>, <span class="hljs-number">1014</span>);<br>    <span class="hljs-variable">$num</span> = Student::detroy([<span class="hljs-number">1013</span>,<span class="hljs-number">1014</span>]);<br>    var_dump(<span class="hljs-variable">$num</span>);<br><br>    <span class="hljs-comment">//通过where条件删除数据</span><br>    <span class="hljs-variable">$num</span> = Student::where(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-string">&#x27;1007&#x27;</span>)-&gt;delete();<br>    var_dump(<span class="hljs-variable">$num</span>);<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Laravel collecte break continue</title>
    <link href="/2021/03/24/PHP/Laravel/Laravel%20collecte%20break%20continue/"/>
    <url>/2021/03/24/PHP/Laravel/Laravel%20collecte%20break%20continue/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="typora-root-url-images"><a href="#typora-root-url-images" class="headerlink" title="typora-root-url: ../images"></a>typora-root-url: ../images</h2><p><a href="https://editor.csdn.net/md/?articleId=114985626">Laravel collecte break continue</a></p><blockquote><p>背景： Laravel框架中循环我们都推荐使用 collecte 进行循环，但是如果我们想要在循环中<br>break 或者 continue，直接break或者continue，语法层面会直接报错，那么怎么才能实现上述所要的效果呢。其实在循环中 <code>return</code>的效果就类似与<code>break</code>，而 <code>return false</code> 的效果就类似于 <code>continue</code></p></blockquote><p>测试demo如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MohuaniSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Run the database seeds.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;collectContinue();<br>        <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-string">&quot;--------------&quot;</span>);<br>        <span class="hljs-keyword">$this</span>-&gt;collectBreak();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">collectContinue</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$arrList</span> = [<br>            <span class="hljs-string">&quot;a&quot;</span> =&gt; <span class="hljs-string">&quot;A&quot;</span>,<br>            <span class="hljs-string">&quot;b&quot;</span> =&gt; <span class="hljs-string">&quot;B&quot;</span>,<br>            <span class="hljs-string">&quot;c&quot;</span> =&gt; <span class="hljs-string">&quot;C&quot;</span>,<br>        ];<br><br>        <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-number">111</span>);<br>        collect(<span class="hljs-variable">$arrList</span>)-&gt;each(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$arr</span></span>) </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-number">222</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$arr</span> == <span class="hljs-string">&quot;b&quot;</span>) &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-number">333</span>);<br>                <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 跳出本次循环，类似continue</span><br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-number">444</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">collectBreak</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$arrList</span> = [<br>            <span class="hljs-string">&quot;a&quot;</span> =&gt; <span class="hljs-string">&quot;A&quot;</span>,<br>            <span class="hljs-string">&quot;b&quot;</span> =&gt; <span class="hljs-string">&quot;B&quot;</span>,<br>            <span class="hljs-string">&quot;c&quot;</span> =&gt; <span class="hljs-string">&quot;C&quot;</span>,<br>        ];<br><br>        <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-number">111</span>);<br>        collect(<span class="hljs-variable">$arrList</span>)-&gt;each(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$arr</span></span>) </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-number">222</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$arr</span> == <span class="hljs-string">&quot;b&quot;</span>) &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-number">333</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 跳出所有循环，类似break</span><br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-number">444</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><p>运行seeder</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">php artisan  db:seed  --class=MohuaniSeeder<br></code></pre></div></td></tr></table></figure><p>结果：</p><p><img src="../images/20210318194853117.png" alt="20210318194853117"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Laravel 查询构造器的使用（一）</title>
    <link href="/2021/03/24/PHP/Laravel/Laravel%20%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/03/24/PHP/Laravel/Laravel%20%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>使用查询构造器对数据库的 增 - 删 - 改 操作</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//使用查询构造器新增数据</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query1</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">   </span>&#123;<br>       <span class="hljs-variable">$bool</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;insert(<br>           [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;mohuani&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">19</span>]<br>       );<br>       var_dump(<span class="hljs-variable">$bool</span>);<br><br>       <span class="hljs-variable">$id</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;insertGetId(<br>           [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;sean&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">18</span>]<br>       );<br>       var_dump(<span class="hljs-variable">$id</span>);<br><br><br>       <span class="hljs-variable">$id</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;insert([<br>           [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;name1&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">21</span>],<br>           [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;name2&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">22</span>]<br>       ]);<br>       var_dump(<span class="hljs-variable">$id</span>);<br><br>   &#125;<br><br><br>   <span class="hljs-comment">//使用查询构造器更新数据</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query2</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">   </span>&#123;<br>       <span class="hljs-variable">$sum</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>           -&gt;where(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-number">1001</span>)<br>           -&gt;update([<span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">30</span>]);<br>       var_dump(<span class="hljs-variable">$sum</span>);<br><br>       <span class="hljs-comment">//实现自增</span><br>       <span class="hljs-variable">$sum</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;increment(<span class="hljs-string">&#x27;age&#x27;</span>);<br>       <span class="hljs-variable">$sum</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;increment(<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-number">3</span>);<br><br>       <span class="hljs-comment">//实现自减</span><br>       <span class="hljs-variable">$sum</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;decrement(<span class="hljs-string">&#x27;age&#x27;</span>);<br>       <span class="hljs-variable">$sum</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;decrement(<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-number">3</span>);<br><br>       <span class="hljs-comment">//使用where条件更新</span><br>       <span class="hljs-variable">$num</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>           -&gt;where(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-number">1004</span>)<br>           -&gt;decrement(<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-number">3</span>);<br>       var_dump(<span class="hljs-variable">$num</span>);<br><br>       <span class="hljs-comment">//使用where条件更新</span><br>       <span class="hljs-variable">$num</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>           -&gt;where(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-number">1004</span>)<br>           -&gt;decrement(<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-number">3</span>, [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;iimooc&#x27;</span>]);<br>       var_dump(<span class="hljs-variable">$num</span>);<br>   &#125;<br><br>   <span class="hljs-comment">//使用查询构造器删除数据</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query3</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">   </span>&#123;<br>       <span class="hljs-variable">$num</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>           -&gt;where(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-number">1008</span>)<br>           -&gt;delete();<br>       var_dump(<span class="hljs-variable">$num</span>);<br><br>       <span class="hljs-variable">$num</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>           -&gt;where(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;&gt;=&#x27;</span>, <span class="hljs-number">1008</span>)<br>           -&gt;delete();<br>       var_dump(<span class="hljs-variable">$num</span>);<br><br>       DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;truncate();<br>   &#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Laravel 查询构造器的使用（三）</title>
    <link href="/2021/03/24/PHP/Laravel/Laravel%20%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/03/24/PHP/Laravel/Laravel%20%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>查询构造器中的构造函数</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//聚合函数</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query5</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">   </span>&#123;<br>       <span class="hljs-variable">$num</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;count();<br>       var_dump(<span class="hljs-variable">$num</span>);<br><br>       <span class="hljs-variable">$max</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;max(<span class="hljs-string">&#x27;age&#x27;</span>);<br>       var_dump(<span class="hljs-variable">$max</span>);<br><br>       <span class="hljs-variable">$min</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;min(<span class="hljs-string">&#x27;age&#x27;</span>);<br>       var_dump(<span class="hljs-variable">$min</span>);<br><br>       <span class="hljs-variable">$avg</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;avg(<span class="hljs-string">&#x27;age&#x27;</span>);<br>       var_dump(<span class="hljs-variable">$avg</span>);<br><br>       <span class="hljs-variable">$sum</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;sum(<span class="hljs-string">&#x27;age&#x27;</span>);<br>       var_dump(<span class="hljs-variable">$sum</span>);<br>   &#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Laravel 查询构造器的使用（二）</title>
    <link href="/2021/03/24/PHP/Laravel/Laravel%20%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/03/24/PHP/Laravel/Laravel%20%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>使用查询构造器对数据库的 查询 操作</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//使用查询构造器查询数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query4</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//get()取出所有的数据</span><br>        <span class="hljs-variable">$student</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;get();<br>        dd(<span class="hljs-variable">$student</span>);<br><br>        <span class="hljs-comment">//first()取出结果集中的第一条数据</span><br>        <span class="hljs-variable">$student</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;first();<br>        dd(<span class="hljs-variable">$student</span>);<br><br>        <span class="hljs-variable">$student</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>            -&gt;orderBy(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>)<br>            -&gt;first();<br>        dd(<span class="hljs-variable">$student</span>);<br>        <br>        <span class="hljs-comment">//单个where()条件</span><br>        <span class="hljs-variable">$student</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>            -&gt;where(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;&gt;=&#x27;</span>, <span class="hljs-number">1002</span>)<br>            -&gt;get();<br>        dd(<span class="hljs-variable">$student</span>);<br><br>        <span class="hljs-comment">//多个whereRaw()条件</span><br>        <span class="hljs-variable">$student</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>            -&gt;whereRaw(<span class="hljs-string">&#x27;id &gt;= ? and age  &gt; ?&#x27;</span>, [<span class="hljs-number">1002</span>, <span class="hljs-number">20</span>])<br>            -&gt;get();<br>        dd(<span class="hljs-variable">$student</span>);<br><br>        <span class="hljs-comment">//pluck()返回具体的字段</span><br>        <span class="hljs-variable">$name</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>            -&gt;pluck(<span class="hljs-string">&#x27;name&#x27;</span>);<br>        dd(<span class="hljs-variable">$name</span>);<br><br>        <span class="hljs-comment">//lists()效果和pluck()类似</span><br>        <span class="hljs-variable">$name</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>            -&gt;lists(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>);<br>        dd(<span class="hljs-variable">$name</span>);<br><br>        <span class="hljs-comment">//select()</span><br>        <span class="hljs-variable">$student</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>            -&gt;select(<span class="hljs-string">&#x27;id&#x27;</span> ,<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>)<br>            -&gt;get();<br>        dd(<span class="hljs-variable">$student</span>);<br><br>        <span class="hljs-comment">//chunk()一次查询几条数据</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span>;<br>        DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;chunk(<span class="hljs-number">2</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$student</span></span>)</span>&#123;<br>            var_dump(<span class="hljs-variable">$student</span>);<br>        &#125;);<br>    &#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Laravel-事件监听</title>
    <link href="/2021/03/24/PHP/Laravel/Laravel-%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/"/>
    <url>/2021/03/24/PHP/Laravel/Laravel-%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/</url>
    
    <content type="html"><![CDATA[<p>看同事的代码里面经常出现Laravel事件，简单的学一下，了解了解执行逻辑</p><p>参考资料：</p><p>Bilibili视频：<a href="https://www.bilibili.com/video/BV1DJ411Q7rT">Laravel 6 事件 （解耦必备）</a><br>Laravel8文档：<a href="https://learnku.com/docs/laravel/8.x/events/9391#">事件系统</a>博客：<a href="https://www.cnblogs.com/fps2tao/p/9681455.html">简单易懂的laravel事件</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP  namespace</title>
    <link href="/2021/03/24/PHP/Laravel/PHP%20%20namespace%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/03/24/PHP/Laravel/PHP%20%20namespace%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>#命名空间的作用域</p><h3 id="1-函数的namespace"><a href="#1-函数的namespace" class="headerlink" title="1.函数的namespace"></a><strong>1.函数的namespace</strong></h3><ul><li>各自命名空间调用各自命名空间的函数</li></ul><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">a</span><br>&#123;<br>    <span class="hljs-title">function</span> <span class="hljs-title">hello</span>()<br>    &#123;<br>        return &#x27;命名空间&#x27; . __NAMESPACE__ . &#x27;&lt;br&gt;函数名称是：&#x27; . __FUNCTION__;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">b</span><br>&#123;<br>    <span class="hljs-title">function</span> <span class="hljs-title">hello</span>()<br>    &#123;<br>        return &#x27;命名空间&#x27; . __NAMESPACE__ . &#x27;&lt;br&gt;函数名称是：&#x27; . __FUNCTION__;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span><br>&#123;<br>    <span class="hljs-title">echo</span> <span class="hljs-title">a</span>\<span class="hljs-title">hello</span>();     <span class="hljs-comment">//调用a空间中的hello</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> b\hello();     <span class="hljs-comment">//调用b空间中的hello</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>运行的结果</p><p><img src="https://img-blog.csdn.net/20180410160251563?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><ul><li>还可以在b的命名空间中调用a命名空间中的函数</li></ul><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">a</span><br>&#123;<br>    <span class="hljs-title">function</span> <span class="hljs-title">hello</span>()<br>    &#123;<br>        return &#x27;命名空间&#x27; . __NAMESPACE__ . &#x27;&lt;br&gt;函数名称是：&#x27; . __FUNCTION__;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">b</span><br>&#123;<br>    <span class="hljs-title">function</span> <span class="hljs-title">hello</span>()<br>    &#123;<br>        <span class="hljs-title">return</span> \<span class="hljs-title">a</span>\<span class="hljs-title">hello</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span><br>&#123;<br>    <span class="hljs-title">echo</span> <span class="hljs-title">a</span>\<span class="hljs-title">hello</span>();     <span class="hljs-comment">//调用a空间中的hello</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> b\hello();     <span class="hljs-comment">//b调用a空间中的hello</span><br>&#125;<br><br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>运行结果</p><p><img src="https://img-blog.csdn.net/20180410161125940?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="2-类的命名空间"><a href="#2-类的命名空间" class="headerlink" title="2.类的命名空间"></a><strong>2.类的命名空间</strong></h3><ul><li>各自命名空间调用各自命名空间的函数</li></ul><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">a</span><br>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">A</span><br>    &#123;<br>        public $name = &#x27;mohuani&#x27;;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$namespace</span> = <span class="hljs-string">&#x27;命名空间：&#x27;</span> . <span class="hljs-keyword">__NAMESPACE__</span>;<br>            <span class="hljs-variable">$className</span> = <span class="hljs-string">&#x27;类名&#x27;</span> . <span class="hljs-keyword">__CLASS__</span>;<br>            <span class="hljs-variable">$methodName</span> = <span class="hljs-string">&#x27;方法名&#x27;</span> . <span class="hljs-keyword">__METHOD__</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$namespace</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$className</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$methodName</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;name;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">b</span><br>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">A</span><br>    &#123;<br>        public $name = &#x27;mohuani&#x27;;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$namespace</span> = <span class="hljs-string">&#x27;命名空间：&#x27;</span> . <span class="hljs-keyword">__NAMESPACE__</span>;<br>            <span class="hljs-variable">$className</span> = <span class="hljs-string">&#x27;类名&#x27;</span> . <span class="hljs-keyword">__CLASS__</span>;<br>            <span class="hljs-variable">$methodName</span> = <span class="hljs-string">&#x27;方法名&#x27;</span> . <span class="hljs-keyword">__METHOD__</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$namespace</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$className</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$methodName</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;name;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span><br>&#123;<br>    <span class="hljs-title">echo</span> (<span class="hljs-title">new</span> <span class="hljs-title">a</span>\<span class="hljs-title">A</span>)-&gt;<span class="hljs-title">say</span>();<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> (<span class="hljs-keyword">new</span> b\A)-&gt;say();<br>&#125;<br><br><br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>运行结果</p><p><img src="https://img-blog.csdn.net/20180410162810247?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><ul><li>在b的空间中调用a空间中的类</li></ul><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">a</span><br>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">A</span><br>    &#123;<br>        public $name = &#x27;陌花拟&#x27;;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$namespace</span> = <span class="hljs-string">&#x27;命名空间：&#x27;</span> . <span class="hljs-keyword">__NAMESPACE__</span>;<br>            <span class="hljs-variable">$className</span> = <span class="hljs-string">&#x27;类名&#x27;</span> . <span class="hljs-keyword">__CLASS__</span>;<br>            <span class="hljs-variable">$methodName</span> = <span class="hljs-string">&#x27;方法名&#x27;</span> . <span class="hljs-keyword">__METHOD__</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$namespace</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$className</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$methodName</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;name;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">b</span><br>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">A</span><br>    &#123;<br>        public $name = &#x27;mohuani&#x27;;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$namespace</span> = <span class="hljs-string">&#x27;命名空间：&#x27;</span> . <span class="hljs-keyword">__NAMESPACE__</span>;<br>            <span class="hljs-variable">$className</span> = <span class="hljs-string">&#x27;类名&#x27;</span> . <span class="hljs-keyword">__CLASS__</span>;<br>            <span class="hljs-variable">$methodName</span> = <span class="hljs-string">&#x27;方法名&#x27;</span> . <span class="hljs-keyword">__METHOD__</span>;<br>            <span class="hljs-variable">$temp</span> = (<span class="hljs-keyword">new</span> \a\A)-&gt;name;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$namespace</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$className</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$methodName</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$temp</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span><br>&#123;<br>    <span class="hljs-title">echo</span> (<span class="hljs-title">new</span> <span class="hljs-title">a</span>\<span class="hljs-title">A</span>)-&gt;<span class="hljs-title">say</span>();<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> (<span class="hljs-keyword">new</span> b\A)-&gt;say();<br>&#125;<br><br><br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>运行结果</p><p><img src="https://img-blog.csdn.net/20180410163339119?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>###<strong>3.常量的命名空间</strong></p><ul><li>const创建的常量，受命名空间的限制 </li><li>define创建的常量，不受命名空间的限制</li></ul><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">a</span><br>&#123;<br>    const SITE_NAME = &#x27;陌花拟&#x27;;<br>    <span class="hljs-comment">//define(&#x27;SITE_NAME&#x27;,&#x27;陌花拟&#x27;)</span><br>    <span class="hljs-comment">//define创建的常量，不收命名空间的限制</span><br>&#125;<br><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">b</span><br>&#123;<br>    const SITE_NAME = &#x27;mohuani&#x27;;<br>&#125;<br><br><span class="hljs-keyword">namespace</span><br>&#123;<br>    <span class="hljs-title">echo</span> <span class="hljs-title">a</span>\<span class="hljs-title">SITE_NAME</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> b\SITE_NAME;<br>&#125;<br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>运行结果</p><p><img src="https://img-blog.csdn.net/20180410164321969?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL数据库性能分析和优化</title>
    <link href="/2021/03/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%92%8C%E4%BC%98%E5%8C%96/"/>
    <url>/2021/03/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%92%8C%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>课程地址：<a href="https://www.imooc.com/learn/194">https://www.imooc.com/learn/194</a></p><p>推荐文章：<a href="https://www.zam9.com/blog/mysql_opt01">https://www.zam9.com/blog/mysql_opt01</a></p><h3 id="MySQL数据库优化"><a href="#MySQL数据库优化" class="headerlink" title="MySQL数据库优化"></a>MySQL数据库优化</h3><h4 id="SQL语句优化"><a href="#SQL语句优化" class="headerlink" title="SQL语句优化"></a>SQL语句优化</h4><p><strong>慢查询</strong></p><p>如何发现有问题的SQL？</p><p>使用mysql慢查询日志对有效率问题的SQL进行监控</p><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams"><span class="hljs-comment">//查看慢查询日志是否开启</span><br>show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;slow_query_log&#x27;</span>;<br><br><span class="hljs-comment">//查看慢查询日志存储位置</span><br>show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;slow_query_log_file&#x27;</span>;<br><br><span class="hljs-comment">//开启慢查询日志</span><br><span class="hljs-keyword">set</span> global <span class="hljs-comment">slow_query_log=on</span>;<br><br><span class="hljs-comment">//指定慢查询日志存储位置</span><br><span class="hljs-keyword">set</span> global <span class="hljs-comment">show_query_log_file=</span><span class="hljs-comment">&#x27;/var/lib/mysql/homestead-slow.log&#x27;</span>;<br><br><span class="hljs-comment">//记录没有使用索引的sql</span><br><span class="hljs-keyword">set</span> global <span class="hljs-comment">log_queries_not_using_indexes=on</span>;<br><br><span class="hljs-comment">//记录查询超过1s的sql</span><br><span class="hljs-keyword">set</span> global <span class="hljs-comment">long_query_time=1</span>;<br></code></pre></div></td></tr></table></figure><p>慢查询日志所包含的内容：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">#<span class="hljs-keyword">User</span><span class="hljs-variable">@Host</span>:root[root] <span class="hljs-variable">@localhost</span>[]<span class="hljs-operator">/</span><span class="hljs-operator">/</span>执行<span class="hljs-keyword">sql</span>的主机信息<br>#Query_time:<span class="hljs-number">0.0000024</span> Lock_time:<span class="hljs-number">0.00</span> Rows_sent:<span class="hljs-number">0</span> Rows_esamined:<span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">sql</span>的执行信息<br><span class="hljs-keyword">SET</span> <span class="hljs-type">timestamp</span><span class="hljs-operator">=</span><span class="hljs-number">1402389324</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">sql</span>执行时间<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> store; <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">sql</span>的内容<br></code></pre></div></td></tr></table></figure><p><strong>MySQL慢查询日志分析工具之mysqldumpslow（mysql官方）</strong></p><p>安装完MySQL后，默认就带了mysqldumpslow，很常用的一个工具。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>查看参数列表<br>mysqldumpslow -h<br><br><span class="hljs-regexp">//</span>分析慢查询日志中前三条比较慢的sql<br>mysqldumpslow -t <span class="hljs-number">3</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/mysql/</span>homestead-slow.log | more <br><br><span class="hljs-regexp">//</span>输出样式效果<br>Count:<span class="hljs-number">1</span> Time:<span class="hljs-number">0.00</span>s Lock=<span class="hljs-number">0.00</span>s Rows=<span class="hljs-number">10.0</span><br>root[rppt]@localhost<br>select * from store<br></code></pre></div></td></tr></table></figure><p><strong>MySQL慢查询日志分析工具之pt-query-digest</strong></p><p>分析结果比mysqldumpslow更详细全面</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata"><span class="hljs-comment">//输出到文件</span><br>pt-<span class="hljs-keyword">query</span>-digest slow-<span class="hljs-keyword">log</span> &gt; slow_log.<span class="hljs-keyword">report</span><br><br><span class="hljs-comment">//输出到数据表</span><br>pt-<span class="hljs-keyword">query</span>-digest slow.<span class="hljs-keyword">log</span> -review \<br><span class="hljs-keyword">h</span>=127.0.0.1,<span class="hljs-keyword">D</span>=<span class="hljs-keyword">test</span>,p=root,P=3306,<span class="hljs-keyword">u</span>=root,t=query_review \<br>--create-reviewtable \<br>--review-history t=hostname_slow<br></code></pre></div></td></tr></table></figure><p>基本使用</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>查看参数列表<br>pt-query-digest --help<br><br><span class="hljs-regexp">//</span>分析慢查询日志中前三条比较慢的sql<br>pt-query-digest <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/mysql/</span>homestead-slow.log | more <br><br><span class="hljs-regexp">//</span>输出分为三部分<br><span class="hljs-number">1</span>.显示除了日志的时间范围，以及总的sql数量和不同的sql数量<br><span class="hljs-number">2</span>.Response Time:响应时间占比 Calls:sql执行次数<br><span class="hljs-number">3</span>.sql的具体日志<br></code></pre></div></td></tr></table></figure><p>如何通过慢查询日志发现有问题的SQL？</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span>查询次数多且每次查询占用时间长的<span class="hljs-keyword">SQL</span><br>通常为pt-query-digest分析的前几个查询<br><br><span class="hljs-number">2.</span>IO大的<span class="hljs-keyword">SQL</span>（数据库主要瓶颈出现在IO层次）<br>注意pt-query-digest分析中的<span class="hljs-keyword">Rows</span> examine项<br><br><span class="hljs-number">3.</span>未命中索引的<span class="hljs-keyword">SQL</span><br>注意pt-query-digest分析中的<span class="hljs-keyword">Rows</span> examine和<span class="hljs-keyword">Rows</span> Send的对比<br></code></pre></div></td></tr></table></figure><p>通过explain查询和分析SQL的执行计划</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> customer_id,,first_name,last_name <span class="hljs-keyword">from</span> customer;<br></code></pre></div></td></tr></table></figure><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>customer</td><td>ALL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>671</td><td></td></tr><tr><td></td><td></td><td>该数据关于哪张表。</td><td>示连接使用了何种类型。从好到差const,eq_reg,ref,range,index和ALL。</td><td>可能应用在该表的索引，空，没有可能的索引。</td><td>实际使用的索引。空，没有使用索引。</td><td>使用的索引长度。不损失精度下，越短越好。</td><td>显示索引的哪一列被使用了，常数。</td><td>mysql认为必须检查的数据的行数。</td><td>注意：Using filesort,Using tempoary</td></tr></tbody></table><p>Count()和Max()的优化</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">//查询最后支付时间<span class="hljs-comment">--优化max()函数</span><br><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> max(payment_date) <span class="hljs-keyword">from</span> payment;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> idx_paydate <span class="hljs-keyword">on</span> payment(payment_data);//给payment_date建立索引(覆盖索引)<br><br>//在一条<span class="hljs-keyword">SQL</span>中同时查出<span class="hljs-number">2006</span>年和<span class="hljs-number">2007</span>年电影的数量<span class="hljs-comment">--优化Count()函数</span><br><span class="hljs-keyword">select</span> count(release_year=<span class="hljs-string">&#x27;2006&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">null</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;2006年电影数量&#x27;</span>，count(release_year=<span class="hljs-string">&#x27;2007&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">null</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;2007年电影数量&#x27;</span> <span class="hljs-keyword">from</span> film;<br>//有关count()函数<br>https://blog.csdn.net/wendychiang1991/article/details/<span class="hljs-number">70909958</span>/<br></code></pre></div></td></tr></table></figure><p>子查询优化</p><figure class="highlight sas"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sas">通常情况下，需要把子查询优化为join查询，但在优化时要注意关联键是否有一对多的关系，要注意重复数据。(<span class="hljs-meta">distinct</span>去重)<br>//查询sandra出演的所有影片<br>explain <span class="hljs-meta">select</span> <span class="hljs-meta">title</span>,release_year,<span class="hljs-meta">LENGTH</span> <span class="hljs-meta">from</span> film<br><span class="hljs-meta">where</span> film_id <span class="hljs-meta">in</span> (<br><span class="hljs-meta">select</span> film_id <span class="hljs-meta">from</span> film_actor <span class="hljs-meta">where</span> actor_id <span class="hljs-meta">in</span> (<br><span class="hljs-meta">select</span> actor_id <span class="hljs-meta">from</span> actor <span class="hljs-meta">where</span> first_name=<span class="hljs-string">&#x27;sandra&#x27;</span>));<br></code></pre></div></td></tr></table></figure><p>group by的优化</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">//改前 临时表<br><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> actor.first_name,actor_last_name,<span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">from</span> sakila.film_actor<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> sakila.actor <span class="hljs-keyword">USING</span>(actor_id)<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> film_actor.actor_id;<br>//改后 结合子查询 索引<br><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> actor.first_name,actor.last_name,c.cnt <span class="hljs-keyword">from</span> sakila.film_actor<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> (<br><span class="hljs-keyword">select</span> actor_id,<span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">as</span> cnt <span class="hljs-keyword">from</span> sakila.film_actor <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> actor_id) <span class="hljs-keyword">as</span> c <span class="hljs-keyword">USING</span>(actor_id);<br></code></pre></div></td></tr></table></figure><p>limit优化</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">limit</span>常用于分页处理，时常会伴随<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 从句使用，因此大多时候会使用Filesorts这样会造成大量的IO问题。<br><br>//文件排序，IO大<br><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> film_id,description <span class="hljs-keyword">from</span> sakila.film <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> title <span class="hljs-keyword">limit</span> <span class="hljs-number">50</span>,<span class="hljs-number">5</span>;<br><span class="hljs-number">1.</span>优化：使用有索引的列或主键进行<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>操作（<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> film_id）<br><span class="hljs-number">2.</span>记录上次返回的主键，在下次查询的时候用主键过滤，避免了数据量大时扫描过多的记录<br><span class="hljs-keyword">select</span> film_id,description <span class="hljs-keyword">from</span> sakila.film <span class="hljs-keyword">where</span> film_if&gt;<span class="hljs-number">55</span> <span class="hljs-keyword">and</span> film_id&lt;=<span class="hljs-number">60</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> film_id <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">5</span>; <br>页数越大，IO越大<br></code></pre></div></td></tr></table></figure><h4 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h4><p>如何选择合适的列建立索引？</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span>在<span class="hljs-keyword">where</span>从句，<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>从句，<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>从句，<span class="hljs-keyword">on</span>从句中出现的列(<span class="hljs-keyword">select</span>)<br><span class="hljs-number">2.</span>索引字段越小越好(表每页数据才会更多，IO效率会更高)<br><span class="hljs-number">3.</span>离散度大的列放到联合索引的前面<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> payment <span class="hljs-keyword">where</span> staff_id=<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> customer_id=<span class="hljs-number">584</span>;<br><span class="hljs-keyword">index</span>(staff_id,customer_id)好？还是<span class="hljs-keyword">index</span>(customer_id,staff_id)好？<br>由于customer_id的离散度更大(重复率小,可选择性更大)，所以应该使用<span class="hljs-keyword">index</span>(customer_id,staff_id)<br></code></pre></div></td></tr></table></figure><p>索引优化SQL的方法</p><p>索引的维护及优化–重复及冗余索引</p><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery">冗余索引是指多个索引的前缀列相同，或是在联合索引中包含了主键的索引。如下<span class="hljs-built_in">：key</span><span class="hljs-built_in">(name</span><span class="hljs-built_in">,id</span>)就是一个冗余索引<br>create table test(<br>id int<span class="hljs-built_in"> not</span> null primary<span class="hljs-built_in"> key</span>,<br>name varchar(<span class="hljs-number">10</span>)<span class="hljs-built_in"> not</span> null,<br>key<span class="hljs-built_in">(name</span><span class="hljs-built_in">,id</span>)<br>)engine=innodb;<br>//可以删除冗余索引，达到优化效果。<br><br>使用pt-duplicate-key-checker工具检查重复及冗余索引<br>pt-duplicate-key-checker \<br>-uroot \<br>-p <span class="hljs-string">&#x27;&#x27;</span> \<br>-h <span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>索引维护的方法–删除不用索引</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">目前mysql中还没有记录索引的使用情况，但是在PerconMySQL和MariaDB中可通过INDEX_STATISTICS表来查看哪些索引未使用，但在mysql中目前只能通过慢查日志配合<span class="hljs-keyword">pt</span>-<span class="hljs-built_in">index</span>-usage工具来进行索引使用情况分析。<br><span class="hljs-keyword">pt</span>-<span class="hljs-built_in">index</span>-usage \<br>-uroot -<span class="hljs-keyword">p</span><span class="hljs-string">&#x27;&#x27;</span> \<br>mysql-slow.<span class="hljs-built_in">log</span><br></code></pre></div></td></tr></table></figure><h4 id="数据库表结构优化"><a href="#数据库表结构优化" class="headerlink" title="数据库表结构优化"></a>数据库表结构优化</h4><p>1、选择<strong>合适</strong>的数据类型</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss">1.使用可以存下你的数据的最小的数据类型<br>2.使用简单的数据类型。int要比varchar类型在mysql处理上更简单<br>3.尽可能的使用not null定义字段<br>4.尽量少用text类型，非用不可时最好考虑分表<br>*使用int来存储日志时间，利用FROM_UNIXTINE()(得到日期),UNIX_TIMESTAMP()(得到时间戳)两个函数来进行转换<br>*使用bigint来存ip地址，利用INET_ATON(),INET_NTOA()两个函数来进行转换<br></code></pre></div></td></tr></table></figure><p>2、表的范式化和反范式化</p><p><strong>范式化</strong>是指数据库设计的规范，目前说到范式化一般是指第三设计范式，也就是要求数据表中不存在非关键字段对任意候选关键字段的传递函数依赖则符合第三范式。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">不符合第三范式要求的表存在下列问题：<br>1.数据冗余：（分类，分类描述）对于每一个商品都会进行记录<br>2.数据的插入异常<br>3.数据的更新异常<br>4.数据的删除异常<br></code></pre></div></td></tr></table></figure><p><strong>反范式化</strong>是指为了查询效率的考虑把原本符合第三范式的表适当的增加冗余，以达到优化查询的目的，反范式化是一种以空间来换取时间的操作。</p><p>3、表的拆分</p><p>垂直拆分</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">所谓的垂直拆分，就是把原来一个有很多列的表拆分成多个表，这解决了表的宽度问题。通常垂直拆分可以按以下原则进行：<br>1.把不常用的字段单独存放到一个表中<br>2.把大字段独立存放到一个表中<br>3.把经常一起使用的字段放到一起<br></code></pre></div></td></tr></table></figure><p>水平拆分</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">表的水平拆分是为了解决单表的数据量过大的问题，水平拆分的表每一个表的结构都是完全一致的。<br>常用的水平拆分方法为：<br><span class="hljs-number">1.</span>对<span class="hljs-built_in">id</span>进行hash运算，如果要拆分成<span class="hljs-number">5</span>个表则使用<span class="hljs-keyword">mod</span>(<span class="hljs-built_in">id</span>,<span class="hljs-number">5</span>)去除<span class="hljs-number">0</span><span class="hljs-number">-4</span>个值<br><span class="hljs-number">2.</span>针对不同的hashID把数据存到不同的表中<br></code></pre></div></td></tr></table></figure><h4 id="系统配置优化"><a href="#系统配置优化" class="headerlink" title="系统配置优化"></a>系统配置优化</h4><p>1、操作系统配置优化</p><p>数据库是基于操作系统的，目前大多数mysql都是安装在Linux系统之上，所以对于操作系统的一些参数配置也会影响到MYSQL的性能。</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">网络方面的配置，要修改/etc/stysctl.conf文件<br>#增加tcp支持的队列数<br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_max_syn_backlog</span> = <span class="hljs-number">65535</span><br>#减少断开链接是，资源回收<br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_max_tw_buckets</span> = <span class="hljs-number">8000</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_tw_reuse</span> = <span class="hljs-number">1</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_tw_recycle</span> = <span class="hljs-number">1</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_fin_timeout</span> = <span class="hljs-number">10</span><br><br>打开文件数的限制，可以使用ulimit -<span class="hljs-selector-tag">a</span> 查看目录的各位限制，可以修改/etcsecurity/limitsconf文件，增加一下内容以修改打开文件数量的限制<br>*soft nofile <span class="hljs-number">65535</span><br>*hard nofile <span class="hljs-number">65535</span><br>除此之外最好在mysql服务器上关闭iptables，selinux等防火墙软件。<br></code></pre></div></td></tr></table></figure><p>2、MySQL数据库优化</p><p>MySQL配置文件</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">mysql可以通过启动时指定配置参数和使用配置文件两种方法进行配置，在大数情况下配置文件位于<span class="hljs-regexp">/etc/my</span>.cnf或是<span class="hljs-regexp">/etc/my</span>sql<span class="hljs-regexp">/my.cnf在windows系统配置文件可以是位于C:/</span>windows/my.ini文件，mysql查找配置文件的顺序可以通过一下方法获得<br><span class="hljs-regexp">/usr/</span>sbin/mysqld --verbose --help | <span class="hljs-keyword">grep</span> -A <span class="hljs-number">1</span> <span class="hljs-string">&#x27; Default options &#x27;</span><br></code></pre></div></td></tr></table></figure><p>MySQL配置文件–常用参数说明</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-number">1.i</span>nnodb_buffer_pool_size &gt;= total MB<br>非常重要的一个参数，用于配置innodb的缓冲池，如果数据库中只有innodb表，则推荐配置量为总内存的<span class="hljs-number">75</span>%<br><br><span class="hljs-number">2.i</span>nnodb_buffer_pool__instances<br>MySQL5<span class="hljs-number">.5</span>中新增加参数，可以控制缓冲池的个数，默认情况下只有一个缓冲池。<br><br><span class="hljs-number">3.i</span>nnodb_log_buffer_size<br>innodb log缓冲的大小，由于日志最长每秒钟就会刷新所以一般不用太大。<br><br><span class="hljs-number">4.i</span>nnodb_flush_log_at_trx_commit<br>关键参数，对innodb的IO效率影响很大。默认值为<span class="hljs-number">1</span>，可取<span class="hljs-number">0</span>，<span class="hljs-number">1</span>，<span class="hljs-number">2</span>三个值，一般建议为<span class="hljs-number">2</span>，但如果数据安全性要求比较高则使用默认值<span class="hljs-number">1.</span><br><br><span class="hljs-number">5.i</span>nnodb_read_io_threads   innodb_write_io_threads<br>以上两个参数决定了Innodb读写的IO进程数，默认为<span class="hljs-number">4.</span><br><br><span class="hljs-number">6.i</span>nnodb_file_per_table<br>关键参数，控制innodb每一个表使用独立的表空间，默认为off，也就是所有表都会建立在共享表空间中。<br><br><span class="hljs-number">7.i</span>nnodb_stats_on_metadata<br>决定了mysql在什么情况下会刷新innodb表的统计信息。<br></code></pre></div></td></tr></table></figure><p>3、第三方配置工具</p><p>链接地址：<a href="https://tools.percona.com/wizard">https://tools.percona.com/wizard</a></p><h4 id="服务器硬件优化"><a href="#服务器硬件优化" class="headerlink" title="服务器硬件优化"></a>服务器硬件优化</h4><p>如何选择cpu？</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.mysql有一些工作只能使用到单核cpu，Replicate,SQL...<br><span class="hljs-attribute">2</span>.mysql对cpu核数的支持并不是越多越快。mysql<span class="hljs-number">5</span>.<span class="hljs-number">5</span>使用的服务器不要超过<span class="hljs-number">30</span>核<br></code></pre></div></td></tr></table></figure><p>磁盘IO优化</p><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">常用RAID级别简介<br>RAID0：也称条带，就是把多个磁盘链接成一个硬盘使用，这个级别IO最好<br>RAID1：也称镜像，要求至少有两个磁盘，每组磁盘存储的数据相同<br>RAID5：也是把多个硬盘合并成一个逻辑盘使用，数据读写时会建立奇偶校验信息，分别存储在不同磁盘上。<br>RAID1<span class="hljs-string">+0</span>：就是RAID1和RAID0的结合。同时具备两个级别的优缺点。一般建议数据库使用这个级别。<br><br>SNA和NAT是否适合数据库？<br>1.常用于高可用解决方案<br>2.顺序读写效率很高，但是随机读写不如人意<br>3.数据库随机读写比率很高<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySql  ERROR 1698 (28000)</title>
    <link href="/2021/03/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySql%20%20ERROR%201698%20(28000)/"/>
    <url>/2021/03/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySql%20%20ERROR%201698%20(28000)/</url>
    
    <content type="html"><![CDATA[<p>MySql 5.7.6 起，安装时如果 root 不设置密码，那么默认会采用auth_socket的方式登陆 MySQL 。也就是登陆 MySQL 时验证你的 Linux 的当前用户是否为 root，如果不是就不能登陆。在<code>auth_socket</code>模式下，应用程序通过数据库的用户名、密码是无法连接的，这就需要我们将数据库的登陆模式，改为<code>mysql_native_password</code>模式。</p><p>进入数据库：sudo mysql -uroot，执行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">&#x27;&#x27;</span>;<br>FLUSH PRIVILEGES;<br><span class="hljs-built_in">exit</span>;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql导出表结构和表数据</title>
    <link href="/2021/03/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql%E5%AF%BC%E5%87%BA%E8%A1%A8%E7%BB%93%E6%9E%84%E5%92%8C%E8%A1%A8%E6%95%B0%E6%8D%AE/"/>
    <url>/2021/03/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql%E5%AF%BC%E5%87%BA%E8%A1%A8%E7%BB%93%E6%9E%84%E5%92%8C%E8%A1%A8%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>命令行下具体用法如下：  </p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">mysqldump -u用戶名 -p密码 -d 数据库名 表名 &gt; 脚本名<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>导出整个数据库结构和数据</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysqldump <span class="hljs-operator">-</span>h localhost <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123456 database <span class="hljs-operator">&gt;</span> dump.sql<br></code></pre></div></td></tr></table></figure><p>导出单个数据表结构和数据</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysqldump <span class="hljs-operator">-</span>h localhost <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123456  database <span class="hljs-keyword">table</span> <span class="hljs-operator">&gt;</span> dump.sql<br></code></pre></div></td></tr></table></figure><p>导出整个数据库结构（不包含数据）</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysqldump <span class="hljs-operator">-</span>h localhost <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123456  <span class="hljs-operator">-</span>d database <span class="hljs-operator">&gt;</span> dump.sql<br></code></pre></div></td></tr></table></figure><p>导出单个数据表结构（不包含数据）</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysqldump <span class="hljs-operator">-</span>h localhost <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123456  <span class="hljs-operator">-</span>d database <span class="hljs-keyword">table</span> <span class="hljs-operator">&gt;</span> dump.sql<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql查看建表的注释</title>
    <link href="/2021/03/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql%E6%9F%A5%E7%9C%8B%E5%BB%BA%E8%A1%A8%E7%9A%84%E6%B3%A8%E9%87%8A/"/>
    <url>/2021/03/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql%E6%9F%A5%E7%9C%8B%E5%BB%BA%E8%A1%A8%E7%9A%84%E6%B3%A8%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<p>查看表结构-表格形式，带注释</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">show full columns from tableName;<br></code></pre></div></td></tr></table></figure><p>查看表结构-建表语句，带注释</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">show create table tableName;<br></code></pre></div></td></tr></table></figure><p>简单查看表结构</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">desc tableName;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>深入理解 Mysql 索引底层原理</title>
    <link href="/2021/03/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20Mysql%20%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <url>/2021/03/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20Mysql%20%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>深入理解 Mysql 索引底层原理 - <a href="https://zhuanlan.zhihu.com/p/113917726">https://zhuanlan.zhihu.com/p/113917726</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis 高可用解决方案总结</title>
    <link href="/2021/03/24/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%20%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/"/>
    <url>/2021/03/24/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%20%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>Redis 高可用解决方案总结：<a href="https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247487221&amp;idx=1&amp;sn=1c3182ad46e8781a04f49ec8ad53f482&amp;chksm=eb538bc3dc2402d5df24a37ec0c0c31099d152df6d3b62380ccebf7f4ec04e64a8dadd83fd7b&amp;mpshare=1&amp;scene=24&amp;srcid=05031WU0aEvCwiVHBCld65XU&amp;key=bf4cf7f356eb2752d8a578bd21d61203d7e72957a4125eb1fe25f0b2384de21e8c81b4a3811eb1285d479714fea7aaa1aa4249cb83cdd5c96b083e77b1c3747440db1862d7b543a903029fb6330afa7a&amp;ascene=14&amp;uin=MTkwNjk4NjAxMA==&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=JogDaVDjKXx9W3zQZ2sl6TAUdMDS7rKA0Zb9hMwwVMC4ALxeAySdvq8JADMCeINW">https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247487221&amp;idx=1&amp;sn=1c3182ad46e8781a04f49ec8ad53f482&amp;chksm=eb538bc3dc2402d5df24a37ec0c0c31099d152df6d3b62380ccebf7f4ec04e64a8dadd83fd7b&amp;mpshare=1&amp;scene=24&amp;srcid=05031WU0aEvCwiVHBCld65XU&amp;key=bf4cf7f356eb2752d8a578bd21d61203d7e72957a4125eb1fe25f0b2384de21e8c81b4a3811eb1285d479714fea7aaa1aa4249cb83cdd5c96b083e77b1c3747440db1862d7b543a903029fb6330afa7a&amp;ascene=14&amp;uin=MTkwNjk4NjAxMA%3D%3D&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=JogDaVDjKXx9W3zQZ2sl6TAUdMDS7rKA0Zb9hMwwVMC4ALxeAySdvq8JADMCeINW</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>redis-list</title>
    <link href="/2021/03/24/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/redis-list/"/>
    <url>/2021/03/24/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/redis-list/</url>
    
    <content type="html"><![CDATA[<ul><li>控制List的长度，每次push或者pop的时候，可以使用ltrim()函数让list保持固定长度</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTTP 返回码详解</title>
    <link href="/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/HTTP/HTTP%20%E8%BF%94%E5%9B%9E%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/HTTP/HTTP%20%E8%BF%94%E5%9B%9E%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p> HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。</p><p>##1xx（临时响应）<br><strong>表示临时响应并需要请求者继续执行操作的状态代码。</strong></p><ul><li>100（继续）请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。  </li><li>101（切换协议）请求者已要求服务器切换协议，服务器已确认并准备切换。</li></ul><p>##2xx （成功）<br><strong>表示成功处理了请求的状态代码。</strong></p><ul><li><p>200（成功）服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。</p></li><li><p>201（已创建）请求成功并且服务器创建了新的资源。</p></li><li><p>202（已接受） 服务器已接受请求，但尚未处理。</p></li><li><p>203（非授权信息）服务器已成功处理了请求，但返回的信息可能来自另一来源。</p></li><li><p>204（无内容）服务器成功处理了请求，但没有返回任何内容。</p></li><li><p>205（重置内容）服务器成功处理了请求，但没有返回任何内容。</p></li><li><p>206（部分内容）服务器成功处理了部分 GET 请求。</p></li></ul><p>##3xx （重定向）<br><strong>表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</strong></p><ul><li><p>300（多种选择）针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</p></li><li><p>301（永久移动）请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</p></li><li><p>302（临时移动）服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p></li><li><p>303（查看其他位置）请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</p></li><li><p>304（未修改）自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</p></li><li><p>305（使用代理）请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</p></li><li><p>307（临时重定向）服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p></li></ul><p>##4xx（请求错误）<br><strong>这些状态代码表示请求可能出错，妨碍了服务器的处理。</strong></p><ul><li><p>400（错误请求）服务器不理解请求的语法。</p></li><li><p>401（未授权）请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</p></li><li><p>403（禁止）服务器拒绝请求。</p></li><li><p>404（未找到）服务器找不到请求的网页。</p></li><li><p>405（方法禁用）禁用请求中指定的方法。</p></li><li><p>406（不接受）无法使用请求的内容特性响应请求的网页。</p></li><li><p>407（需要代理授权）此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</p></li><li><p>408（请求超时）服务器等候请求时发生超时。</p></li><li><p>409（冲突）服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</p></li><li><p>410（已删除）如果请求的资源已永久删除，服务器就会返回此响应。</p></li><li><p>411（需要有效长度）服务器不接受不含有效内容长度标头字段的请求。</p></li><li><p>412（未满足前提条件）服务器未满足请求者在请求中设置的其中一个前提条件。</p></li><li><p>413（请求实体过大）服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</p></li><li><p>414（请求的 URI 过长）请求的 URI（通常为网址）过长，服务器无法处理。</p></li><li><p>415（不支持的媒体类型）请求的格式不受请求页面的支持。</p></li><li><p>416（请求范围不符合要求）如果页面无法提供请求的范围，则服务器会返回此状态代码。</p></li><li><p>417（未满足期望值）服务器未满足”期望”请求标头字段的要求。</p></li></ul><p>##5xx（服务器错误）<br><strong>这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</strong></p><ul><li>500（服务器内部错误）服务器遇到错误，无法完成请求。</li></ul><p>501（尚未实施）服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</p><ul><li><p>502（错误网关）服务器作为网关或代理，从上游服务器收到无效响应。</p></li><li><p>503（服务不可用）服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</p></li><li><p>504（网关超时）服务器作为网关或代理，但是没有及时从上游服务器收到请求。</p></li><li><p>505（HTTP 版本不受支持）服务器不支持请求中所用的 HTTP 协议版本。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTTPS 比 HTTP 更安全</title>
    <link href="/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/HTTP/HTTPS%20%E6%AF%94%20HTTP%20%E6%9B%B4%E5%AE%89%E5%85%A8/"/>
    <url>/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/HTTP/HTTPS%20%E6%AF%94%20HTTP%20%E6%9B%B4%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<p>为什么 HTTPS 比 HTTP 更安全？：<a href="https://mp.weixin.qq.com/s/xAXiY_7Lvog-Xrq6qEokUQ?client=tim&amp;ADUIN=1348954449&amp;ADSESSION=1561252296&amp;ADTAG=CLIENT.QQ.5603_.0&amp;ADPUBNO=26882">https://mp.weixin.qq.com/s/xAXiY_7Lvog-Xrq6qEokUQ?client=tim&amp;ADUIN=1348954449&amp;ADSESSION=1561252296&amp;ADTAG=CLIENT.QQ.5603_.0&amp;ADPUBNO=26882</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git常见使用方法</title>
    <link href="/2021/03/24/Git/Git%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2021/03/24/Git/Git%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>项目以往 gitee提交代码为例子</p><ul><li>1、创建公钥<figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">ssh<span class="hljs-literal">-keygen</span> <span class="hljs-literal">-t</span> rsa <span class="hljs-literal">-C</span> “git@gitee.com”<br></code></pre></div></td></tr></table></figure>执行完毕该命令后，会在 “/c/Users/xxxx/.ssh/” 目录下面生成3个文件</li></ul><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">id_rsa<br>id_rsa.pub<br>known_hosts<br></code></pre></div></td></tr></table></figure><ul><li>2、进入将创建好的公钥内容（id_rsa.pub）复制到如下的地址中，这样你就可以有权限对自己的远程仓库进行 <strong>pull</strong> 等操作。</li></ul><p><img src="../images/20200221135543699.png" alt="在这里插入图片描述"></p><ul><li><p>3、在gitee上创建自己的仓库，填写仓库名，是否开源等信息<br><img src="../images/20200221141217320.png" alt="在这里插入图片描述"></p></li><li><p>4、Git 全局设置:</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">git config -<span class="hljs-literal">-global</span> user.name <span class="hljs-string">&quot;积雪草&quot;</span><br>git config -<span class="hljs-literal">-global</span> user.email <span class="hljs-string">&quot;wfk2975019671@sina.com&quot;</span><br></code></pre></div></td></tr></table></figure><ul><li>5、本地没有仓库的话，创建 git 仓库:</li></ul><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">mkdir test<br><span class="hljs-built_in">cd</span> test<br>git init<br>touch README.md<br>git add README.md<br>git commit <span class="hljs-literal">-m</span> <span class="hljs-string">&quot;first commit&quot;</span><br>git remote add origin git@gitee.com:mohuani/test.git<br>git push <span class="hljs-literal">-u</span> origin master<br></code></pre></div></td></tr></table></figure><ul><li>6、本地已有仓库</li></ul><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> existing_git_repo<br>git remote add origin git@gitee.com:mohuani/test.git<br>git push <span class="hljs-literal">-u</span> origin master<br></code></pre></div></td></tr></table></figure><ul><li>7、分支管理<br>参考 <a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰老师的文章–Git教程</a> </li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TensorFlow学习笔记1</title>
    <link href="/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <url>/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<p>自己构建一些数据，来实现一个简单函数的模拟学习</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> tensorflow as tf<br><span class="hljs-attribute">import</span> numpy as np<br><br><span class="hljs-comment"># create data</span><br><span class="hljs-attribute">x_data</span> = np.random.rand(<span class="hljs-number">100</span>).astype(np.float<span class="hljs-number">32</span>)<br><span class="hljs-attribute">y_data</span> = x_data*<span class="hljs-number">0</span>.<span class="hljs-number">1</span> + <span class="hljs-number">0</span>.<span class="hljs-number">3</span><br><br><span class="hljs-comment"># create tensorflow structure start</span><br><span class="hljs-attribute">Weights</span> = tf.Variable(tf.random_uniform([<span class="hljs-number">1</span>],-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>))<br><span class="hljs-attribute">biases</span> = tf.Variable(tf.zeros([<span class="hljs-number">1</span>]))<br><br><span class="hljs-attribute">y</span> = Weights*x_data + biases<br><br><span class="hljs-attribute">loss</span> = tf.reduce_mean(tf.square(y-y_data))<br><span class="hljs-attribute">optimizer</span> = tf.train.GradientDescentOptimizer(<span class="hljs-number">0</span>.<span class="hljs-number">5</span>)<br><span class="hljs-attribute">train</span> = optimizer.minimize(loss)<br><br><span class="hljs-comment"># 2018-4-6记录</span><br><span class="hljs-comment"># 莫烦的视频中用的是老版本 initialize_all_variables()</span><br><span class="hljs-comment"># 现在新版的函数是 global_variables_initializer()</span><br><span class="hljs-comment"># init = tf.initialize_all_variables()</span><br><br><span class="hljs-attribute">init</span> = tf.global_variables_initializer()<br><br><span class="hljs-comment"># create tensorflow structure end</span><br><br><span class="hljs-attribute">sess</span> = tf.Session()<br><span class="hljs-attribute">sess</span>.run(init)<br><br><span class="hljs-attribute">for</span> step in range(<span class="hljs-number">401</span>):<br>    <span class="hljs-attribute">sess</span>.run(train)<br>    <span class="hljs-attribute">if</span> step % <span class="hljs-number">20</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-attribute">print</span>(step,sess.run(Weights),sess.run(biases))<br><br><br></code></pre></div></td></tr></table></figure><p>经过401的迭代后输出的结果</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>[-<span class="hljs-number">0.39455852</span>] [<span class="hljs-number">0.70643663</span>]<br><span class="hljs-symbol">20 </span>[-<span class="hljs-number">0.05729461</span>] [<span class="hljs-number">0.37692836</span>]<br><span class="hljs-symbol">40 </span>[<span class="hljs-number">0.05577959</span>] [<span class="hljs-number">0.32162696</span>]<br><span class="hljs-symbol">60 </span>[<span class="hljs-number">0.08756826</span>] [<span class="hljs-number">0.30608</span>]<br><span class="hljs-symbol">80 </span>[<span class="hljs-number">0.09650504</span>] [<span class="hljs-number">0.3017093</span>]<br><span class="hljs-symbol">100 </span>[<span class="hljs-number">0.09901748</span>] [<span class="hljs-number">0.30048054</span>]<br><span class="hljs-symbol">120 </span>[<span class="hljs-number">0.09972379</span>] [<span class="hljs-number">0.3001351</span>]<br><span class="hljs-symbol">140 </span>[<span class="hljs-number">0.09992234</span>] [<span class="hljs-number">0.300038</span>]<br><span class="hljs-symbol">160 </span>[<span class="hljs-number">0.09997816</span>] [<span class="hljs-number">0.30001068</span>]<br><span class="hljs-symbol">180 </span>[<span class="hljs-number">0.09999388</span>] [<span class="hljs-number">0.30000302</span>]<br><span class="hljs-symbol">200 </span>[<span class="hljs-number">0.09999828</span>] [<span class="hljs-number">0.30000085</span>]<br><span class="hljs-symbol">220 </span>[<span class="hljs-number">0.09999953</span>] [<span class="hljs-number">0.30000025</span>]<br><span class="hljs-symbol">240 </span>[<span class="hljs-number">0.09999986</span>] [<span class="hljs-number">0.30000007</span>]<br><span class="hljs-symbol">260 </span>[<span class="hljs-number">0.0999999</span>] [<span class="hljs-number">0.30000007</span>]<br><span class="hljs-symbol">280 </span>[<span class="hljs-number">0.0999999</span>] [<span class="hljs-number">0.30000007</span>]<br><span class="hljs-symbol">300 </span>[<span class="hljs-number">0.0999999</span>] [<span class="hljs-number">0.30000007</span>]<br><span class="hljs-symbol">320 </span>[<span class="hljs-number">0.0999999</span>] [<span class="hljs-number">0.30000007</span>]<br><span class="hljs-symbol">340 </span>[<span class="hljs-number">0.0999999</span>] [<span class="hljs-number">0.30000007</span>]<br><span class="hljs-symbol">360 </span>[<span class="hljs-number">0.0999999</span>] [<span class="hljs-number">0.30000007</span>]<br><span class="hljs-symbol">380 </span>[<span class="hljs-number">0.0999999</span>] [<span class="hljs-number">0.30000007</span>]<br><span class="hljs-symbol">400 </span>[<span class="hljs-number">0.0999999</span>] [<span class="hljs-number">0.30000007</span>]<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TensorFlow学习笔记2</title>
    <link href="/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/"/>
    <url>/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<p><strong>Session的两种使用方式</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> tensorflow as tf<br><br><span class="hljs-attribute">matrix1</span> = tf.constant([[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>]])<br><span class="hljs-attribute">matrix2</span> = tf.constant([[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]])<br><br><span class="hljs-attribute">product</span> = tf.matmul(matrix<span class="hljs-number">1</span>,matrix<span class="hljs-number">2</span>)  # matrix multiply  np.dot(m<span class="hljs-number">1</span>,m<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># session的两种打开模式</span><br><br><span class="hljs-comment"># method 1</span><br><br><span class="hljs-comment"># sess = tf.Session()</span><br><span class="hljs-comment"># result1 = sess.run(product)</span><br><span class="hljs-comment"># print(result1)</span><br><span class="hljs-comment"># sess.close()</span><br><br><span class="hljs-comment"># method 2</span><br><span class="hljs-attribute">with</span> tf.Session() as sess:<br>    <span class="hljs-attribute">result2</span> = sess.run(product)<br>    <span class="hljs-attribute">print</span>(result<span class="hljs-number">2</span>)<br></code></pre></div></td></tr></table></figure><p>运行的结果</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua"><span class="hljs-string">[[12]]</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TensorFlow学习笔记3</title>
    <link href="/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><strong>Variable变量的简单使用</strong></p><p>在 Tensorflow 中，定义了某字符串是变量，它才是变量，这一点是与 Python 所不同的</p><figure class="highlight pf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pf">import tensorflow as tf<br><br><span class="hljs-keyword">state</span> = tf.Variable(<span class="hljs-number">0</span>,name = &#x27;counter&#x27;)<br>print(<span class="hljs-keyword">state</span>.name)<br><br>one = tf.constant(<span class="hljs-number">1</span>)<br><br>new_vaule = tf.add(<span class="hljs-keyword">state</span>,one)<br>update = tf.assign(<span class="hljs-keyword">state</span>,new_vaule)<br><br><span class="hljs-comment"># 2018-4-6记录</span><br><span class="hljs-comment"># 莫烦的视频中用的是老版本 initialize_all_variables()</span><br><span class="hljs-comment"># 现在新版的函数是 global_variables_initializer()</span><br><span class="hljs-comment"># init = tf.initialize_all_variables()</span><br>init = tf.global_variables_initializer()<br><br><br>sess = tf.Session()<br>sess.run(init)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):<br>    sess.run(update)<br>    print(sess.run(<span class="hljs-keyword">state</span>))<br>sess.close()<br></code></pre></div></td></tr></table></figure><p>运行的结果</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">counter</span>:<span class="hljs-number">0</span><br><br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">2</span><br><span class="hljs-attribute">3</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TensorFlow学习笔记5</title>
    <link href="/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<ol><li>搭建神经网络基本流程</li></ol><hr><p>定义添加神经层的函数</p><p>1.训练的数据<br>2.定义节点准备接收数据<br>3.定义神经层：隐藏层和预测层<br>4.定义 loss 表达式<br>5.选择 optimizer 使 loss 达到最小</p><p>然后对所有变量进行初始化，通过 sess.run optimizer，迭代 1000 次进行学习：</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix"><span class="hljs-built_in">import</span> tensorflow as tf<br><span class="hljs-built_in">import</span> numpy as np<br><br><span class="hljs-comment"># 添加层</span><br>def add_layer(inputs, in_size, out_size, <span class="hljs-attr">activation_function=None):</span><br>    <span class="hljs-comment"># add one more layer and return the output of this layer</span><br>    <span class="hljs-attr">Weights</span> = tf.Variable(tf.random_normal([in_size, out_size]))<br>    <span class="hljs-attr">biases</span> = tf.Variable(tf.zeros([<span class="hljs-number">1</span>, out_size]) + <span class="hljs-number">0.1</span>)<br>    <span class="hljs-attr">Wx_plus_b</span> = tf.matmul(inputs, Weights) + biases<br>    <span class="hljs-keyword">if</span> activation_function is None:<br>        <span class="hljs-attr">outputs</span> = Wx_plus_b<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-attr">outputs</span> = activation_function(Wx_plus_b)<br>    return outputs<br><br><span class="hljs-comment"># 1.训练的数据</span><br><span class="hljs-comment"># Make up some real data</span><br><span class="hljs-attr">x_data</span> = np.linspace(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">300</span>)[:, np.newaxis]<br><span class="hljs-attr">noise</span> = np.random.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.05</span>, x_data.shape)<br><span class="hljs-attr">y_data</span> = np.square(x_data) - <span class="hljs-number">0.5</span> + noise<br><br><span class="hljs-comment"># 2.定义节点准备接收数据</span><br><span class="hljs-comment"># define placeholder for inputs to network</span><br><span class="hljs-attr">xs</span> = tf.placeholder(tf.float32, [None, <span class="hljs-number">1</span>])<br><span class="hljs-attr">ys</span> = tf.placeholder(tf.float32, [None, <span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># 3.定义神经层：隐藏层和预测层</span><br><span class="hljs-comment"># add hidden layer 输入值是 xs，在隐藏层有 10 个神经元</span><br><span class="hljs-attr">l1</span> = add_layer(xs, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-attr">activation_function=tf.nn.relu)</span><br><span class="hljs-comment"># add output layer 输入值是隐藏层 l1，在预测层输出 1 个结果</span><br><span class="hljs-attr">prediction</span> = add_layer(l1, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-attr">activation_function=None)</span><br><br><span class="hljs-comment"># 4.定义 loss 表达式</span><br><span class="hljs-comment"># the error between prediciton and real data</span><br><span class="hljs-attr">loss</span> = tf.reduce_mean(tf.reduce_sum(tf.square(ys - prediction),<br>                     <span class="hljs-attr">reduction_indices=[1]))</span><br><br><span class="hljs-comment"># 5.选择 optimizer 使 loss 达到最小</span><br><span class="hljs-comment"># 这一行定义了用什么方式去减少 loss，学习率是 0.1</span><br><span class="hljs-attr">train_step</span> = tf.train.GradientDescentOptimizer(<span class="hljs-number">0.1</span>).minimize(loss)<br><br><br><span class="hljs-comment"># important step 对所有变量进行初始化</span><br><span class="hljs-comment">#init = tf.initialize_all_variables()</span><br><span class="hljs-attr">init</span> = tf.global_variables_initializer()<br><span class="hljs-attr">sess</span> = tf.Session()<br><span class="hljs-comment"># 上面定义的都没有运算，直到 sess.run 才会开始运算</span><br><br> <span class="hljs-number">1</span>. 列表内容<br><br>sess.run(init)<br><br><span class="hljs-comment"># 迭代 1000 次学习，sess.run optimizer</span><br>for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1000</span>):<br>    <span class="hljs-comment"># training train_step 和 loss 都是由 placeholder 定义的运算，所以这里要用 feed 传入参数</span><br>    sess.run(train_step, <span class="hljs-attr">feed_dict=&#123;xs:</span> x_data, ys: y_data&#125;)<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">50</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># to see the step improvement</span><br>        print(sess.run(loss, <span class="hljs-attr">feed_dict=&#123;xs:</span> x_data, ys: y_data&#125;))<br></code></pre></div></td></tr></table></figure><p>运行的结果：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>.<span class="hljs-number">005811795</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">005243601</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">0048823874</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">004609399</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">0043644696</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">00416661</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">004008478</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">0038800447</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">0037535445</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">0036441346</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">003548924</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">0034721296</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">003409828</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">0033587494</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TensorFlow学习笔记6</title>
    <link href="/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <url>/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="TensorFlow搭建神经网络可视化结果"><a href="#TensorFlow搭建神经网络可视化结果" class="headerlink" title="TensorFlow搭建神经网络可视化结果"></a>TensorFlow搭建神经网络可视化结果</h2><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">import tensorflow <span class="hljs-keyword">as</span> tf<br>import numpy <span class="hljs-keyword">as</span> np<br>import matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>def add<span class="hljs-constructor">_layer(<span class="hljs-params">inputs</span>, <span class="hljs-params">in_size</span>, <span class="hljs-params">out_size</span>, <span class="hljs-params">activation_function</span> = None)</span>:<br>    Weights = tf.<span class="hljs-constructor">Variable(<span class="hljs-params">tf</span>.<span class="hljs-params">random_normal</span>([<span class="hljs-params">in_size</span>, <span class="hljs-params">out_size</span>])</span>)<br>    biases = tf.<span class="hljs-constructor">Variable(<span class="hljs-params">tf</span>.<span class="hljs-params">zeros</span>([1, <span class="hljs-params">out_size</span>])</span> + <span class="hljs-number">0.1</span>)<br>    Wx_plus_b = tf.matmul(inputs, Weights) + biases<br>    <span class="hljs-keyword">if</span> activation_function is None:<br>        outputs = Wx_plus_b<br>    <span class="hljs-keyword">else</span>:<br>        outputs = activation<span class="hljs-constructor">_function(Wx_plus_b)</span><br>    return outputs<br><br>x_data = np.linspace(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">300</span>)<span class="hljs-literal">[:,<span class="hljs-identifier">np</span>.<span class="hljs-identifier">newaxis</span>]</span><br>noise = np.random.normal(<span class="hljs-number">0</span>,<span class="hljs-number">0.05</span>,x_data.shape)<br>y_data = np.square(x_data) - <span class="hljs-number">0.5</span> + noise<br><br><br>xs = tf.placeholder(tf.float32,<span class="hljs-literal">[N<span class="hljs-identifier">one</span>,<span class="hljs-number">1</span>]</span>)<br>ys = tf.placeholder(tf.float32,<span class="hljs-literal">[N<span class="hljs-identifier">one</span>,<span class="hljs-number">1</span>]</span>)<br>l1 = add<span class="hljs-constructor">_layer(<span class="hljs-params">xs</span>,1,10,<span class="hljs-params">activation_function</span> = <span class="hljs-params">tf</span>.<span class="hljs-params">nn</span>.<span class="hljs-params">relu</span>)</span><br>prediction = add<span class="hljs-constructor">_layer(<span class="hljs-params">l1</span>,10,1,<span class="hljs-params">activation_function</span>=None)</span><br><br><br>loss =tf.reduce<span class="hljs-constructor">_mean(<span class="hljs-params">tf</span>.<span class="hljs-params">reduce_sum</span>(<span class="hljs-params">tf</span>.<span class="hljs-params">square</span>(<span class="hljs-params">ys</span> - <span class="hljs-params">prediction</span>)</span>,<br>                    reduction_indices=<span class="hljs-literal">[<span class="hljs-number">1</span>]</span>))<br><br>train_step = tf.train.<span class="hljs-constructor">GradientDescentOptimizer(0.1)</span>.minimize(loss)<br><br># init = tf.initialize<span class="hljs-constructor">_all_variables()</span><br>init = tf.global<span class="hljs-constructor">_variables_initializer()</span><br><br>sess = tf.<span class="hljs-constructor">Session()</span><br>sess.run(init)<br><br>fig = plt.figure<span class="hljs-literal">()</span><br>ax = fig.add<span class="hljs-constructor">_subplot(1,1,1)</span><br>ax.scatter(x_data,y_data)<br><br>plt.ion<span class="hljs-literal">()</span><br>plt.show<span class="hljs-literal">()</span><br># plt.close<span class="hljs-literal">()</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1000</span>):<br>    sess.run(train_step,feed_dict=&#123;xs:x_data,ys:y_data&#125;)<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">50</span><span class="hljs-operator"> == </span><span class="hljs-number">0</span>:<br>        # print(sess.run(loss,feed_dict=&#123;xs:x_data,ys:y_data&#125;))<br><br>        <span class="hljs-keyword">try</span>:<br>            ax.lines.remove(lines<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>)<br>        except Exception:<br>            pass<br><br>        prediction_value = sess.run(prediction,feed_dict=&#123;xs:x_data&#125;)<br>        lines = ax.plot(x_data,prediction_value,&#x27;r-&#x27;,lw = <span class="hljs-number">3</span>)<br>        plt.pause(<span class="hljs-number">0.5</span>)<br><br><br></code></pre></div></td></tr></table></figure><p>运行的效果<br><img src="https://img-blog.csdn.net/20180407000723874?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TensorFlow学习笔记4</title>
    <link href="/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><strong>placeholder传值</strong></p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">import tensorflow <span class="hljs-keyword">as</span> <span class="hljs-keyword">tf</span><br><br>input1 = <span class="hljs-keyword">tf</span>.placeholder(<span class="hljs-keyword">tf</span>.float32)<br>input2 = <span class="hljs-keyword">tf</span>.placeholder(<span class="hljs-keyword">tf</span>.float32)<br><br>output = <span class="hljs-keyword">tf</span>.multiply(input1,input2)<br><br># with <span class="hljs-keyword">tf</span>.Session <span class="hljs-keyword">as</span> ses<span class="hljs-variable">s:</span><br>sess = <span class="hljs-keyword">tf</span>.Session()<br><span class="hljs-keyword">print</span>(sess.run(output,feed_dict=&#123;input1:[<span class="hljs-number">7</span>.],input2:[<span class="hljs-number">2</span>.]&#125;))<br></code></pre></div></td></tr></table></figure><p>运行的结果</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">[<span class="hljs-number">14.</span>]<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker入门</title>
    <link href="/2021/03/24/%E8%BF%90%E7%BB%B4/Docker/Docker%E5%85%A5%E9%97%A8/"/>
    <url>/2021/03/24/%E8%BF%90%E7%BB%B4/Docker/Docker%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h5 id="Docker入门"><a href="#Docker入门" class="headerlink" title="Docker入门"></a>Docker入门</h5><p>课程地址：<a href="https://www.imooc.com/learn/867">https://www.imooc.com/learn/867</a></p><h5 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h5><p><img src="https://img-blog.csdnimg.cn/20190621221824749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190621221925307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h5><p><img src="https://img-blog.csdnimg.cn/20190622020403160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622020416908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="Dockerfile介绍"><a href="#Dockerfile介绍" class="headerlink" title="Dockerfile介绍"></a>Dockerfile介绍</h5><p>最简单的创建命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> alpine:latest<br><span class="hljs-keyword">MAINTAINER</span> xbf<br><span class="hljs-keyword">CMD</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello Docker&quot;</span></span><br></code></pre></div></td></tr></table></figure><p>然后通过以下命令进行创建，查看，运行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker build -t hello_docker .  // 将该目录下的所有dockerfile文件都进行build<br>docker images hello_docker  // 列出hello_docker的相关信息<br>docker run hello_docker  // 运行hello_docker应用容器<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/201906220222401.png" alt="在这里插入图片描述"><br>再次创建一个镜像并运行</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu<br><span class="hljs-keyword">MAINTAINER</span> mohuani<br><span class="hljs-keyword">RUN</span><span class="bash"> sed -i <span class="hljs-string">&#x27;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get update</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get install -y nginx</span><br><span class="hljs-keyword">COPY</span><span class="bash"> index.html /var/www/html</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;usr/sbin/nginx&quot;</span>, <span class="hljs-string">&quot;-g&quot;</span>, <span class="hljs-string">&quot;daemon off;&quot;</span>]</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker run -d -p 8081:80 hello_nginx<br>curl &quot;http://localhost::8081&quot;<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190622025227208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019062202532895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h5><p><img src="https://img-blog.csdnimg.cn/20190622030745734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622030812364.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622031053524.png" alt="在这里插入图片描述"></p><h5 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h5><p><img src="https://img-blog.csdnimg.cn/20190622031641121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622031906671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622031945395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell'">docker search whalesay<br>docker images  &#x2F;&#x2F; 此处可以忽略<br>docker run docker&#x2F;whalesay cowsay 你真的是傻比<br><br>docker tag docker&#x2F;whalesay mohuani&#x2F;whalesay  &#x2F;&#x2F; 以docker&#x2F;whalesay为模板创建一个名字为mohuani&#x2F;whalesay的镜像<br>docker login<br>docker push mohuani&#x2F;whalesay<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190622032800383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622033555763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登录网站   <a href="https://hub.docker.com/">https://hub.docker.com/</a> 就可以查看自己刚刚上传的镜像信息</p><h5 id="多容器app-docker-compose"><a href="#多容器app-docker-compose" class="headerlink" title="多容器app docker-compose"></a>多容器app docker-compose</h5><p>docker-compose的官方安装教程  <a href="https://docs.docker.com/compose/">https://docs.docker.com/compose/</a></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose<br>sudo chmod +x /usr/local/bin/docker-compose<br>sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose<br>docker-compose --version<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190622040044533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622040730314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622040709707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622044043339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622044131488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Ghost相关的链接<br>Ghost中文网  <a href="http://www.ghostchina.com/">http://www.ghostchina.com/</a><br>Ghost的docker镜像 <a href="https://hub.docker.com/_/ghost">https://hub.docker.com/_/ghost</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker-compose lnmp</title>
    <link href="/2021/03/24/%E8%BF%90%E7%BB%B4/Docker/docker-compose%20lnmp/"/>
    <url>/2021/03/24/%E8%BF%90%E7%BB%B4/Docker/docker-compose%20lnmp/</url>
    
    <content type="html"><![CDATA[<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><p>ubuntu 安装好 docker 和 docker-compose</p><h4 id="编写启动文件"><a href="#编写启动文件" class="headerlink" title="编写启动文件"></a>编写启动文件</h4><ul><li>docker-compose.yml<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">nginx:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">v-nginx</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">80</span><span class="hljs-string">:80</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">443</span><span class="hljs-string">:443</span><br>    <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./nginx/conf.d:/tmp/nginx/conf.d</span><br>    <br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">v-mysql</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql:/tmp/lib/mysql</span><br></code></pre></div></td></tr></table></figure></li></ul><p>运行命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker-compose -f ./docker-compose.yml up -d <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GO语言全栈工程师1</title>
    <link href="/2021/03/24/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%881/"/>
    <url>/2021/03/24/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%881/</url>
    
    <content type="html"><![CDATA[<p>GO语言全栈工程师 基础+就业班：<a href="https://www.bilibili.com/video/av46086727/">https://www.bilibili.com/video/av46086727/</a></p><h5 id="go语言函数详解"><a href="#go语言函数详解" class="headerlink" title="go语言函数详解"></a>go语言函数详解</h5><p>函数可以直接赋值给一个变量<br><img src="https://img-blog.csdnimg.cn/20190620084226797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>map，slice，chan，指针，interface默认都是以引用的范式传递</p><h5 id="函数返回值和参数"><a href="#函数返回值和参数" class="headerlink" title="函数返回值和参数"></a>函数返回值和参数</h5><p><img src="https://img-blog.csdnimg.cn/2019062011291621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620112947325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620113051270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620113608353.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620113540426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h5><p>defer的用途：关闭文件句柄，锁资源释放，数据库连接释放<br><img src="https://img-blog.csdnimg.cn/20190620113941509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620114242786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620114227254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019062011434432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190620171302309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620171454201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Apache ab测试</title>
    <link href="/2020/04/08/%E6%B5%8B%E8%AF%95/Apache%20ab%E6%B5%8B%E8%AF%95/"/>
    <url>/2020/04/08/%E6%B5%8B%E8%AF%95/Apache%20ab%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<ul><li>AB测试中常见的命令<figure class="highlight vhdl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vhdl">ab -help<br>Usage: ab [options] [http[s]://]hostname[:<span class="hljs-keyword">port</span>]/path<br>Options are:<br>    -n requests     Number <span class="hljs-keyword">of</span> requests <span class="hljs-keyword">to</span> perform<br>    -c concurrency  Number <span class="hljs-keyword">of</span> multiple requests <span class="hljs-keyword">to</span> make<br>    -t timelimit    Seconds <span class="hljs-keyword">to</span> max. <span class="hljs-keyword">wait</span> <span class="hljs-keyword">for</span> responses<br>    -b windowsize   Size <span class="hljs-keyword">of</span> TCP send/receive <span class="hljs-keyword">buffer</span>, <span class="hljs-keyword">in</span> bytes<br>    -p postfile     <span class="hljs-keyword">File</span> containing data <span class="hljs-keyword">to</span> POST. Remember also <span class="hljs-keyword">to</span> set -T<br>    -u putfile      <span class="hljs-keyword">File</span> containing data <span class="hljs-keyword">to</span> PUT. Remember also <span class="hljs-keyword">to</span> set -T<br>    -T content-<span class="hljs-keyword">type</span> Content-<span class="hljs-keyword">type</span> header <span class="hljs-keyword">for</span> POSTing, eg.<br>                    <span class="hljs-symbol">&#x27;application</span>/x-www-form-urlencoded&#x27;<br>                    <span class="hljs-keyword">Default</span> <span class="hljs-keyword">is</span> <span class="hljs-symbol">&#x27;text</span>/plain&#x27;<br>    -v verbosity    How much troubleshooting info <span class="hljs-keyword">to</span> print<br>    -w              Print <span class="hljs-keyword">out</span> results <span class="hljs-keyword">in</span> HTML tables<br>    -i              <span class="hljs-keyword">Use</span> HEAD instead <span class="hljs-keyword">of</span> GET<br>    -x attributes   <span class="hljs-built_in">String</span> <span class="hljs-keyword">to</span> insert as table attributes<br>    -y attributes   <span class="hljs-built_in">String</span> <span class="hljs-keyword">to</span> insert as tr attributes<br>    -z attributes   <span class="hljs-built_in">String</span> <span class="hljs-keyword">to</span> insert as td <span class="hljs-keyword">or</span> th attributes<br>    -C <span class="hljs-keyword">attribute</span>    Add cookie, eg. <span class="hljs-symbol">&#x27;Apache</span>=<span class="hljs-number">1234</span>. (repeatable)<br>    -H <span class="hljs-keyword">attribute</span>    Add Arbitrary header <span class="hljs-literal">line</span>, eg. <span class="hljs-symbol">&#x27;Accept</span>-Encoding: gzip&#x27;<br>                    Inserted <span class="hljs-keyword">after</span> <span class="hljs-keyword">all</span> normal header lines. (repeatable)<br>    -A <span class="hljs-keyword">attribute</span>    Add Basic WWW Authentication, the attributes<br>                    are a colon separated username <span class="hljs-keyword">and</span> password.<br>    -P <span class="hljs-keyword">attribute</span>    Add Basic Proxy Authentication, the attributes<br>                    are a colon separated username <span class="hljs-keyword">and</span> password.<br>    -X proxy:<span class="hljs-keyword">port</span>   Proxyserver <span class="hljs-keyword">and</span> <span class="hljs-keyword">port</span> number <span class="hljs-keyword">to</span> <span class="hljs-keyword">use</span><br>    -V              Print version number <span class="hljs-keyword">and</span> <span class="hljs-keyword">exit</span><br>    -k              <span class="hljs-keyword">Use</span> HTTP KeepAlive feature<br>    -d              Do <span class="hljs-keyword">not</span> show percentiles served table.<br>    -S              Do <span class="hljs-keyword">not</span> show confidence estimators <span class="hljs-keyword">and</span> warnings.<br>    -g filename     Output collected data <span class="hljs-keyword">to</span> gnuplot format <span class="hljs-keyword">file</span>.<br>    -e filename     Output CSV <span class="hljs-keyword">file</span> <span class="hljs-keyword">with</span> percentages served<br>    -r              Don<span class="hljs-symbol">&#x27;t</span> <span class="hljs-keyword">exit</span> <span class="hljs-keyword">on</span> socket receive errors.<br>    -h              Display usage information (this message)<br>    -Z ciphersuite  Specify SSL/TLS cipher suite (See openssl ciphers)<br>    -f protocol     Specify SSL/TLS protocol (SSL2, SSL3, TLS1, <span class="hljs-keyword">or</span> <span class="hljs-keyword">ALL</span>)<br></code></pre></div></td></tr></table></figure></li><li>吞吐率（Requests per second）<br>服务器并发处理能力的量化描述，单位是reqs/s，指的是在某个并发用户数下单位时间内处理的请求数。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。<br>note：吞吐率是基于并发用户数的。这句话代表了两个含义：<br>a、吞吐率和并发用户数相关<br>b、不同的并发用户数下，吞吐率一般是不同的<br>计算公式：总请求数/处理完成这些请求数所花费的时间，即</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">Request <span class="hljs-keyword">per</span> <span class="hljs-keyword">second</span><span class="hljs-operator">=</span>Complete requests<span class="hljs-operator">/</span><span class="hljs-type">Time</span> taken <span class="hljs-keyword">for</span> tests<br></code></pre></div></td></tr></table></figure><ul><li><p>并发连接数（The number of concurrent connections）<br>并发连接数指的是某个时刻服务器所接受的请求数目，简单的讲，就是一个会话。</p></li><li><p>并发用户数（Concurrency Level）<br>要注意区分这个概念和并发连接数之间的区别，一个用户可能同时会产生多个会话，也即连接数。在HTTP/1.1下，IE7支持两个并发连接，IE8支持6个并发连接，FireFox3支持4个并发连接，所以相应的，我们的并发用户数就得除以这个基数。</p></li></ul><ul><li>用户平均请求等待时间（Time per request）<br>计算公式：处理完成所有请求数所花费的时间/（总请求数/并发用户数），即：<br>Time per request=Time taken for tests/（Complete requests/Concurrency Level）</li></ul><ul><li>服务器平均请求等待时间（Time per request:across all concurrent requests）</li></ul><p> <strong>下面是对慕课网首页 <a href="https://www.imooc.com/">https://www.imooc.com/</a> 做的一个简单的测试</strong></p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">ab</span> -<span class="hljs-keyword">c</span> <span class="hljs-number">10</span> -n <span class="hljs-number">100</span> http<span class="hljs-variable">s:</span>//www.imooc.<span class="hljs-keyword">com</span>/<br>  -<span class="hljs-keyword">c</span> concurrency  Number of multiple requests <span class="hljs-keyword">to</span> <span class="hljs-keyword">make</span>   表示并发用户数为<span class="hljs-number">10</span><br>  -t timelimit    Seconds <span class="hljs-keyword">to</span> <span class="hljs-built_in">max</span>. wait <span class="hljs-keyword">for</span> responses    表示请求总数为<span class="hljs-number">100</span><br></code></pre></div></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">ab</span> <span class="hljs-string">-c</span> <span class="hljs-number">10</span> <span class="hljs-string">-n</span> <span class="hljs-number">100</span> <span class="hljs-string">https://www.imooc.com/</span><br><span class="hljs-string">This</span> <span class="hljs-string">is</span> <span class="hljs-string">ApacheBench,</span> <span class="hljs-string">Version</span> <span class="hljs-number">2.3</span> <span class="hljs-string">&lt;$Revision:</span> <span class="hljs-number">655654</span> <span class="hljs-string">$&gt;</span><br><span class="hljs-string">Copyright</span> <span class="hljs-number">1996 </span><span class="hljs-string">Adam</span> <span class="hljs-string">Twiss,</span> <span class="hljs-string">Zeus</span> <span class="hljs-string">Technology</span> <span class="hljs-string">Ltd,</span> <span class="hljs-string">http://www.zeustech.net/</span><br><span class="hljs-string">Licensed</span> <span class="hljs-string">to</span> <span class="hljs-string">The</span> <span class="hljs-string">Apache</span> <span class="hljs-string">Software</span> <span class="hljs-string">Foundation,</span> <span class="hljs-string">http://www.apache.org/</span><br><br><span class="hljs-string">Benchmarking</span> <span class="hljs-string">www.imooc.com</span> <span class="hljs-string">(be</span> <span class="hljs-string">patient).....done</span><br><br><br><span class="hljs-attr">Server Software:</span>        <span class="hljs-string">nginx</span><br><span class="hljs-attr">Server Hostname:</span>        <span class="hljs-string">www.imooc.com</span><br><span class="hljs-attr">Server Port:</span>            <span class="hljs-number">443</span><br><span class="hljs-attr">SSL/TLS Protocol:</span>       <span class="hljs-string">TLSv1/SSLv3,ECDHE-RSA-AES128-GCM-SHA256,2048,128</span><br><br><span class="hljs-attr">Document Path:</span>          <span class="hljs-string">/</span><br><span class="hljs-attr">Document Length:</span>        <span class="hljs-number">249325</span> <span class="hljs-string">bytes</span><br><br><span class="hljs-attr">Concurrency Level:</span>      <span class="hljs-number">10</span><br><span class="hljs-attr">Time taken for tests:</span>   <span class="hljs-number">5.677</span> <span class="hljs-string">seconds</span><br><span class="hljs-attr">Complete requests:</span>      <span class="hljs-number">100</span><br><span class="hljs-attr">Failed requests:</span>        <span class="hljs-number">0</span><br><span class="hljs-attr">Write errors:</span>           <span class="hljs-number">0</span><br><span class="hljs-attr">Total transferred:</span>      <span class="hljs-number">25586992</span> <span class="hljs-string">bytes</span><br><span class="hljs-attr">HTML transferred:</span>       <span class="hljs-number">25554135</span> <span class="hljs-string">bytes</span><br><span class="hljs-attr">Requests per second:</span>    <span class="hljs-number">17.62</span> [<span class="hljs-comment">#/sec] (mean)</span><br><span class="hljs-attr">Time per request:</span>       <span class="hljs-number">567.674</span> [<span class="hljs-string">ms</span>] <span class="hljs-string">(mean)</span><br><span class="hljs-attr">Time per request:</span>       <span class="hljs-number">56.767</span> [<span class="hljs-string">ms</span>] <span class="hljs-string">(mean</span>, <span class="hljs-string">across</span> <span class="hljs-string">all</span> <span class="hljs-string">concurrent</span> <span class="hljs-string">requests)</span><br><span class="hljs-attr">Transfer rate:</span>          <span class="hljs-number">4401.70</span> [<span class="hljs-string">Kbytes/sec</span>] <span class="hljs-string">received</span><br><br><span class="hljs-string">Connection</span> <span class="hljs-string">Times</span> <span class="hljs-string">(ms)</span><br>              <span class="hljs-string">min</span>  <span class="hljs-string">mean</span>[<span class="hljs-string">+/-sd</span>] <span class="hljs-string">median</span>   <span class="hljs-string">max</span><br><span class="hljs-attr">Connect:</span>      <span class="hljs-number">106</span>  <span class="hljs-number">201</span> <span class="hljs-number">244.8</span>    <span class="hljs-number">123</span>    <span class="hljs-number">1124</span><br><span class="hljs-attr">Processing:</span>   <span class="hljs-number">213</span>  <span class="hljs-number">304</span> <span class="hljs-number">179.8</span>    <span class="hljs-number">256</span>    <span class="hljs-number">1437</span><br><span class="hljs-attr">Waiting:</span>       <span class="hljs-number">64</span>  <span class="hljs-number">110</span> <span class="hljs-number">109.8</span>     <span class="hljs-number">77</span>     <span class="hljs-number">624</span><br><span class="hljs-attr">Total:</span>        <span class="hljs-number">322</span>  <span class="hljs-number">505</span> <span class="hljs-number">298.0</span>    <span class="hljs-number">388</span>    <span class="hljs-number">1550</span><br><br><span class="hljs-string">Percentage</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">requests</span> <span class="hljs-string">served</span> <span class="hljs-string">within</span> <span class="hljs-string">a</span> <span class="hljs-string">certain</span> <span class="hljs-string">time</span> <span class="hljs-string">(ms)</span><br>  <span class="hljs-number">50</span><span class="hljs-string">%</span>    <span class="hljs-number">388</span><br>  <span class="hljs-number">66</span><span class="hljs-string">%</span>    <span class="hljs-number">430</span><br>  <span class="hljs-number">75</span><span class="hljs-string">%</span>    <span class="hljs-number">449</span><br>  <span class="hljs-number">80</span><span class="hljs-string">%</span>    <span class="hljs-number">470</span><br>  <span class="hljs-number">90</span><span class="hljs-string">%</span>    <span class="hljs-number">885</span><br>  <span class="hljs-number">95</span><span class="hljs-string">%</span>   <span class="hljs-number">1366</span><br>  <span class="hljs-number">98</span><span class="hljs-string">%</span>   <span class="hljs-number">1498</span><br>  <span class="hljs-number">99</span><span class="hljs-string">%</span>   <span class="hljs-number">1550</span><br> <span class="hljs-number">100</span><span class="hljs-string">%</span>   <span class="hljs-number">1550</span> <span class="hljs-string">(longest</span> <span class="hljs-string">request)</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
