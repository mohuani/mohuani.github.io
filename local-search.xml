<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <url>/2021/12/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>接口时间优化</title>
    <link href="/2021/12/07/PHP/%E6%8E%A5%E5%8F%A3%E6%97%B6%E9%97%B4%E4%BC%98%E5%8C%96/"/>
    <url>/2021/12/07/PHP/%E6%8E%A5%E5%8F%A3%E6%97%B6%E9%97%B4%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<blockquote><p>背景，一个详情接口（需要主单和子单里面的sku信息和store门店信息），执行时间大概30秒左右，时间太长了</p></blockquote><p>表结构</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> adjust_price<br>(<br>    id              <span class="hljs-type">bigint</span> unsigned auto_increment<br>        <span class="hljs-keyword">primary</span> key,<br>    name            <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)  <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;调价单名称&#x27;</span>,<br>    start_at        datetime                <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;调价开始时间&#x27;</span>,<br>    end_at          datetime                <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;调价结束时间&#x27;</span>,<br>    description     <span class="hljs-type">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;调价单描述&#x27;</span>,<br>    sell_channel_id <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>  <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;销售渠道id&#x27;</span>,<br>    create_by       <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>  <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建人&#x27;</span>,<br>    update_by       <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>  <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;更新人&#x27;</span>,<br>    created_at      <span class="hljs-type">timestamp</span>               <span class="hljs-keyword">null</span>,<br>    updated_at      <span class="hljs-type">timestamp</span>               <span class="hljs-keyword">null</span>,<br>    deleted_at      <span class="hljs-type">timestamp</span>               <span class="hljs-keyword">null</span><br>)<br>    comment <span class="hljs-string">&#x27;调价单主表&#x27;</span> <span class="hljs-keyword">collate</span> <span class="hljs-operator">=</span> utf8mb4_unicode_ci;<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> adjust_price_product_sku_store<br>(<br>    id              <span class="hljs-type">bigint</span> unsigned auto_increment<br>        <span class="hljs-keyword">primary</span> key,<br>    adjust_price_id <span class="hljs-type">int</span> unsigned   <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>    <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;调价单id&#x27;</span>,<br>    sell_channel_id <span class="hljs-type">int</span> unsigned   <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>    <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;销售渠道id&#x27;</span>,<br>    sku_id          <span class="hljs-type">int</span> unsigned   <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>    <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;渠道skuId&#x27;</span>,<br>    promotion_price <span class="hljs-type">decimal</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">default</span> <span class="hljs-number">0.00</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;促销价&#x27;</span>,<br>    store_id        <span class="hljs-type">int</span> unsigned   <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>    <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;门店id&#x27;</span>,<br>    start_at        datetime                    <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;调价开始时间&#x27;</span>,<br>    end_at          datetime                    <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;调价结束时间&#x27;</span>,<br>    created_at      <span class="hljs-type">timestamp</span>                   <span class="hljs-keyword">null</span>,<br>    updated_at      <span class="hljs-type">timestamp</span>                   <span class="hljs-keyword">null</span>,<br>    deleted_at      <span class="hljs-type">timestamp</span>                   <span class="hljs-keyword">null</span><br>)<br>    comment <span class="hljs-string">&#x27;调价单子表&#x27;</span> <span class="hljs-keyword">collate</span> <span class="hljs-operator">=</span> utf8mb4_unicode_ci;<br><br></code></pre></div></td></tr></table></figure><h3 id="常规做法"><a href="#常规做法" class="headerlink" title="常规做法"></a>常规做法</h3><p>skuId数量M = 100, storeId的数量N = 450，做笛卡尔积组合，那么子表adjust_price_product_sku_store每次插入的数据会有 M*N条，大概45000条。如果使用Laravel框架，detail 接口常规做法，通过做法通过with把子表带出来</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">AdjustPrice::whereId(<span class="hljs-variable">$id</span>)-&gt;with([<span class="hljs-string">&#x27;adjustPriceStoreGroup&#x27;</span>, <span class="hljs-string">&#x27;adjustPriceProductSkuStore&#x27;</span>])-&gt;first();<br><br></code></pre></div></td></tr></table></figure><p>但是，这样带出的主子表数据会特别多，数据大小大概11Mb，执行时间大概10s，外加一些逻辑处理接口的整体响应时间大概25s左右，用户体验特别不好。优化思路：将子表的数据数量级进行降级处理，把 <code>M*N</code> 的数量级，变成 <code>M+N</code> 的数量级</p><h3 id="优化做法"><a href="#优化做法" class="headerlink" title="优化做法"></a>优化做法</h3><ul><li>查询某个调价单 <code>adjust_price</code> 第一条子表的数据 <code>adjust_price_product_sku_store</code></li></ul><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$adjustPriceProductSkuStore</span> = app(AdjustPriceProductSkuStoreRepository::class)-&gt;getByAdjustPriceIdLimitOne(<span class="hljs-variable">$adjustPrice</span>-&gt;id);<br><br><br>select sku_id, store_id <span class="hljs-keyword">from</span> adjust_price_product_sku_store limit <span class="hljs-number">1</span>;<br></code></pre></div></td></tr></table></figure><ul><li><p>通过第一条记录，找出来一个storeId，通过storeId获取所有的skuIds</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$adjustPriceProductSkuStoresToGetSkuIds</span> = app(AdjustPriceProductSkuStoreRepository::class)-&gt;list([<br>    <span class="hljs-string">&#x27;adjustPriceId&#x27;</span> =&gt; <span class="hljs-variable">$adjustPrice</span>-&gt;id,<br>    <span class="hljs-string">&#x27;storeId&#x27;</span>       =&gt; <span class="hljs-variable">$adjustPriceProductSkuStore</span>-&gt;store_id,<br>]);<br><br><span class="hljs-variable">$skuIds</span> = collect(adjustPriceProductSkuStoresToGetSkuIds)-&gt;plick(<span class="hljs-string">&#x27;sku_id&#x27;</span>)-&gt;toArray();<br></code></pre></div></td></tr></table></figure></li><li><p>通过第一条记录，找出来一个skuId，通过skuId获取所有的storeIds</p></li></ul><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><br><span class="hljs-variable">$adjustPriceProductSkuStoresToGetStoreIds</span> = app(AdjustPriceProductSkuStoreRepository::class)-&gt;list([<br>    <span class="hljs-string">&#x27;adjustPriceId&#x27;</span> =&gt; <span class="hljs-variable">$adjustPrice</span>-&gt;id,<br>    <span class="hljs-string">&#x27;skuId&#x27;</span>         =&gt; <span class="hljs-variable">$adjustPriceProductSkuStore</span>-&gt;sku_id,<br>]);<br><br><span class="hljs-variable">$storeIds</span> = collect(adjustPriceProductSkuStoresToGetStoreIds)-&gt;plick(<span class="hljs-string">&#x27;store_id&#x27;</span>)-&gt;toArray();<br><br></code></pre></div></td></tr></table></figure><h3 id="最终效果："><a href="#最终效果：" class="headerlink" title="最终效果："></a>最终效果：</h3><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">时间从 <span class="hljs-number"> 20 </span>秒 降到了 1秒<br>数据从11Mb 降到了 400Kb<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>接口时间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>接口时间</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间段交集计算</title>
    <link href="/2021/12/05/PHP/%E6%97%B6%E9%97%B4%E4%BA%A4%E9%9B%86/"/>
    <url>/2021/12/05/PHP/%E6%97%B6%E9%97%B4%E4%BA%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>文章转发自：<a href="https://www.jianshu.com/p/b571bc0a4372">https://www.jianshu.com/p/b571bc0a4372</a></p><h3 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h3><p>逻辑很简单，就是一两个日期段取交集，可如果按正常思维去实现，其实日期交集的场景我们可以穷举出来，大概有4种情况</p><p>1、</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">s1</span><span class="hljs-comment">--------------e1</span><br>    s2<span class="hljs-comment">-----------------e2</span><br></code></pre></div></td></tr></table></figure><p>2、</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">    s1<span class="hljs-comment">--------------e1</span><br><span class="hljs-title">s2</span><span class="hljs-comment">-----------e2</span><br></code></pre></div></td></tr></table></figure><p>3、     </p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">s1</span><span class="hljs-comment">-----------------e1</span><br>    s2<span class="hljs-comment">-------e2</span><br></code></pre></div></td></tr></table></figure><p>4、</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">     s1<span class="hljs-comment">-------e1</span><br><span class="hljs-title">s2</span><span class="hljs-comment">-----------------------e2</span><br><br></code></pre></div></td></tr></table></figure><p>如果按这种逻辑实现我们的表达式可能至少要写4种情况，逻辑复杂，且可读性差</p><h3 id="逆向思维"><a href="#逆向思维" class="headerlink" title="逆向思维"></a>逆向思维</h3><p>这是软件开发中非常重要的思维模式，在程序员数学中有重点介绍。<br>这里提到的程序员数学，是一套书，包括程序员基础数学，概率论和线性代数，同时也是进入机器学习的基础理论，有兴趣的朋友可以买回来读一读。<br>我们通过个例子，来实践一下逆向思维。<br>其实如果按取交集的逻辑来看，上面穷举出来有4 种情况。<br>但我们反过来想(逆向)<br>没有交集的情况只有两种可能</p><p>1、</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">            s1<span class="hljs-comment">-------------e1</span><br><span class="hljs-title">s2</span><span class="hljs-comment">------e2</span><br></code></pre></div></td></tr></table></figure><p>2、</p><figure class="highlight autohotkey"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autohotkey">    s1------e1<br>                s2--------------e2<br><br>```  <br>我们设两个时间段的日期为`s1(start)-e1(end)`和`s2-e2`，通过逆向推导可以推出下列表达式<br><br>这里我们假定<br><br></code></pre></div></td></tr></table></figure><p>s1&lt;e1 &amp; s2&lt;e2</p><figure class="highlight excel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs excel">=&gt;<br></code></pre></div></td></tr></table></figure><p>e2&lt;s1||e1&lt;s2</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain"><br>说明满足该条件是不可能产生交集。上述表达式翻译成业务语言即，第一个时间段已经结束，第二个时间段还没未开始，通过对表达式取非即所有存在交集的情况<br><br></code></pre></div></td></tr></table></figure><p>!(e2&lt;s1||e1&lt;s2)</p><figure class="highlight excel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs excel">=&gt;<br></code></pre></div></td></tr></table></figure><p>e2&gt;=s1&amp;&amp;e1&gt;=s2</p><div class="hljs code-wrapper"><pre><code>这个就可以做为时间取交集的最终表达式，这里有一点非常重要，这个时间段我们有条件的`s1&lt;e1 &amp; s2&lt;e2`这是表达式成立的充分条件</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>交集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>交集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>composer1和2的区别</title>
    <link href="/2021/10/27/PHP/Composer/composer1%E5%92%8C2%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/10/27/PHP/Composer/composer1%E5%92%8C2%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>近期项目框架由Laravel5.7 升级到 Laravel8.x，其中composer也由composer1升级到composer2，理一下composer1和composer2的异同</p></blockquote><h3 id="为什么会有composer2，composer2新特性"><a href="#为什么会有composer2，composer2新特性" class="headerlink" title="为什么会有composer2，composer2新特性"></a>为什么会有composer2，composer2新特性</h3><h3 id="composer2解决了composer1的哪些问题"><a href="#composer2解决了composer1的哪些问题" class="headerlink" title="composer2解决了composer1的哪些问题"></a>composer2解决了composer1的哪些问题</h3>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Composer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Composer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka</title>
    <link href="/2021/10/27/%E6%95%B0%E6%8D%AE%E5%BA%93/Kafka/Kafka/"/>
    <url>/2021/10/27/%E6%95%B0%E6%8D%AE%E5%BA%93/Kafka/Kafka/</url>
    
    <content type="html"><![CDATA[<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h3 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h3><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>Kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticStack分享</title>
    <link href="/2021/10/27/%E6%95%B0%E6%8D%AE%E5%BA%93/Elasticsearch/ElasticStack%E5%88%86%E4%BA%AB/"/>
    <url>/2021/10/27/%E6%95%B0%E6%8D%AE%E5%BA%93/Elasticsearch/ElasticStack%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h3 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h3><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h3 id="页面脚手架"><a href="#页面脚手架" class="headerlink" title="页面脚手架"></a>页面脚手架</h3><h3 id="常见使用"><a href="#常见使用" class="headerlink" title="常见使用"></a>常见使用</h3><h3 id="与其他数据库的异同"><a href="#与其他数据库的异同" class="headerlink" title="与其他数据库的异同"></a>与其他数据库的异同</h3>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>ElasticStack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>ElasticStack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈 RocketMQ、Kafka、Pulsar的事务消息</title>
    <link href="/2021/10/13/%E5%88%86%E5%B8%83%E5%BC%8F/%E6%B5%85%E8%B0%88%20RocketMQ%E3%80%81Kafka%E3%80%81Pulsar%E7%9A%84%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/"/>
    <url>/2021/10/13/%E5%88%86%E5%B8%83%E5%BC%8F/%E6%B5%85%E8%B0%88%20RocketMQ%E3%80%81Kafka%E3%80%81Pulsar%E7%9A%84%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<p>原文链接 <a href="https://mp.weixin.qq.com/s/XslSlWWD1oSZMOz35sUTVA">浅谈 RocketMQ、Kafka、Pulsar 的事务消息</a></p><blockquote><p>导语</p></blockquote><p>事务是一个程序执行单元，里面的所有操作要么全部执行成功，要么全部执行失败。RocketMQ、Kafka 和 Pulsar 都是当今业界应用十分广泛的开源消息队列（MQ）组件，笔者在工作中遇到关于 MQ 选型相关的内容，了解到关于“事务消息”这个概念在不同的 MQ 组件里有不同内涵。故借此文，试着浅析一番这三种消息队列（MQ）的事务消息有何异同，目的是形成关于消息队列事务消息的全景视图，给有类似业务需求的同学提供一些参考和借鉴。</p><blockquote><p>一、消息队列演化</p></blockquote><p>消息队列（Message Queue，简称 MQ），是指在消息的传输中保存消息的容器或服务，是一种异步的服务间通信方式，适用于无服务器和微服务架构，是分布式系统实现高性能、高可用、可伸缩等高级特效的重要组件。常见的主流消息队列有 ActiveMQ、RabbitMQ、ZeroMQ、Kafka、MetaMQ、RocketMQ、Pulsar 等。而在公司内有 TubeMQ、Ckafka、TDMQ、CMQ、CDMQ、Hippo 等。</p><p><img src="https://user-images.githubusercontent.com/21000558/137074198-1bac8ff0-194c-4d83-9fca-e87d3923ea8c.png" alt="image"></p><p>Kafka：Apache Kafka 是由 Apache 软件基金会开发的一个开源消息系统项目，由 Scala 写成。Kafka 最初是由 LinkedIn 开发，并于 2011 年初开源。2012 年 10 月从 Apache Incubator 毕业。该项目的目标是为处理实时数据提供一个统一、高通量、低等待的平台。Kafka 是一个分布式的、分区的、多复本的日志提交服务。它通过一种独一无二的设计提供了一个消息系统的功能，其整体架构图如下所示。</p><p><img src="https://user-images.githubusercontent.com/21000558/137074233-83c27b1a-5edf-4428-8117-bfaf95df9098.png" alt="image"></p><p>RocketMQ：Apache RocketMQ 是一个分布式消息和流媒体平台，具有低延迟、强一致、高性能和可靠性、万亿级容量和灵活的可扩展性。它有借鉴 Kafka 的设计思想，但不是 kafka 的拷贝，其整体架构图如下所示。</p><p><img src="https://user-images.githubusercontent.com/21000558/137074259-ed7df410-1362-4aff-8380-858c0c001c67.png" alt="image"></p><p>Pulsar：Apache Pulsar 是 Apache 软件基金会顶级项目，是下一代云原生分布式消息流平台，集消息、存储、轻量化函数式计算为一体，采用计算与存储分离架构设计，支持多租户、持久化存储、多机房跨区域数据复制，具有强一致性、高吞吐、低延时及高可扩展性等流数据存储特性，被看作是云原生时代实时消息流传输、存储和计算最佳解决方案，其整体架构图如下所示。</p><p><img src="https://user-images.githubusercontent.com/21000558/137074285-d52dfd5b-76eb-488c-9564-613563159900.png" alt="image"></p><blockquote><p>二、背景知识</p></blockquote><h3 id="2-1-什么是事务？"><a href="#2-1-什么是事务？" class="headerlink" title="2.1 什么是事务？"></a>2.1 什么是事务？</h3><h4 id="2-1-1-事务（Trasaction）"><a href="#2-1-1-事务（Trasaction）" class="headerlink" title="2.1.1 事务（Trasaction）"></a>2.1.1 事务（Trasaction）</h4><p>事务是一个程序执行单元，里面的所有操作要么全部执行成功，要么全部执行失败。</p><p>一个事务有四个基本特性，也就是我们常说的（ACID）。</p><ul><li>Atomicity（原子性） ：事务是一个不可分割的整体，事务内所有操作要么全做成功，要么全失败。</li><li>Consistency（一致性） ：事务执行前后，数据从一个状态到另一个状态必须是一致的（A 向 B 转账，不能出现 A 扣了钱，B 却没收到）。</li><li>Isolation（隔离性）：多个并发事务之间相互隔离，不能互相干扰。</li><li>Durablity（持久性） ：事务完成后，对数据的更改是永久保存的，不能回滚。</li></ul><h4 id="2-1-2-分布式事务"><a href="#2-1-2-分布式事务" class="headerlink" title="2.1.2 分布式事务"></a>2.1.2 分布式事务</h4><p>分布式事务是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。分布式事务通常用于在分布式系统中保证不同节点之间的数据一致性。</p><p>分布式事务的解决方案一般有以下几种：</p><p><strong>XA（2PC/3PC）</strong></p><p>最具有代表性的是由 Oracle Tuxedo 系统提出的 XA 分布式事务协议。XA 中大致分为两部分：事务管理器和本地资源管理器。其中本地资源管理器往往由数据库实现，比如 Oracle、DB2 这些商业数据库都实现了 XA 接口，而事务管理器作为全局的调度者，负责各个本地资源的提交和回滚。XA 协议通常包含<strong>两阶段提交（2PC）和三阶段提交（3PC）</strong>两种实现。两阶段提交顾名思义就是要进行两个阶段的提交：第一阶段，准备阶段(投票阶段) ；第二阶段，提交阶段（执行阶段）。实现过程如下所示：</p><p><img src="https://user-images.githubusercontent.com/21000558/137074327-efea9e7f-a08a-45c8-8156-3aca20a2b976.png" alt="image"></p><p>二阶段提交看似能够提供原子性的操作，但它存在着一些缺陷，三段提交（3PC）是对两段提交（2PC）的一种升级优化，有兴趣的可以深入了解一下，这里不再赘述。</p><p><strong>TCC</strong></p><p>TCC（Try-Confirm-Cancel）是 Try、Commit、Cancel 三种指令的缩写，又被称补偿事务，其逻辑模式类似于 XA 两阶段提交，事务处理流程也很相似，但 2PC 是应用于在 DB 层面，TCC 则可以理解为在应用层面的 2PC，是需要我们编写业务逻辑来实现。</p><p>TCC 它的核心思想是：”针对每个操作都要注册一个与其对应的确认（Try）和补偿（Cancel）”。</p><p><strong>消息事务</strong></p><p>所谓的消息事务就是基于消息队列的两阶段提交，本质上是对消息队列的一种特殊利用，它是将本地事务和发消息放在了一个分布式事务里，保证要么本地操作成功成功并且对外发消息成功，要么两者都失败。</p><p>基于消息队列的两阶段提交往往用在高并发场景下，将一个分布式事务拆成一个消息事务（A 系统的本地操作+发消息）+B 系统的本地操作，其中 B 系统的操作由消息驱动，只要消息事务成功，那么 A 操作一定成功，消息也一定发出来了，这时候 B 会收到消息去执行本地操作，如果本地操作失败，消息会重投，直到 B 操作成功，这样就变相地实现了 A 与 B 的分布式事务。原理如下：</p><p><img src="https://user-images.githubusercontent.com/21000558/137074358-08339a30-9dae-471f-a03f-7ca124088206.png" alt="image"></p><p>虽然上面的方案能够完成 A 和 B 的操作，但是 A 和 B 并不是强一致的，而是最终一致（Eventually consistent）的。而这也是满足 BASE 理论的要求的。这里引申一下，BASE 是 Basically Available（基本可用）、Soft state（软状态）和 Eventually consistent （最终一致性）三个短语的缩写。BASE 理论是对 CAP 中 AP （CAP 已经被证实一个分布式系统最多只能同时满足 CAP 三项中的两项）的一个扩展，通过牺牲强一致性来获得可用性，当出现故障允许部分不可用但要保证核心功能可用，允许数据在一段时间内是不一致的，但最终达到一致状态。满足 BASE 理论的事务，我们称之为“柔性事务”。</p><h3 id="2-2-什么是-Exactly-once-精确一次-语义"><a href="#2-2-什么是-Exactly-once-精确一次-语义" class="headerlink" title="2.2 什么是 Exactly-once (精确一次)语义?"></a>2.2 什么是 Exactly-once (精确一次)语义?</h3><p>在分布式系统中，任何节点都有可能出现异常甚至宕机。在 消息队列中也一样，当 Producer 在生产消息时，可能会发生 Broker 宕机不可用，或者网络突然中断等异常情况。根据在发生异常时 Producer 处理消息的方式，系统可以具备以下三种消息语义。</p><h4 id="2-2-1-At-least-once-至少一次-语义"><a href="#2-2-1-At-least-once-至少一次-语义" class="headerlink" title="2.2.1 At-least-once (至少一次)语义"></a>2.2.1 At-least-once (至少一次)语义</h4><p>Producer 通过接收 Broker 的 ACK （消息确认）通知来确保消息成功写入 Topic。然而，当 Producer 接收 ACK 通知超时，或者收到 Broker 出错信息时，会尝试重新发送消息。如果 Broker 正好在成功把消息写入到 Topic，但还没有给 Producer 发送 ACK 时宕机，Producer 重新发送的消息会被再次写入到 Topic，最终导致消息被重复分发至 Consumer。即：消息不会丢失，但有可能被重复发送。</p><h4 id="2-2-2-At-most-once-最多一次-语义"><a href="#2-2-2-At-most-once-最多一次-语义" class="headerlink" title="2.2.2 At-most-once (最多一次)语义"></a>2.2.2 At-most-once (最多一次)语义</h4><p>当 Producer 在接收 ACK 超时，或者收到 Broker 出错信息时不重发消息，那就有可能导致这条消息丢失，没有写入到 Topic 中，也不会被 Consumer 消费到。在某些场景下，为了避免发生重复消费，我们可以容许消息丢失的发生。即：消息可能会丢失，但绝不会被重复发送。</p><h4 id="2-2-3-Exactly-once-精确一次-语义"><a href="#2-2-3-Exactly-once-精确一次-语义" class="headerlink" title="2.2.3 Exactly-once (精确一次)语义"></a>2.2.3 Exactly-once (精确一次)语义</h4><p><strong>Exactly-once 语义保证了即使 Producer 多次发送同一条消息到服务端，服务端也仅仅会记录一次。</strong>Exactly-once 语义是最可靠的，同时也是最难理解的。Exactly-once 语义需要消息队列服务端，消息生产端和消费端应用三者的协同才能实现。比如，当消费端应用成功消费并且 ACK 了一条消息之后，又把消费位点回滚到之前的一个消息 ID，那么从那个消息 ID 往后的所有消息都会被消费端应用重新消费到。即：消息不会丢失，也不会被重复发送。</p><blockquote><p>三、RocketMQ、Kafka、Pulsar 事务消息</p></blockquote><h3 id="3-1-RocketMQ-的事务消息"><a href="#3-1-RocketMQ-的事务消息" class="headerlink" title="3.1 RocketMQ 的事务消息"></a>3.1 RocketMQ 的事务消息</h3><p>RocketMQ 在 4.3.0 版中已经支持分布式事务消息，这里 RocketMQ 采用了 2PC 的思想来实现了提交事务消息，同时增加一个补偿逻辑来处理二阶段超时或者失败的消息，流程如下图所示：</p><p><img src="https://user-images.githubusercontent.com/21000558/137075415-7104c161-55cb-48b2-a9d8-7ec5cd7aa514.png" alt="image"></p><p>其具体工作流程分为正常事务消息的发送及提交和不正常情况下事务消息的补偿流程：</p><p>1.在消息队列上开启一个事务主题。2.事务中第一个执行的服务发送一条“半消息”（半消息和普通消息的唯一区别是，在事务提交之前，对于消费者来说，这个消息是不可见的）给消息队列。3.半消息发送成功后，发送半消息的服务就会开始执行本地事务，根据本地事务执行结果来决定事务消息提交或者回滚。</p><p>补偿流程：RocketMQ 提供事务反查来解决异常情况，如果 RocketMQ 没有收到提交或者回滚的请求，Broker 会定时到生产者上去反查本地事务的状态，然后根据生产者本地事务的状态来处理这个“半消息”是提交还是回滚。值得注意的是我们需要根据自己的业务逻辑来实现反查逻辑接口，然后根据返回值 Broker 决定是提交还是回滚。而且这个反查接口需要是无状态的，请求到任意一个生产者节点都会返回正确的数据。4.本地事务成功后会让这个“半消息”变成正常消息，供分布式事务后面的步骤执行自己的本地事务。（这里的事务消息，Producer 不会因为 Consumer 消费失败而做回滚，采用事务消息的应用，其所追求的是高可用和最终一致性，消息消费失败的话，RocketMQ 自己会负责重推消息，直到消费成功。）</p><p>其中，补偿流程用于解决消息 Commit 或者 Rollback 发生超时或者失败的情况。在 RocketMQ 事务消息的主要流程中，一阶段的消息如何对用户不可见。其中，事务消息相对普通消息最大的特点就是一阶段发送的消息对用户是不可见的。那么，如何做到写入消息但是对用户不可见呢？RocketMQ 事务消息的做法是：如果消息是“半消息”，将备份原消息的主题与消息消费队列，然后改变主题为 RMQ_SYS_TRANS_HALF_TOPIC。由于消费组未订阅该主题，故消费端无法消费“半消息”的消息，然后 RocketMQ 会开启一个定时任务，从 Topic 为 RMQ_SYS_TRANS_HALF_TOPIC 中拉取消息进行消费，根据生产者组获取一个服务提供者发送回查事务状态请求，根据事务状态来决定是提交或回滚消息。</p><p>讲到这里大家就明白了，这里说的就是 2.1.2 节里提到分布式事务中的消息事务，目的是在分布式事务中实现系统的最终一致性。</p><h3 id="3-2-Kafka-的事务消息"><a href="#3-2-Kafka-的事务消息" class="headerlink" title="3.2 Kafka 的事务消息"></a>3.2 Kafka 的事务消息</h3><p>与 RocketMQ 的事务消息用途不同，Kafka 的事务基本上是配合其幂等机制来实现 Exactly-once （见 2.2.3 节）语义的。</p><p>开发此功能的原因可以总结如下。</p><p>流处理的需求随着流处理的兴起，对具有更强处理保证的流处理应用的需求也在增长。例如，在金融行业，金融机构使用流处理引擎为用户处理借款和信贷。这种类型的用例要求每条消息都只处理一次，无一例外。</p><p>换句话说，如果流处理应用程序消费消息 A 并将结果作为消息 B (B = f(A))，那么恰好一次处理保证意味着当且仅当 B 被成功生产后 A 才能被标记为消费，反之亦然。</p><p><img src="https://user-images.githubusercontent.com/21000558/137075453-5d3373ee-d6f5-451e-9a6c-218e6923d7d4.png" alt="image"></p><p>事务 API 使流处理应用程序能够在一个原子操作中使用、处理和生成消息。这意味着，事务中的一批消息可以从许多主题分区接收、生成和确认。一个事务涉及的所有操作都作为整体成功或失败。</p><p>目前，Kafka 默认提供的交付可靠性保障是 At-least-once。如果消息成功“提交”，但 Broker 的应答没有成功发送回 Producer 端（比如网络出现瞬时抖动），那么 Producer 就无法确定消息是否真的提交成功了。因此，它只能选择重试，这就是 Kafka 默认提供 At-least-once 保障的原因，不过这会导致消息重复发送。大部分用户还是希望消息只会被交付一次，这样的话，消息既不会丢失，也不会被重复处理。或者说，即使 Producer 端重复发送了相同的消息，Broker 端也能做到自动去重。在下游 Consumer 看来，消息依然只有一条。那么问题来了，Kafka 是怎么做到精确一次的呢？简单来说，这是通过两种机制：幂等性（Idempotence）和事务（Transaction）。</p><h4 id="3-2-1-幂等性-Producer"><a href="#3-2-1-幂等性-Producer" class="headerlink" title="3.2.1 幂等性 Producer"></a>3.2.1 幂等性 Producer</h4><p>“幂等”这个词原是数学领域中的概念，指的是某些操作或函数能够被执行多次，但每次得到的结果都是不变的。幂等性有很多好处，其最大的优势在于我们可以安全地重试任何幂等性操作，反正它们也不会破坏我们的系统状态。如果是非幂等性操作，我们还需要担心某些操作执行多次对状态的影响，但对于幂等性操作而言，我们根本无需担心此事。</p><p>在 Kafka 中，Producer 默认不是幂等性的，但我们可以创建幂等性 Producer。它其实是 0.11.0.0 版本引入的新功能。enable.idempotence 被设置成 true 后，Producer 自动升级成幂等性 Producer，其他所有的代码逻辑都不需要改变。Kafka 自动帮你做消息的重复去重。Kafka 为了实现幂等性，它在底层设计架构中引入了ProducerID和SequenceNumber。ProducerID：在每个新的 Producer 初始化时，会被分配一个唯一的 ProducerID，用来标识本次会话。</p><p>SequenceNumber：对于每个 ProducerID，Producer 发送数据的每个 Topic 和 Partition 都对应一个从 0 开始单调递增的 SequenceNumber 值。Broker 在内存维护(pid,seq)映射，收到消息后检查 seq。Producer 在收到明确的的消息丢失 ack，或者超时后未收到 ack，要进行重试。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">new_seq = old_seq+1: 正常消息；<br><br>new_seq &lt;= old_seq : 重复消息；<br><br>new_seq &gt; old_seq+1: 消息丢失；<br></code></pre></div></td></tr></table></figure><p>另外我们需要了解幂等性 Producer 的作用范围。首先，它只能保证单分区上的幂等性，即一个幂等性 Producer 能够保证某个主题的一个分区上不出现重复消息，它无法实现多个分区的幂等性。其次，它只能实现单会话上的幂等性，不能实现跨会话的幂等性。这里的会话，你可以理解为 Producer 进程的一次运行。当你重启了 Producer 进程之后，这种幂等性保证就丧失了。如果想实现多分区以及多会话上的消息无重复，应该怎么做呢？答案就是事务（transaction）或者依赖事务型 Producer。这也是幂等性 Producer 和事务型 Producer 的最大区别。</p><h4 id="3-2-2-事务型-Producer"><a href="#3-2-2-事务型-Producer" class="headerlink" title="3.2.2 事务型 Producer"></a>3.2.2 事务型 Producer</h4><p>事务型 Producer 能够保证将消息原子性地写入到多个分区中。这批消息要么全部写入成功，要么全部失败。另外，事务型 Producer 也不受进程的重启影响。Producer 重启后，Kafka 依然保证它们发送消息的 Exactly-once 处理。和普通 Producer 代码相比，事务型 Producer 的显著特点是调用了一些事务 API，如 initTransaction、beginTransaction、commitTransaction 和 abortTransaction，它们分别对应事务的初始化、事务开始、事务提交以及事务终止。</p><p>Kafka 事务消息是由 Producer、事务协调器、Broker、组协调器、Consumer 等共同参与实现的。</p><p><strong>1）Producer</strong></p><p>为 Producer 指定固定的 TransactionalId(事务 id)，可以穿越 Producer 的多次会话(Producer 重启/断线重连)中，持续标识 Producer 的身份。</p><p>每个生产者增加一个 epoch。用于标识同一个 TransactionalId 在一次事务中的 epoch，每次初始化事务时会递增，从而让服务端可以知道生产者请求是否旧的请求。使用 epoch 标识 Producer 的每一次”重生”，可以防止同一 Producer 存在多个会话。</p><p>Producer 遵从幂等消息的行为，并在发送的 BatchRecord 中增加事务 id 和 epoch。</p><p><strong>2）事务协调器(Transaction Coordinator)</strong></p><p>引入事务协调器，类似于消费组负载均衡的协调者，每一个实现事务的生产端都被分配到一个事务协调者。以两阶段提交的方式，实现消息的事务提交。</p><p>事务协调器使用一个特殊的 Topic：即事务 Topic，事务 Topic 本身也是持久化的，日志信息记录事务状态信息，由事务协调者写入。</p><p>事务协调器通过 RPC 调用，协调 Broker 和 Consumer 实现事务的两阶段提交。</p><p>每一个 Broker 都会启动一个事务协调器，使用 hash(TransactionalId)确定 Producer 对应的事务协调器，使得整个集群的负载均衡。</p><p><strong>3）Broker</strong></p><p>引入控制消息(Control Messages)：这些消息是客户端产生的并写入到主题的特殊消息，但对于使用者来说不可见。它们是用来让 Broker 告知消费者之前拉取的消息是否被原子性提交。</p><p>Broker 处理事务协调器的 commit/abort 控制消息，把控制消息向正常消息一样写入 Topic(图中标 c 的消息，和正常消息交织在一起，用来确认事务提交的日志偏移)，并向前推进消息提交偏移 hw。</p><p><img src="https://user-images.githubusercontent.com/21000558/137075487-9a0b0c43-0b2e-4a6b-b13c-09b73ef999ed.png" alt="image"></p><p><strong>4）组协调器</strong></p><p>如果在事务过程中，提交了消费偏移，组协调器在 offset log 中写入事务消费偏移。当事务提交时，在 offset log 中写入事务 offset 确认消息。</p><p><strong>5）Consumer</strong></p><p>Consumer 过滤未提交消息和事务控制消息，使这些消息对用户不可见。</p><p>有两种实现方式，</p><ul><li>Consumer 缓存方式</li></ul><p>设置 isolation.level=read_uncommitted，此时 topic 的所有消息对 Consumer 都可见。Consumer 缓存这些消息，直到收到事务控制消息。若事务 commit，则对外发布这些消息；若事务 abort，则丢弃这些消息。</p><ul><li>Broker 过滤方式</li></ul><p>设置 isolation.level=read_committed，此时 topic 中未提交的消息对 Consumer 不可见，只有在事务结束后，消息才对 Consumer 可见。Broker 给 Consumer 的 BatchRecord 消息中，会包含以列表，指明哪些是”abort”事务，Consumer 丢弃 abort 事务的消息即可。</p><p>因为事务机制会影响消费者所能看到的消息的范围，它不只是简单依赖高水位来判断。它依靠一个名为 LSO（Log Stable Offset）的位移值来判断事务型消费者的可见性。</p><h3 id="3-3-Pulsar-的事务消息"><a href="#3-3-Pulsar-的事务消息" class="headerlink" title="3.3 Pulsar 的事务消息"></a>3.3 Pulsar 的事务消息</h3><p>Apache Pulsar 在 2.8.0 正式支持了事务相关的功能，Pulsar 这里提供的事务区别于 RocketMQ 中 2PC 那种事务的实现方式，没有本地事务回查的机制，更类似于 Kafka 的事务实现机制。Apache Pulsar 中的事务主要用来保证类似 Pulsar Functions 这种流计算场景中 Exactly-once 语义的实现，这也符合 Apache Pulsar 本身 Event Streaming 的定位，即保证端到端（End-to-End）的事务实现的语义。</p><p>在 Pulsar 中，对于事务语义是这样定义的：允许事件流应用将消费、处理、生产消息整个过程定义为一个原子操作，即生产者或消费者能够处理跨多个主题和分区的消息，并确保这些消息作为一个单元被处理。</p><p>Pulsar 事务具有以下语义：</p><p>事务中的所有操作都作为一个单元提交。要么提交所有消息，要么都不提交。<br>每条消息只写入或处理一次，不会丢失数据或重复（即使发生故障）。<br>如果事务中止，则此事务中的所有写入和确认都将回滚。<br>事务中的批量消息可以被以多分区接收、生产和确认。</p><p>消费者只能读取已提交（确认）的消息。换句话说，Broker 不传递属于打开事务的事务消息或属于中止事务的消息。<br>跨多个分区的消息写入是原子性的。<br>跨多个订阅的消息确认是原子性的。订阅下的消费者在确认带有事务 ID 的消息时，只会成功确认一次消息。<br>Pulsar 事务消息由以下几个关键点构成：</p><p><strong>1）事务 ID</strong></p><p>事务 ID（TxnID）标识 Pulsar 中的唯一事务。事务 ID 长度是 128-bit。最高 16 位保留给事务协调器的 ID，其余位用于每个事务协调器中单调递增的数字。</p><p><strong>2）事务协调器(Transaction Coordinator)</strong></p><p>事务协调器(TC)是运行在 Pulsar Broker 中的一个模块。</p><p>它维护事务的整个生命周期，并防止事务进入错误状态。<br>它处理事务超时，并确保事务在事务超时后中止。<br><strong>3）事务日志</strong></p><p>所有事务元数据都保存在事务日志中。事务日志由 Pulsar 主题记录。如果事务协调器崩溃，它可以从事务日志恢复事务元数据。</p><p>事务日志存储事务状态，而不是事务中的实际消息（实际消息存储在实际的主题分区中）。</p><p><strong>4）事务缓存</strong></p><p>向事务内的主题分区生成的消息存储在该主题分区的事务缓冲区（TB）中。在提交事务之前，事务缓冲区中的消息对消费者不可见。当事务中止时，事务缓冲区中的消息将被丢弃。</p><p>事务缓冲区将所有正在进行和中止的事务存储在内存中。所有消息都发送到实际的分区 Pulsar 主题。提交事务后，事务缓冲区中的消息对消费者具体化（可见）。事务中止时，事务缓冲区中的消息将被丢弃。</p><p><strong>5）待确认状态</strong></p><p>挂起确认状态在事务完成之前维护事务中的消息确认。如果消息处于挂起确认状态，则在该消息从挂起确认状态中移除之前，其他事务无法确认该消息。</p><p>挂起的确认状态被保留到挂起的确认日志中(cursor ledger)。新启动的 broker 可以从挂起的确认日志中恢复状态，以确保状态确认不会丢失。</p><p>处理流程一般分为以下几个步骤：</p><ul><li>开启事务。</li><li>使用事务发布消息。</li><li>使用事务确认消息。</li><li>结束事务。<br>Pulsar 的事务处理流程与 Kafka 的事务处理思路大致上保持一致，大家都有一个 TC 以及对应的一个用于持久化 TC 所有操作的 Topic 来记录所有事务状态变更的请求。同样的在事务开始阶段也都有一个专门的 Topic 来去 查询 TC 对应的 Owner Broker 的位置在哪里。不同的是，第一：Kafka 中对于未确认的消息是维护在 Broker 端的，但是 Pulsar 的是维护在 Client 端的，通过 Transaction Timeout 来决定这个事务是否执行成功，所以有了 Transaction Timeout 的存在之后，就可以确保 Client 和 Broker 侧事务处理的一致性。第二：由于 Kafka 本身没有单条消息的 Ack，所以 Kafka 的事务处理只能是顺序执行的，当一个事务请求被阻塞之后，会阻塞后续所有的事务请求，但是 Pulsar 是可以对消息进行单条 Ack 的，所以在这里每一个事务的 Ack 动作是独立的，不会出现事务阻塞的情况。</li></ul><blockquote><p>四、结论</p></blockquote><p>RocketMQ 和 Kafka/Pulsar 的事务消息实用的场景是不一样的。</p><p>RocketMQ 中的事务，它解决的问题是，确保执行本地事务和发消息这两个操作，要么都成功，要么都失败。并且 RocketMQ 增加了一个事务反查的机制，来尽量提高事务执行的成功率和数据一致性。</p><p>Kafka 中的事务，它解决的问题是，确保在一个事务中发送的多条消息，要么都成功，要么都失败。（这里面的多条消息不一定要在同一个主题和分区中，可以是发往多个主题和分区的消息）当然也可以在 kafka 事务执行过程中开启本地事务来实现类似 RocketMQ 事务消息的效果，但是 Kafka 是没有事务消息反查机制的，它是直接抛出异常的，用户可以根据异常来实现自己的重试等方法保证事务正常运行。</p><p>它们的共同点就是：都是通过两阶段提交来实现事务的，事务消息都保存在单独的主题上。不同的地方就是 RocketMQ 是通过“半消息”来实现的，kafka 是直接将消息发送给对应的 topic，通过客户端来过滤实现的。而且它们两个使用的场景区别是非常之大的，RockteMQ 主要解决的是基于本地事务和消息的数据一致性，而 Kafka 的事务则是用于实现它的 Exactly-once 机制，应用于实时流计算的场景中。</p><p>Pulsar 的事务消息和 Kafka 应用场景和语义类似，只是由于底层实现机制有差别，在一些细节上有区别。</p><p>相信看到这里就非常清楚了，对于事务消息如何选型和应用，首先要明白你的业务需求是什么。是要实现分布式事务的最终一致性，还是要实现 Exactly-once (精确一次)语义？明白之后需求，选择什么组件就十分明确了。</p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
      <tag>消息队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticStack4</title>
    <link href="/2021/10/05/%E6%95%B0%E6%8D%AE%E5%BA%93/Elasticsearch/ElasticStack4/"/>
    <url>/2021/10/05/%E6%95%B0%E6%8D%AE%E5%BA%93/Elasticsearch/ElasticStack4/</url>
    
    <content type="html"><![CDATA[<h3 id="第4章-Elasticsearch-篇之Mapping-设置"><a href="#第4章-Elasticsearch-篇之Mapping-设置" class="headerlink" title="第4章 Elasticsearch 篇之Mapping 设置"></a>第4章 Elasticsearch 篇之Mapping 设置</h3><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>4-1 -mapping简介<br><img src="https://user-images.githubusercontent.com/21000558/136006106-e5d3fabf-cc19-45cc-a3d1-1584a49da89b.png" alt="image"></p><p>4-2 -自定义 mapping</p><p>4-3 -mapping演示</p><p>4-4 -copy_to参数说明</p><p>4-5 -index参数说明</p><p>4-6 -index_options参数说明</p><p>4-7 -mapping文档说明</p><p>4-8 -数据类型</p><p>4-9 -dynamic-mapping简介</p><p>4-10 -dynamic日期与数字识别</p><p>4-11 -dynamic-template简介</p><p>4-12 -自定义mapping的建议</p><p>4-13 -索引模板.mp4</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>ElasticStack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>ElasticStack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticStack3</title>
    <link href="/2021/10/05/%E6%95%B0%E6%8D%AE%E5%BA%93/Elasticsearch/ElasticStack3/"/>
    <url>/2021/10/05/%E6%95%B0%E6%8D%AE%E5%BA%93/Elasticsearch/ElasticStack3/</url>
    
    <content type="html"><![CDATA[<h3 id="第3章-Elasticsearch-篇之倒排索引与分词"><a href="#第3章-Elasticsearch-篇之倒排索引与分词" class="headerlink" title="第3章 Elasticsearch 篇之倒排索引与分词"></a>第3章 Elasticsearch 篇之倒排索引与分词</h3><h4 id="3-1-书的目录与索引"><a href="#3-1-书的目录与索引" class="headerlink" title="3-1 -书的目录与索引"></a>3-1 -书的目录与索引</h4><p><img src="https://user-images.githubusercontent.com/21000558/135994660-414acd7d-6187-4b45-8888-39e16a8e290f.png" alt="image"></p><h4 id="3-2-正排与倒排索引简介"><a href="#3-2-正排与倒排索引简介" class="headerlink" title="3-2 -正排与倒排索引简介"></a>3-2 -正排与倒排索引简介</h4><p><img src="https://user-images.githubusercontent.com/21000558/135995069-72e826ba-ddc1-4188-a3dd-5818d38b482e.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/135995119-284c4f3c-ada4-4c74-bb40-14d3ed3e8f08.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/135995141-80181628-d67e-4392-8dec-0dfe12a699be.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/135995018-1206078e-cc32-409b-be02-9a32e4b6bca0.png" alt="image"></p><h4 id="3-3-倒排索引详解"><a href="#3-3-倒排索引详解" class="headerlink" title="3-3 -倒排索引详解"></a>3-3 -倒排索引详解</h4><p><img src="https://user-images.githubusercontent.com/21000558/135995388-95357d71-26d9-413d-ae4c-cd0a4c9b7a26.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/135995412-8b650aeb-6cb1-476a-882d-79d6aaff2ba0.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/135995665-f26ccc51-f26a-4625-9585-1abfedf08322.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/135996594-d4c5b8af-1614-4fcc-8218-42ba0fc5c468.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/135996804-3903197e-d0df-4dea-95ac-ab6325af11c4.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/135996995-23194031-d23f-496c-aaeb-451af12a5056.png" alt="image"></p><h4 id="3-4-分词介绍"><a href="#3-4-分词介绍" class="headerlink" title="3-4 -分词介绍"></a>3-4 -分词介绍</h4><p><img src="https://user-images.githubusercontent.com/21000558/135997099-10797f5a-787f-40a4-b4fa-07062d528ada.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/135997486-3ca4cbee-d4ca-48ee-911a-dd1e964884ee.png" alt="image"></p><h4 id="3-5-analyze-api"><a href="#3-5-analyze-api" class="headerlink" title="3-5 -analyze_api"></a>3-5 -analyze_api</h4><p><img src="https://user-images.githubusercontent.com/21000558/135997720-a993095f-3083-4005-9d62-3c4127d02cc9.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/135997750-e565a18f-bea5-41c7-9ac0-f48a6abc2d91.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/135998239-32e922e1-2218-41b6-9589-eef049653f1b.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/21000558/135998185-0cf94c2e-236c-451a-9624-b7937b2771ce.png" alt="image"></p><h4 id="3-6-自带分词器"><a href="#3-6-自带分词器" class="headerlink" title="3-6 -自带分词器"></a>3-6 -自带分词器</h4><p><img src="https://user-images.githubusercontent.com/21000558/135998724-6cd5547b-a9fa-4029-8109-39ccddde75d8.png" alt="image"><br>standard<br><img src="https://user-images.githubusercontent.com/21000558/135998757-f6045823-4169-4449-a768-c8f3515667a7.png" alt="image"><br>sample<br><img src="https://user-images.githubusercontent.com/21000558/135999022-542fe139-0727-4b66-a3e4-a4fd52aaa17f.png" alt="image"><br>whitespace<br><img src="https://user-images.githubusercontent.com/21000558/136001127-0f0a99ea-4156-4174-a852-a2d65e232097.png" alt="image"><br>stop</p><p><img src="https://user-images.githubusercontent.com/21000558/136001282-e5977ac6-b5c2-43fe-86fa-69baa2550284.png" alt="image"><br>keyword<br><img src="https://user-images.githubusercontent.com/21000558/136001369-dbc8f9c6-7a35-4059-bd44-c0c8b8a5df9e.png" alt="image"><br>pattern</p><p><img src="https://user-images.githubusercontent.com/21000558/136001563-5f6d1dcb-c9f2-4d8a-9a10-ee2ef7136f9d.png" alt="image"><br>language<br><img src="https://user-images.githubusercontent.com/21000558/136001773-ef03027d-0c03-4f12-8dc3-c0fcc9966f7f.png" alt="image"></p><h4 id="3-7-中文分词"><a href="#3-7-中文分词" class="headerlink" title="3-7 -中文分词"></a>3-7 -中文分词</h4><p><a href="https://mp.weixin.qq.com/s?__biz=MzU1NDA4NjU2MA==&mid=2247486148&idx=1&sn=817027a204650763c1bea3e837d695ea">一篇文章总结语言处理中的分词问题</a><br><img src="https://user-images.githubusercontent.com/21000558/136002601-8fecc6ee-b445-4ec0-98df-df992999cd2e.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/136002694-41a7884c-f6ba-4ed3-9672-2f659331a718.png" alt="image"></p><h4 id="3-8-自定义分词之CharacterFilter"><a href="#3-8-自定义分词之CharacterFilter" class="headerlink" title="3-8 -自定义分词之CharacterFilter"></a>3-8 -自定义分词之CharacterFilter</h4><p><img src="https://user-images.githubusercontent.com/21000558/136002867-e19f860b-cdb2-4dfe-9151-ccef034d477c.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/136002933-a77ce256-a81b-403c-ad9c-328a640fca42.png" alt="image"></p><h4 id="3-9-自定义分词之Tokenizer"><a href="#3-9-自定义分词之Tokenizer" class="headerlink" title="3-9 -自定义分词之Tokenizer"></a>3-9 -自定义分词之Tokenizer</h4><p><img src="https://user-images.githubusercontent.com/21000558/136003121-55a9fa14-767b-49f5-9b02-7756303a049d.png" alt="image"></p><h4 id="3-10-自定义分词之-TokenFilter"><a href="#3-10-自定义分词之-TokenFilter" class="headerlink" title="3-10 -自定义分词之 TokenFilter"></a>3-10 -自定义分词之 TokenFilter</h4><p><img src="https://user-images.githubusercontent.com/21000558/136003371-1bf98c2c-1e1b-412d-8f99-1bc02794db6d.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/136003420-727adacb-7c1e-4c92-b1b3-27064e0648f6.png" alt="image"></p><h4 id="3-11-自定义分词"><a href="#3-11-自定义分词" class="headerlink" title="3-11 -自定义分词"></a>3-11 -自定义分词</h4><p><img src="https://user-images.githubusercontent.com/21000558/136004523-a22bac80-1a12-4077-ab41-1a980f5d74b5.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/136004624-58f542d0-81f7-4f54-8a27-b77bc137dfa7.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/136004666-4f1e57ed-48ba-46d7-9894-574aa770b6a0.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/136004819-22192cef-6e2f-4d51-9f7d-968ddd9b0b42.png" alt="image"></p><h4 id="3-12-分词使用说明"><a href="#3-12-分词使用说明" class="headerlink" title="3-12 -分词使用说明"></a>3-12 -分词使用说明</h4><p><img src="https://user-images.githubusercontent.com/21000558/136005159-bbc0051d-ee49-45e7-9857-5bc9c3f3a1e1.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/136005180-4a382c72-41f4-4902-ba1d-ad8a80316d72.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/136005236-57373e03-b4d5-484e-803c-d81bdd902b15.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/136005393-9dcf1cc5-68a2-48db-b801-be6e5de415af.png" alt="image"></p><h4 id="3-13-官方文档说明"><a href="#3-13-官方文档说明" class="headerlink" title="3-13 -官方文档说明"></a>3-13 -官方文档说明</h4>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>ElasticStack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>ElasticStack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticStack2</title>
    <link href="/2021/10/05/%E6%95%B0%E6%8D%AE%E5%BA%93/Elasticsearch/ElasticStack2/"/>
    <url>/2021/10/05/%E6%95%B0%E6%8D%AE%E5%BA%93/Elasticsearch/ElasticStack2/</url>
    
    <content type="html"><![CDATA[<h4 id="2-6-document-api"><a href="#2-6-document-api" class="headerlink" title="2-6 -document_api"></a>2-6 -document_api</h4><p><strong>创建</strong><br><img src="https://user-images.githubusercontent.com/21000558/135993724-269aa894-4916-478f-95c6-cd6751797d36.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/21000558/135993797-58a9ad38-fc92-4e8a-a4bd-3a050dc6279e.png" alt="image"></p><p><strong>查询</strong><br><strong>get</strong><br><img src="https://user-images.githubusercontent.com/21000558/135993838-162f4cb1-944b-4af4-a8d2-1cec680dcab8.png" alt="image"></p><p><strong>search</strong><br><img src="https://user-images.githubusercontent.com/21000558/135993969-9391069b-44c7-4658-bc90-306b1d52386f.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/21000558/135994019-4fd68bb9-df3a-4822-a45b-7ade27791fa5.png" alt="image"></p><p><strong>builk</strong></p><p><img src="https://user-images.githubusercontent.com/21000558/135993657-ed0b6555-46b9-491a-bea2-efb885e78f0b.png" alt="image"><br><img src="https://user-images.githubusercontent.com/21000558/135994256-b6b41abe-6a2a-43d4-beec-2f5f7f57501b.png" alt="image"></p><p><strong>megt</strong></p><p><img src="https://user-images.githubusercontent.com/21000558/135993612-f005d4a4-fc69-4c7d-9994-c1d28a00f569.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>ElasticStack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>ElasticStack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticStack入门</title>
    <link href="/2021/09/30/%E6%95%B0%E6%8D%AE%E5%BA%93/Elasticsearch/ElasticStack%E5%85%A5%E9%97%A8/"/>
    <url>/2021/09/30/%E6%95%B0%E6%8D%AE%E5%BA%93/Elasticsearch/ElasticStack%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="Elastic-Search和Kibana入门"><a href="#Elastic-Search和Kibana入门" class="headerlink" title="Elastic Search和Kibana入门"></a>Elastic Search和Kibana入门</h3><h4 id="2-2、ElasticSearch配置"><a href="#2-2、ElasticSearch配置" class="headerlink" title="2-2、ElasticSearch配置"></a>2-2、ElasticSearch配置</h4><p><img src="https://user-images.githubusercontent.com/21000558/135416300-94412a83-211c-4d5e-839e-8074c5d8662f.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/21000558/135416241-b2d122b8-f70a-47f9-8f10-3f8d8de9f7e7.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/21000558/135949534-24e0247c-101c-4f8c-99b9-f7867a7b5572.png" alt="image"></p><h3 id="第3章-Beats、Filebea入门"><a href="#第3章-Beats、Filebea入门" class="headerlink" title="第3章 Beats、Filebea入门"></a>第3章 Beats、Filebea入门</h3><p><img src="https://user-images.githubusercontent.com/21000558/135950621-b26bc939-c867-4fc3-8ba5-8d4ed4c62944.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/21000558/135952038-65a7e889-09c2-4d87-aed1-7466131b8307.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/21000558/135951295-e0310a00-5989-4be2-8b4d-5143e9e68ec7.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/21000558/135952212-02962313-bee2-4ef8-be4e-0ffe96ee23cb.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/21000558/135953629-7cd4b6dc-34db-4d3f-952c-4cc2bd30bf7f.png" alt="image"></p><h3 id="第4章-Logstash入门"><a href="#第4章-Logstash入门" class="headerlink" title="第4章 Logstash入门"></a>第4章 Logstash入门</h3><p><img src="https://user-images.githubusercontent.com/21000558/135953750-c3882547-cf14-4a34-8271-3372e5ec791d.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/21000558/135954124-386fb696-2978-4ded-81a0-2e2b799e05b5.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>ElasticStack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>ElasticStack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式消息队列</title>
    <link href="/2021/09/27/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <url>/2021/09/27/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<blockquote><p>文章转载自：<a href="https://mp.weixin.qq.com/s/-MXA4T-ei_U5ewXUNZ0QdQ">https://mp.weixin.qq.com/s/-MXA4T-ei_U5ewXUNZ0QdQ</a></p></blockquote><h3 id="一、消息队列的演进"><a href="#一、消息队列的演进" class="headerlink" title="一、消息队列的演进"></a>一、消息队列的演进</h3><p>分布式消息队列中间件是是大型分布式系统中常见的中间件。消息队列主要解决应用耦合、异步消息、流量削锋等问题，具有高性能、高可用、可伸缩和最终一致性等特点。消息队列已经逐渐成为企业应用系统内部通信的核心手段，使用较多的消息队列有 RabbitMQ、RocketMQ、ActiveMQ、Kafka、ZeroMQ、Pulsar 等，此外，利用数据库（如 Redis、MySQL 等）也可实现消息队列的部分基本功能。</p><h4 id="1-基于-OS-的-MQ"><a href="#1-基于-OS-的-MQ" class="headerlink" title="1.基于 OS 的 MQ"></a>1.基于 OS 的 MQ</h4><p>单机消息队列可以通过操作系统原生的进程间通信机制来实现，如消息队列、共享内存等。比如我们可以在共享内存中维护一个双端队列：</p><p><img src="https://user-images.githubusercontent.com/21000558/134835385-ea43abcc-237c-4b11-882b-0b13d2697e42.png" alt="image"></p><p>消息产出进程不停地往队列里添加消息，同时消息消费进程不断地从队尾有序地取出这些消息。添加消息的任务我们称为 producer，而取出并使用消息的任务，我们称之为 consumer。这种模式在早期单机多进程模式中比较常见， 比如 IO 进程把收到的网络请求存入本机 MQ，任务处理进程从本机 MQ 中读取任务并进行处理。</p><p>单机 MQ 易于实现，但是缺点也很明显：因为依赖于单机 OS 的 IPC 机制，所以无法实现分布式的消息传递，并且消息队列的容量也受限于单机资源。</p><h4 id="2-基于-DB-的-MQ"><a href="#2-基于-DB-的-MQ" class="headerlink" title="2.基于 DB 的 MQ"></a>2.基于 DB 的 MQ</h4><p>即使用存储组件（如 Mysql 、 Redis 等）存储消息， 然后在消息的生产侧和消费侧实现消息的生产消费逻辑，从而实现 MQ 功能。以 Redis 为例， 可以使用 Redis 自带的 list 实现。Redis list 使用 lpush 命令，从队列左边插入数据；使用 rpop 命令，从队列右边取出数据。与单机 MQ 相比， 该方案至少满足了分布式， 但是仍然带有很多无法接受的缺陷。</p><ul><li>热 key 性能问题：不论是用 codis 还是 twemproxy 这种集群方案，对某个队列的读写请求最终都会落到同一台 redis 实例上，并且无法通过扩容来解决问题。如果对某个 list 的并发读写非常高，就产生了无法解决的热 key，严重可能导致系统崩溃</li><li>没有消费确认机制：每当执行 rpop 消费一条数据，那条消息就被从 list 中永久删除了。如果消费者消费失败，这条消息也没法找回了。</li><li>不支持多订阅者：一条消息只能被一个消费者消费，rpop 之后就没了。如果队列中存储的是应用的日志，对于同一条消息，监控系统需要消费它来进行可能的报警，BI 系统需要消费它来绘制报表，链路追踪需要消费它来绘制调用关系……这种场景 redis list 就没办法支持了</li><li>不支持二次消费：一条消息 rpop 之后就没了。如果消费者程序运行到一半发现代码有 bug，修复之后想从头再消费一次就不行了。<br>针对上述缺点，redis 5.0 开始引入 stream 数据类型，它是专门设计成为消息队列的数据结构，借鉴了很多 kafka 的设计，但是随着很多分布式 MQ 组件的出现，仍然显得不够友好， 毕竟 Redis 天生就不是用来做消息转发的。</li></ul><h4 id="3-专用分布式-MQ-中间件"><a href="#3-专用分布式-MQ-中间件" class="headerlink" title="3. 专用分布式 MQ 中间件"></a>3. 专用分布式 MQ 中间件</h4><p>随着时代的发展，一个真正的消息队列，已经不仅仅是一个队列那么简单了，业务对 MQ 的吞吐量、扩展性、稳定性、可靠性等都提出了严苛的要求。因此，专用的分布式消息中间件开始大量出现。常见的有 RabbitMQ、RocketMQ、ActiveMQ、Kafka、ZeroMQ、Pulsar 等等。</p><h3 id="二、消息队列设计要点"><a href="#二、消息队列设计要点" class="headerlink" title="二、消息队列设计要点"></a>二、消息队列设计要点</h3><p>消息队列本质上是一个消息的转发系统， 把一次 RPC 就可以直接完成的消息投递，转换成多次 RPC 间接完成，这其中包含两个关键环节：</p><p>1.消息转储；</p><p>2.消息投递：时机和对象；</p><p>基于此，消息队列的整体设计思路是：</p><ul><li>确定整体的数据流向：如 producer 发送给 MQ，MQ 转发给 consumer，consumer 回复消费确认，消息删除、消息备份等。</li><li>利用 RPC 将数据流串起来，最好基于现有的 RPC 框架，尽量做到无状态，方便水平扩展。</li><li>存储选型，综合考虑性能、可靠性和开发维护成本等诸多因素。</li><li>消息投递，消费模式 push、pull。</li><li>消费关系维护，单播、多播等，可以利用 zk、config server 等保存消费关系。</li><li>高级特性，如可靠投递，重复消息，顺序消息等， 很多高级特性之间是相互制约的关系，这里要充分结合应用场景做出取舍。</li></ul><p><img src="https://user-images.githubusercontent.com/21000558/134835551-7ca9cf76-441c-4679-b33e-da5d45802d97.png" alt="image"></p><h4 id="1-MQ-基本特性"><a href="#1-MQ-基本特性" class="headerlink" title="1.MQ 基本特性"></a>1.MQ 基本特性</h4><h4 id="RPC-通信"><a href="#RPC-通信" class="headerlink" title="RPC 通信"></a>RPC 通信</h4><p>MQ 组件要实现和生产者以及消费者进行通信功能， 这里涉及到 RPC 通信问题。消息队列的 RPC，和普通的 RPC 没有本质区别。对于负载均衡、服务发现、序列化协议等等问题都可以借助现有 RPC 框架来实现，避免重复造轮子。</p><h4 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h4><p>存储可以做成很多方式。比如存储在内存里，存储在分布式 KV 里，存储在磁盘里，存储在数据库里等等。但归结起来，主要有持久化和非持久化两种。</p><p>持久化的形式能更大程度地保证消息的可靠性（如断电等不可抗外力），并且理论上能承载更大限度的消息堆积（外存的空间远大于内存）。但并不是每种消息都需要持久化存储。很多消息对于投递性能的要求大于可靠性的要求，且数量极大（如日志）。这时候，消息不落地直接暂存内存，尝试几次 failover，最终投递出去也未尝不可。常见的消息队列普遍两种形式都支持。</p><p>从速度来看，理论上，文件系统&gt;分布式 KV（持久化）&gt;分布式文件系统&gt;数据库，而可靠性却相反。还是要从支持的业务场景出发作出最合理的选择。</p><h4 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h4><p>MQ 的高可用，依赖于 RPC 和存储的高可用。通常 RPC 服务自身都具有服务自动发现，负载均衡等功能，保证了其高可用。存储的高可用， 例如 Kafka，使用分区加主备模式，保证每一个分区内的高可用性，也就是每一个分区至少要有一个备份且需要做数据的同步。</p><h4 id="推拉模型"><a href="#推拉模型" class="headerlink" title="推拉模型"></a>推拉模型</h4><p>push 和 pull 模型各有利弊，两种模式也都有被市面上成熟的消息中间件选用。</p><h5 id="1-慢消费"><a href="#1-慢消费" class="headerlink" title="1.慢消费"></a>1.慢消费</h5><p>慢消费是 push 模型最大的致命伤，如果消费者的速度比发送者的速度慢很多，会出现两种恶劣的情况：</p><p>1.消息在 broker 的堆积。假设这些消息都是有用的无法丢弃的，消息就要一直在 broker 端保存。</p><p>2.broker 推送给 consumer 的消息 consumer 无法处理，此时 consumer 只能拒绝或者返回错误。</p><p>而 pull 模式下，consumer 可以按需消费，不用担心自己处理不了的消息来骚扰自己，而 broker 堆积消息也会相对简单，无需记录每一个要发送消息的状态，只需要维护所有消息的队列和偏移量就可以了。所以对于慢消费，消息量有限且到来的速度不均匀的情况，pull 模式比较合适。</p><h5 id="2-消息延迟与忙等"><a href="#2-消息延迟与忙等" class="headerlink" title="2.消息延迟与忙等"></a>2.消息延迟与忙等</h5><p>这是 pull 模式最大的短板。由于主动权在消费方，消费方无法准确地决定何时去拉取最新的消息。如果一次 pull 取到消息了还可以继续去 pull，如果没有 pull 取到则需要等待一段时间重新 pull。</p><h4 id="消息投放时机"><a href="#消息投放时机" class="headerlink" title="消息投放时机"></a>消息投放时机</h4><p>即消费者应该在什么时机消费消息。一般有以下三种方式：</p><p>攒够了一定数量才投放。<br>到达了一定时间就投放。<br>有新的数据到来就投放。<br>至于如何选择，也要结合具体的业务场景来决定。比如，对及时性要求高的数据，可用采用方式 3 来完成。</p><h4 id="消息投放对象"><a href="#消息投放对象" class="headerlink" title="消息投放对象"></a>消息投放对象</h4><p>不管是 JMS 规范中的 Topic/Queue，Kafka 里面的 Topic/Partition/ConsumerGroup，还是 AMQP（如 RabbitMQ）的 Exchange 等等， 都是为了维护消息的消费关系而抽象出来的概念。本质上，消息的消费无外乎点到点的一对一单播，或一对多广播。另外比较特殊的情况是组间广播、组内单播。比较通用的设计是，不同的组注册不同的订阅，支持组间广播。组内不同的机器，如果注册一个相同的 ID，则单播；如果注册不同的 ID(如 IP 地址+端口)，则广播。</p><p>例如 pulsar 支持的订阅模型有：</p><ul><li><p>Exclusive：独占型，一个订阅只能有一个消息者消费消息。</p></li><li><p>Failover：灾备型，一个订阅同时只有一个消费者，可以有多个备份消费者。一旦主消费者故障则备份消费者接管。不会出现同时有两个活跃的消费者。</p></li><li><p>Shared：共享型，一个订阅中同时可以有多个消费者，多个消费者共享 Topic 中的消息。</p></li><li><p>Key_Shared：键共享型，多个消费者各取一部分消息。<br>通常会在公共存储上维护广播关系，如 config server、zookeeper 等。</p></li></ul><h3 id="2-队列高级特性"><a href="#2-队列高级特性" class="headerlink" title="2.队列高级特性"></a>2.队列高级特性</h3><p>常见的高级特性有可靠投递、消息丢失、消息重复、事务等等，他们并非是 MQ 必备的特性。由于这些特性可能是相互制约的，所以不可能完全兼顾。所以要依照业务的需求，来仔细衡量各种特性实现的成本、利弊，最终做出最为合理的设计。</p><h4 id="可靠投递"><a href="#可靠投递" class="headerlink" title="可靠投递"></a>可靠投递</h4><p>如何保证消息完全不丢失？</p><p>直观的方案是，在任何不可靠操作之前，先将消息落地，然后操作。当失败或者不知道结果（比如超时）时，消息状态是待发送，定时任务不停轮询所有待发送消息，最终一定可以送达。但是，这样必然导致消息可能会重复，并且在异常情况下，消息延迟较大。</p><p>例如：</p><ul><li>producer 往 broker 发送消息之前，需要做一次落地。</li><li>请求到 server 后，server 确保数据落地后再告诉客户端发送成功。</li><li>支持广播的消息队列需要对每个接收者，持久化一个发送状态，直到所有接收者都确认收到，才可删除消息。<br>即对于任何不能确认消息已送达的情况，都要重推消息。但是，随着而来的问题就是消息重复。在消息重复和消息丢失之间，无法兼顾，要结合应用场景做出取舍。</li></ul><h4 id="消费确认"><a href="#消费确认" class="headerlink" title="消费确认"></a>消费确认</h4><p>当 broker 把消息投递给消费者后，消费者可以立即确认收到了消息。但是，有些情况消费者可能需要再次接收该消息（比如收到消息、但是处理失败），即消费者主动要求重发消息。所以，要允许消费者主动进行消费确认。</p><p>顺序消息<br>对于 push 模式，要求支持分区且单分区只支持一个消费者消费，并且消费者只有确认一个消息消费后才能 push 另外一个消息，还要发送者保证发送顺序唯一。</p><p>对于 pull 模式，比如 kafka 的做法：</p><ol><li><p>producer 对应 partition，并且单线程。</p></li><li><p>consumer 对应 partition，消费确认（或批量确认），单线程消费。</p></li></ol><p>但是这样也只是实现了消息的分区有序性，并不一定全局有序。总体而言，要求消息有序的 MQ 场景还是比较少的。</p><h3 id="三、Kafka"><a href="#三、Kafka" class="headerlink" title="三、Kafka"></a>三、Kafka</h3><p>Kafka 是一个分布式发布订阅消息系统。它以高吞吐、可持久化、可水平扩展、支持流数据处理等多种特性而被广泛使用（如 Storm、Spark、Flink）。在大数据系统中，数据需要在各个子系统中高性能、低延迟的不停流转。传统的企业消息系统并不是非常适合大规模的数据处理，但 Kafka 出现了，它可以高效的处理实时消息和离线消息，降低编程复杂度，使得各个子系统可以快速高效的进行数据流转，Kafka 承担高速数据总线的作用。</p><h4 id="kafka-基础概念"><a href="#kafka-基础概念" class="headerlink" title="kafka 基础概念"></a>kafka 基础概念</h4><ul><li>BrokerKafka 集群包含一个或多个服务器，这种服务器被称为 broker。</li><li>TopicTopic 在逻辑上可以被认为是一个 queue，每条消费都必须指定它的 Topic，可以简单理解为必须指明把这条消息放进哪个 queue 里。为了使得 Kafka 的吞吐率可以线性提高，物理上把 Topic 分成一个或多个 Partition，每个 Partition 在物理上对应一个文件夹，该文件夹下存储这个 Partition 的所有消息和索引文件。</li><li>PartitionParition 是物理上的概念，每个 Topic 包含一个或多个 Partition。</li><li>Producer负责发布消息到 Kafka broker。</li><li>Consumer消息消费者，向 Kafka broker 读取消息的客户端。</li><li>Consumer Group每个 Consumer 属于一个特定的 Consumer Group（可为每个 Consumer 指定 group name，若不指定 group name 则属于默认的 group）。</li></ul><p><img src="https://user-images.githubusercontent.com/21000558/134835677-677564e3-22fe-48ed-a7a1-92a5ae2a0585.png" alt="image"></p><p>一个典型的 kafka 集群包含若干 Producer，若干个 Broker（kafka 支持水平扩展）、若干个 Consumer Group，以及一个 zookeeper 集群。Producer 使用 push 模式将消息发布到 broker。consumer 使用 pull 模式从 broker 订阅并消费消息。多个 broker 协同工作，producer 和 consumer 部署在各个业务逻辑中。kafka 通过 zookeeper 管理集群配置及服务协同。</p><p>这样就组成了一个高性能的分布式消息发布和订阅系统。Kafka 有一个细节是和其他 mq 中间件不同的点，producer 发送消息到 broker 的过程是 push，而 consumer 从 broker 消费消息的过程是 pull，主动去拉数据。而不是 broker 把数据主动发送给 consumer。</p><p>Producer 发送消息到 broker 时，会根据 Paritition 机制选择将其存储到哪一个 Partition。如果 Partition 机制设置合理，所有消息可以均匀分布到不同的 Partition 里，这样就实现了负载均衡。如果一个 Topic 对应一个文件，那这个文件所在的机器 I/O 将会成为这个 Topic 的性能瓶颈，而有了 Partition 后，不同的消息可以并行写入不同 broker 的不同 Partition 里，极大的提高了吞吐率。</p><h4 id="Kafka-特点"><a href="#Kafka-特点" class="headerlink" title="Kafka 特点"></a>Kafka 特点</h4><p>优点：</p><ul><li>高性能：单机测试能达到 100w tps</li><li>低延时：生产和消费的延时都很低，e2e 的延时在正常的 cluster 中也很低</li><li>可用性高：replicate+ isr + 选举 机制保证</li><li>工具链成熟：监控 运维 管理 方案齐全</li><li>生态成熟：大数据场景必不可少 kafka stream</li></ul><p>不足：</p><ul><li><p>无法弹性扩容：对 partition 的读写都在 partition leader 所在的 broker，如果该 broker 压力过大，也无法通过新增 broker 来解决问题</p></li><li><p>扩容成本高：集群中新增的 broker 只会处理新 topic，如果要分担老 topic-partition 的压力，需要手动迁移 partition，这时会占用大量集群带宽</p></li><li><p>消费者新加入和退出会造成整个消费组 rebalance：导致数据重复消费，影响消费速度，增加延迟</p></li><li><p>partition 过多会使得性能显著下降：ZK 压力大，broker 上 partition 过多让磁盘顺序写几乎退化成随机写</p></li></ul><h4 id="高吞吐机制"><a href="#高吞吐机制" class="headerlink" title="高吞吐机制"></a>高吞吐机制</h4><h5 id="顺序存取"><a href="#顺序存取" class="headerlink" title="顺序存取"></a>顺序存取</h5><p>如果把消息以随机的方式写入到磁盘，那么磁盘首先要做的就是寻址，也就是定位到数据所在的物理地址，在磁盘上就要找到对应柱面、磁头以及对应的扇区；这个过程相对内存来说会消耗大量时间，为了规避随机读写带来的时间消耗，kafka 采用顺序写的方式存储数据。</p><h5 id="页缓存"><a href="#页缓存" class="headerlink" title="页缓存"></a>页缓存</h5><p>即使是顺序存取，但是频繁的 I/O 操作仍然会造成磁盘的性能瓶颈，所以 kafka 使用了页缓存和零拷贝技术。当进程准备读取磁盘上的文件内容时， 操作系统会先查看待读取的数据是否在页缓存中，如果存在则直接返回数据， 从而避免了对物理磁盘的 I/O 操作；</p><p>如果没有命中， 则操作系统会向磁盘发起读取请求并将读取的数据页存入页缓存， 之后再将数据返回给进程。一个进程需要将数据写入磁盘， 那么操作系统也会检测数据对应的页是否在页缓存中，如果不存在， 则会先在页缓存中添加相应的页， 最后将数据写入对应的页。被修改过后的页也就变成了脏页， 操作系统会在合适的时间把脏页中的数据写入磁盘， 以保持数据的 一 致性。</p><p>Kafka 中大量使用了页缓存， 这是 Kafka 实现高吞吐的重要因素之 一 。虽然消息都是先被写入页缓存，然后由操作系统负责具体的刷盘任务的， 但在 Kafka 中同样提供了同步刷盘及间断性强制刷盘(fsync),可以通过参数来控制。</p><p>同步刷盘能够保证消息的可靠性，避免因为宕机导致页缓存数据还未完成同步时造成的数据丢失。但是实际使用上，我们没必要去考虑这样的因素以及这种问题带来的损失，消息可靠性可以由多副本来解决，同步刷盘会带来性能的影响。</p><h5 id="页缓存的好处："><a href="#页缓存的好处：" class="headerlink" title="页缓存的好处："></a>页缓存的好处：</h5><ul><li>I/O Scheduler 会将连续的小块写组装成大块的物理写从而提高性能；</li><li>I/O Scheduler 会尝试将一些写操作重新按顺序排好，从而减少磁头移动时间；</li><li>充分利用所有空闲内存（非 JVM 内存）；</li><li>读操作可以直接在 Page Cache 内进行，如果消费和生产速度相当，甚至不需要通过物理磁盘交换数据；</li><li>如果进程重启，JVM 内的 Cache 会失效，但 Page Cache 仍然可用。</li></ul><h5 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h5><p>零拷贝技术可以减少 CPU 的上下文切换和数据拷贝次数。</p><h5 id="常规方式"><a href="#常规方式" class="headerlink" title="常规方式"></a>常规方式</h5><p><img src="https://user-images.githubusercontent.com/21000558/134835738-0663c51b-5432-4b11-9f7a-8cdb4bd26926.png" alt="image"></p><p>应用程序一次常规的数据请求过程，发生了 4 次拷贝，2 次 DMA 和 2 次 CPU，而 CPU 发生了 4 次的切换。（DMA 简单理解就是，在进行 I/O 设备和内存的数据传输的时候，数据搬运的工作全部交给 DMA 控制器，而 CPU 不再参与任何与数据搬运相关的事情）</p><h5 id="零拷贝的方式"><a href="#零拷贝的方式" class="headerlink" title="零拷贝的方式"></a>零拷贝的方式</h5><p><img src="https://user-images.githubusercontent.com/21000558/134835761-901a19f6-cf0b-4e2f-918e-5842516edc56.png" alt="image"></p><p>通过零拷贝优化，CPU 只发生了 2 次的上下文切换和 3 次数据拷贝。</p><h5 id="批量发送"><a href="#批量发送" class="headerlink" title="批量发送"></a>批量发送</h5><p>Kafka 允许进行批量发送消息，先将消息缓存在内存中，然后一次请求批量发送出去，这种策略将大大减少服务端的 I/O 次数。</p><h5 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h5><p>Kafka 还支持对消息集合进行压缩，Producer 可以通过 GZIP 或 Snappy 格式对消息集合进行压缩，Producer 压缩之后，在 Consumer 需进行解压，虽然增加了 CPU 的工作，但在对大数据处理上，瓶颈在网络上而不是 CPU，所以这个成本很值得。</p><h5 id="高可用机制"><a href="#高可用机制" class="headerlink" title="高可用机制"></a>高可用机制</h5><h5 id="副本"><a href="#副本" class="headerlink" title="副本"></a>副本</h5><p>Producer 在发布消息到某个 Partition 时，先通过 ZooKeeper 找到该 Partition 的 Leader，然后无论该 Topic 的 Replication Factor 为多少，Producer 只将该消息发送到该 Partition 的 Leader。Leader 会将该消息写入其本地 Log。</p><p>每个 Follower 都从 Leader pull 数据。这种方式上，Follower 存储的数据顺序与 Leader 保持一致。Follower 在收到该消息后，向 Leader 发送 ACK， 并把消息写入其 Log。一旦 Leader 收到了 ISR 中的所有 Replica 的 ACK，该消息就被认为已经 commit 了，Leader 将增加 HW 并且向 Producer 发送 ACK。</p><p>为了提高性能，每个 Follower 在接收到数据后就立马向 Leader 发送 ACK，而非等到数据写入 Log 中。因此，对于已经 commit 的消息，Kafka 只能保证它被存于多个 Replica 的内存中，而不能保证它们被持久化到磁盘中，也就不能完全保证异常发生后该条消息一定能被 Consumer 消费。Consumer 读消息也是从 Leader 读取，只有被 commit 过的消息才会暴露给 Consumer。Kafka Replication 的数据流如下图所示：</p><p><img src="https://user-images.githubusercontent.com/21000558/134835780-a8cf3a3d-30ee-48ce-97bc-f9c8cf9c741a.png" alt="image"></p><p>对于 Kafka 而言，定义一个 Broker 是否“活着”包含两个条件：</p><ul><li>一是它必须维护与 ZooKeeper 的 session（这个通过 ZooKeeper 的 Heartbeat 机制来实现）。</li><li>二是 Follower 必须能够及时将 Leader 的消息复制过来，不能“落后太多”。</li></ul><p>Leader 会跟踪与其保持同步的 Replica 列表，该列表称为 ISR（即 in-sync Replica）。如果一个 Follower 宕机，或者落后太多，Leader 将把它从 ISR 中移除。这里所描述的“落后太多”指 Follower 复制的消息落后于 Leader 后的条数超过预定值或者 Follower 超过一定时间未向 Leader 发送 fetch 请求。Kafka 的复制机制既不是完全的同步复制，也不是单纯的异步复制。</p><p>完全同步复制要求所有能工作的 Follower 都复制完，这条消息才会被认为 commit，这种复制方式极大的影响了吞吐率（高吞吐率是 Kafka 非常重要的一个特性）。异步复制方式下，Follower 异步的从 Leader 复制数据，数据只要被 Leader 写入 log 就被认为已经 commit，这种情况下如果 Follower 都复制完都落后于 Leader，而如果 Leader 突然宕机，则会丢失数据。而 Kafka 的这种使用 ISR 的方式则很好的均衡了确保数据不丢失以及吞吐率。Follower 可以批量的从 Leader 复制数据，这样极大的提高复制性能（批量写磁盘），极大减少了 Follower 与 Leader 的差距。</p><p>一条消息只有被 ISR 里的所有 Follower 都从 Leader 复制过去才会被认为已提交。这样就避免了部分数据被写进了 Leader，还没来得及被任何 Follower 复制就宕机了，而造成数据丢失（Consumer 无法消费这些数据）。而对于 Producer 而言，它可以选择是否等待消息 commit。这种机制确保了只要 ISR 有一个或以上的 Follower，一条被 commit 的消息就不会丢失。</p><h5 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h5><h5 id="Leader-故障"><a href="#Leader-故障" class="headerlink" title="Leader 故障"></a>Leader 故障</h5><p>leader 发生故障后，会从 ISR 中选出一个新的 leader，之后，为保证多个副本之间的数据一致性，其余的 follower 会先将各自的 log 文件高于 HW 的部分截掉，然后从新的 leader 同步数据。注意：这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复。</p><p>Kafka 在 ZooKeeper 中动态维护了一个 ISR（in-sync replicas），这个 ISR 里的所有 Replica 都跟上了 leader，只有 ISR 里的成员才有被选为 Leader 的可能。在这种模式下，对于 f+1 个 Replica，一个 Partition 能在保证不丢失已经 commit 的消息的前提下容忍 f 个 Replica 的失败。</p><p><img src="https://user-images.githubusercontent.com/21000558/134835799-3f2f56ce-7c8b-4821-967c-01755e7ca80b.png" alt="image"></p><p>LEO：每个副本最大的 offset。</p><p>HW：消费者能见到的最大的 offset，ISR 队列中最小的 LEO。</p><h5 id="Follower-故障"><a href="#Follower-故障" class="headerlink" title="Follower 故障"></a>Follower 故障</h5><p>follower 发生故障后会被临时踢出 ISR 集合，待该 follower 恢复后，follower 会 读取本地磁盘记录的上次的 HW，并将 log 文件高于 HW 的部分截取掉，从 HW 开始向 leader 进行同步数据操作。等该 follower 的 LEO 大于等于该 partition 的 HW，即 follower 追上 leader 后，就可以重新加入 ISR 了。</p><h5 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h5><p>由于 Broker 存储着特定分区的数据， 因此，不管是 Broker 还是分区的扩缩容，都是比较复杂的，属于典型的“有状态服务”扩缩容问题。接下来，我们看一下 Pulsar 是怎么针对 kafka 的不足进行优化的。</p><h3 id="四、Pulsar"><a href="#四、Pulsar" class="headerlink" title="四、Pulsar"></a>四、Pulsar</h3><p>Apache Pulsar 是 Apache 软件基金会顶级项目，是下一代云原生分布式消息流平台，集消息、存储、轻量化函数式计算为一体。采用计算与存储分离架构设计，支持多租户、持久化存储、多机房跨区域数据复制，具有强一致性、高吞吐、低延时及高可扩展性等流数据存储特性。在消息领域，Pulsar 是第一个将存储计算分离云原生架构落地的开源项目。</p><h4 id="服务和存储分离"><a href="#服务和存储分离" class="headerlink" title="服务和存储分离"></a>服务和存储分离</h4><p><img src="https://user-images.githubusercontent.com/21000558/134835833-fcb395f1-36cb-4090-9d39-1c402874b3c0.png" alt="image"></p><p>在 kafka 的基础上，把数据存储功能从 Broker 中分离出来，Broker 仅面向生产者、消费者提供数据读写能力，但其自身并不存储数据。而在 Broker 层下面使用 Bookie 作为存储层，承担具体的数据存储职责。在 Pulsar 中，broker 的含义和 kafka 中的 broker 是一致的，就是一个运行的 Pulsar 实例， 提供多个分区的读写服务。由于 broker 层不在承担数据存储职责，使得 Broker 层成为无状态服务。这样一来，Broker 的扩缩容就变得非常简单。</p><p>相比之下，服务存储集于一体的 Kafka 就非常难以扩容。</p><ul><li>Broker 和 Bookie 相互独立，方便实现独立的扩展以及独立的容错</li><li>Broker 无状态，便于快速上、下线，更加适合于云原生场景</li><li>分区存储不受限于单个节点存储容量</li><li>Bookie 数据分布均匀</li></ul><p><img src="https://user-images.githubusercontent.com/21000558/134835854-75808b65-b0d4-4a21-8463-22a3d5e40956.png" alt="image"></p><h4 id="分片存储"><a href="#分片存储" class="headerlink" title="分片存储"></a>分片存储</h4><p><img src="https://user-images.githubusercontent.com/21000558/134835865-f8430616-e2ca-4d89-8836-4168656f4d11.png" alt="image"></p><p>1.在 Kafka 分区（Partition）概念的基础上，按照时间或大小，把分区切分成分片（Segment）。</p><p>2.同一个分区的分片，分散存储在集群中所有的 Bookie 节点上。</p><p>3.同一个分片，拥有多个副本，副本数量可以指定，存储于不同的 Bookie 节点。</p><h4 id="Pulsar-性能"><a href="#Pulsar-性能" class="headerlink" title="Pulsar 性能"></a>Pulsar 性能</h4><p>和 Kafka 一样，Pulsar 也使用了顺序读写和零拷贝等技术来提高系统的性能。</p><p>此外，Pulsar 还设计了分层缓存机制，在服务层和存储层都做了分层缓存，来提高性能。</p><ul><li>生产者发送消息时，调用 Bookie 层写入消息时，同时将消息写入 broker 缓存中。</li><li>实时消费时（追尾读），首先从 broker 缓存中读取数据，避免从持久层 bookie 中读取，从而降低投递延迟。</li><li>读取历史消息（追赶读）场景中，bookie 会将磁盘消息读入 bookie 读缓存中，从而避免每次都读取磁盘数据，降低读取延时。</li></ul><p><img src="https://user-images.githubusercontent.com/21000558/134835875-68b0f024-ad88-4ce3-b8a8-44084cae6b10.png" alt="image"></p><h4 id="Pulsar-扩展性"><a href="#Pulsar-扩展性" class="headerlink" title="Pulsar 扩展性"></a>Pulsar 扩展性</h4><p>分片存储解决了分区容量受单节点存储空间限制的问题，当容量不够时，可以通过扩容 Bookie 节点的方式支撑更多的分区数据，也解决了分区数据倾斜问题，数据可以均匀的分配在 Bookie 节点上。</p><p>Broker 和 Bookie 灵活的容错以及无缝的扩容能力让 Apache Pulsar 具备非常高的可用性，实现了无限制的分区存储。</p><p><img src="https://user-images.githubusercontent.com/21000558/134835895-a13f0a09-d7eb-473d-8ed6-1ece4d2ddae2.png" alt="image"></p><h4 id="Broker-扩展"><a href="#Broker-扩展" class="headerlink" title="Broker 扩展"></a>Broker 扩展</h4><p>在 Pulsar 中 Broker 是无状态的，可以通过增加节点的方式实现快速扩容。当需要支持更多的消费者或生产者时，可以简单地添加更多的 Broker 节点来满足业务需求。Pulsar 支持自动的分区负载均衡，在 Broker 节点的资源使用率达到阈值时，会将负载迁移到负载较低的 Broker 节点。新增 Broker 节点时，分区也将在 Brokers 中做平衡迁移，一些分区的所有权会转移到新的 Broker 节点。</p><h4 id="Bookie-扩展"><a href="#Bookie-扩展" class="headerlink" title="Bookie 扩展"></a>Bookie 扩展</h4><p>存储层的扩容，通过增加 Bookie 节点来实现。通过资源感知和数据放置策略，流量将自动切换到新的 Apache Bookie 中，整个过程不会涉及到不必要的数据搬迁。即扩容时，不会将旧数据从现有存储节点重新复制到新存储节点。</p><p><img src="https://user-images.githubusercontent.com/21000558/134835916-0707ba7a-814b-4f88-96c3-3faf606f937d.png" alt="image"></p><p>如图所示，起始状态有四个存储节点，Bookie1, Bookie2, Bookie3, Bookie4，以 Topic1-Part2 为例，当这个分区的最新的存储分片是 SegmentX 时，对存储层扩容，添加了新的 Bookie 节点，BookieX,BookieY，那么当存储分片滚动之后，新生成的存储分片， SegmentX+1,SegmentX+2，会优先选择新的 Bookie 节点（BookieX,BookieY）来保存数据。</p><h4 id="Pulsar-可用性"><a href="#Pulsar-可用性" class="headerlink" title="Pulsar 可用性"></a>Pulsar 可用性</h4><h5 id="Broker-容错"><a href="#Broker-容错" class="headerlink" title="Broker 容错"></a>Broker 容错</h5><p>如下图，假设当存储分片滚动到 SegmentX 时，Broker2 节点失败。此时生产者和消费者向其他的 Broker 发起请求，这个过程会触发分区的所有权转移，即将 Broker2 拥有的分区 Topic1-Part2 的所有权转移到其他的 Broker(Broker3)。</p><p>由于数据存储和数据服务分离，所以新 Broker 接管分区的所有权时，它不需要复制 Partiton 的数据。新的分区 Owner（Broker3）会产生一个新的分片 SegmentX+1, 如果有新数据到来，会存储在新的分片 Segment x+1 上，不会影响分区的可用性。</p><p>即当某个 Broker 实例故障时，整个集群的消息存储能力仍然完好。此时，集群只是丧失了特定分区的消息服务，只需要把这些分区的服务权限分配给其他 Broker 即可。</p><p>注意，和 Kafka 一样， Pulsar 的一个分区仍然只能由一个 Broker 提供服务，否则无法保证消息的分区有序性。</p><p><img src="https://user-images.githubusercontent.com/21000558/134835937-fe1a49ce-6499-48b4-8b8b-7ff123e12726.png" alt="image"></p><h5 id="Bookie-容错"><a href="#Bookie-容错" class="headerlink" title="Bookie 容错"></a>Bookie 容错</h5><p>如下图，假设 Bookie 2 上的 Segment 4 损坏。Bookie Auditor 会检测到这个错误并进行复制修复。Bookie 中的副本修复是 Segment 级别的多对多快速修复，BookKeeper 可以从 Bookie 3 和 Bookie 4 读取 Segment 4 中的消息，并在 Bookie 1 处修复 Segment 4。如果是 Bookie 节点故障，这个 Bookie 节点上所有的 Segment 会按照上述方式复制到其他的 Bookie 节点。</p><p>所有的副本修复都在后台进行，对 Broker 和应用透明，Broker 会产生新的 Segment 来处理写入请求，不会影响分区的可用性。</p><p><img src="https://user-images.githubusercontent.com/21000558/134835947-cfe0f702-57f4-4894-a5db-7daa196ca57b.png" alt="image"></p><h4 id="Pulsar-其他特性"><a href="#Pulsar-其他特性" class="headerlink" title="Pulsar 其他特性"></a>Pulsar 其他特性</h4><p>基于上述的设计特点，Pulsar 提供了很多特性。</p><h5 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h5><p>Pulsar 另外一个有吸引力的特性是提供了读写分离的能力，读写分离保证了在有大量滞后消费（磁盘 IO 会增加）时，不会影响服务的正常运行，尤其是不会影响到数据的写入。读写分离的能力由 Bookie 提供，简单说一下 Bookie 存储涉及到的概念：</p><ul><li>Journals：Journal 文件包含了 Bookie 事务日志，在 Ledger (可以认为是分片的一部分) 更新之前，Journal 保证描述更新的事务写入到 Non-volatile 的存储介质上；</li><li>Entry logger：Entry 日志文件管理写入的 Entry，来自不同 ledger 的 entry 会被聚合然后顺序写入；</li><li>Index files：每个 Ledger 都有一个对应的索引文件，记录数据在 Entry 日志文件中的 Offset 信息。</li></ul><p>Entry 的读写入过程下图所示，数据的写入流程：</p><ul><li>数据首先会写入 Journal，写入 Journal 的数据会实时落到磁盘；</li><li>然后，数据写入到 Memtable ，Memtable 是读写缓存；</li><li>写入 Memtable 之后，对写入请求进行响应；</li><li>Memtable 写满之后，会 Flush 到 Entry Logger 和 Index cache，Entry Logger 中保存了数据，Index cache 保存了数据的索引信息，然后由后台线程将 Entry Logger 和 Index cache 数据落到磁盘。</li></ul><p>数据的读取流程：</p><ul><li><p>如果是 Tailing read 请求，直接从 Memtable 中读取 Entry；</p></li><li><p>如果是 Catch-up read（滞后消费）请求，先读取 Index 信息，然后索引从 Entry Logger 文件读取 Entry。</p></li></ul><p><img src="https://user-images.githubusercontent.com/21000558/134835959-07d44f88-2c6d-4e65-936f-7222ff4fd4d7.png" alt="image"></p><p>一般在进行 Bookie 的配置时，会将 Journal 和 Ledger 存储磁盘进行隔离，减少 Ledger 对于 Journal 写入的影响，并且推荐 Journal 使用性能较好的 SSD 磁盘，读写分离主要体现在：</p><ul><li>写入 Entry 时，Journal 中的数据需要实时写到磁盘，Ledger 的数据不需要实时落盘，通过后台线程批量落盘，因此写入的性能主要受到 Journal 磁盘的影响；</li><li>读取 Entry 时，首先从 Memtable 读取，命中则返回；如果不命中，再从 Ledger 磁盘中读取，所以对于 Catch-up read 的场景，读取数据会影响 Ledger 磁盘的 IO，对 Journal 磁盘没有影响，也就不会影响到数据的写入。</li></ul><p>所以，数据写入是主要是受 Journal 磁盘的负载影响，不会受 Ledger 磁盘的影响。另外，Segment 存储的多个副本都可以提供读取服务，相比于主从副本的设计，Apache Pulsar 可以提供更好的数据读取能力。</p><p>通过以上分析，Apache Pulsar 使用 Apache BookKeeper 作为数据存储，可以带来下列的收益：</p><ul><li>支持将多个 Ledger 的数据写入到同一个 Entry logger 文件，可以避免分区膨胀带来的性能下降问题</li><li>支持读写分离，可以在滞后消费场景导致磁盘 IO 上升时，保证数据写入的不受影响</li><li>支持全副本读取，可以充分利用存储副本的数据读取能力</li></ul><h5 id="多种消费模型"><a href="#多种消费模型" class="headerlink" title="多种消费模型"></a>多种消费模型</h5><p> Pulsar 提供了多种订阅方式来消费消息，分为三种类型：独占（Exclusive），故障切换（Failover）或共享（Share）。</p><ul><li>Exclusive 独占订阅 ：在任何时间，一个消费者组（订阅）中有且只有一个消费者来消费 Topic 中的消息。</li><li>Failover 故障切换：多个消费者（Consumer）可以附加到同一订阅。但是，一个订阅中的所有消费者，只会有一个消费者被选为该订阅的主消费者。其他消费者将被指定为故障转移消费者。当主消费者断开连接时，分区将被重新分配给其中一个故障转移消费者，而新分配的消费者将成为新的主消费者。发生这种情况时，所有未确认（ack）的消息都将传递给新的主消费者。</li><li>Share 共享订阅：使用共享订阅，在同一个订阅背后，用户按照应用的需求挂载任意多的消费者。订阅中的所有消息以循环分发形式发送给订阅背后的多个消费者，并且一个消息仅传递给一个消费者。<br>当消费者断开连接时，所有传递给它但是未被确认（ack）的消息将被重新分配和组织，以便发送给该订阅上剩余的剩余消费者。</li></ul><p><img src="https://user-images.githubusercontent.com/21000558/134836111-089ae338-a70f-41d5-b830-fd33f4489e70.png" alt="image"></p><h5 id="多种-ACK-模型"><a href="#多种-ACK-模型" class="headerlink" title="多种 ACK 模型"></a>多种 ACK 模型</h5><p>消息确认（ACK）的目的就是保证当发生故障后，消费者能够从上一次停止的地方恢复消费，保证既不会丢失消息，也不会重复处理已经确认（ACK）的消息。在 Pulsar 中，每个订阅中都使用一个专门的数据结构–游标（Cursor）来跟踪订阅中的每条消息的确认（ACK）状态。每当消费者在分区上确认消息时，游标都会更新。</p><h5 id="Pulsar-提供两种消息确认方法："><a href="#Pulsar-提供两种消息确认方法：" class="headerlink" title="Pulsar 提供两种消息确认方法："></a>Pulsar 提供两种消息确认方法：</h5><ul><li>单条确认（Individual Ack），单独确认一条消息。被确认后的消息将不会被重新传递</li><li>累积确认（Cumulative Ack），通过累积确认，消费者只需要确认它收到的最后一条消息</li></ul><p><img src="https://user-images.githubusercontent.com/21000558/134836127-02d904df-8ff9-40c1-9b36-a9a393eb3ee0.png" alt="image"></p><p>上图说明了单条确认和累积确认的差异（灰色框中的消息被确认并且不会被重新传递）。对于累计确认，M12 之前的消息被标记为 Acked。对于单独进行 ACK，仅确认消息 M7 和 M12， 在消费者失败的情况下，除了 M7 和 M12 之外，其他所有消息将被重新传送。</p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
      <tag>消息队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL Truncate</title>
    <link href="/2021/09/15/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%20Truncate/"/>
    <url>/2021/09/15/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%20Truncate/</url>
    
    <content type="html"><![CDATA[<h3 id="1-truncate使用语法"><a href="#1-truncate使用语法" class="headerlink" title="1.truncate使用语法"></a>1.truncate使用语法</h3><p><code>truncate</code>的作用是清空表或者说是截断表，只能作用于表。truncate的语法很简单，后面直接跟表名即可，例如： <code>truncate table table_name</code> 或者 <code>truncate table_name</code>。</p><p>执行<code>truncate</code>语句需要拥有表的<code>drop</code>权限，从逻辑上讲，<code>truncate table</code>类似于<code>delete</code>删除所有行的语句或<code>drop table</code>然后再<code>create table</code>语句的组合。</p><h3 id="2-truncate与drop-delete的对比"><a href="#2-truncate与drop-delete的对比" class="headerlink" title="2.truncate与drop,delete的对比"></a>2.truncate与drop,delete的对比</h3><ul><li><code>truncate</code>与<code>drop</code>是DDL语句，执行后无法回滚；<code>delete</code>是DML语句，可回滚。</li><li><code>truncate</code>只能作用于表；<code>delete，drop</code>可作用于表、视图等。</li><li><code>truncate</code>会清空表中的所有行，但表结构及其约束、索引等保持不变；drop会删除表的结构及其所依赖的约束、索引等。</li><li><code>truncate</code>会重置表的自增值；<code>delete</code>不会。</li><li><code>truncate</code>不会激活与表有关的删除触发器；<code>delete</code>可以。</li><li><code>truncate</code>后会使表和索引所占用的空间会恢复到初始大小；<code>delete</code>操作不会减少表或索引所占用的空间，drop语句将表所占用的空间全释放掉。<h3 id="3-truncate使用场景及注意事项"><a href="#3-truncate使用场景及注意事项" class="headerlink" title="3.truncate使用场景及注意事项"></a>3.truncate使用场景及注意事项</h3>通过前面介绍，我们很容易得出<code>truncate</code>语句的使用场景，即该表数据完全不需要时可以用<code>truncate</code>。如果想删除部分数据用<code>delete</code>，注意带上<code>where</code>子句；如果想删除表，当然用<code>drop</code>；如果想保留表而将所有数据删除且和事务无关，用<code>truncate</code>即可；如果和事务有关，或者想触发<code>trigger</code>，还是用<code>delete</code>；如果是整理表内部的碎片，可以用<code>truncate</code>然后再重新插入数据。truncate表都是高危操作，特别是在生产环境要更加小心</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>truncate无法通过binlog回滚。</li><li>truncate会清空所有数据且执行速度很快。</li><li>truncate不能对有外键约束引用的表使用。</li><li>执行truncate需要drop权限，不建议给账号drop权限。</li><li>执行truncate前一定要再三检查确认，最好提前备份下表数据。</li></ul><h3 id="4-table-被删除部分，但是id又想接着自增"><a href="#4-table-被删除部分，但是id又想接着自增" class="headerlink" title="4.table 被删除部分，但是id又想接着自增"></a>4.table 被删除部分，但是id又想接着自增</h3><p>tableA的自增id从 1-100，现在通过delete 删除了id在 51-100 的数据，通常后面添加的数据id会从101开始，但是我们有个需求希望id从51开始自增，那么我们可以重新设置自增id</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">alter table table_name auto_increment = 51;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GM到GMP，Golang经历了什么？</title>
    <link href="/2021/08/30/Golang/GMP/GM%E5%88%B0GMP%EF%BC%8CGolang%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/2021/08/30/Golang/GMP/GM%E5%88%B0GMP%EF%BC%8CGolang%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p><a href="https://learnku.com/articles/57177">GM到GMP，Golang经历了什么？</a></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>领域驱动设计在互联网业务开发中的实践</title>
    <link href="/2021/08/30/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%9C%A8%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%AE%9E%E8%B7%B5/"/>
    <url>/2021/08/30/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%9C%A8%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>文章节选自美团技术团队博客：</p></blockquote><p><a href="https://tech.meituan.com/2017/12/22/ddd-in-practice.html">领域驱动设计在互联网业务开发中的实践</a></p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
      <category>领域驱动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
      <tag>领域驱动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel Pipeline 组件的实现原理</title>
    <link href="/2021/08/29/PHP/Laravel/Laravel%20Pipeline%20%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2021/08/29/PHP/Laravel/Laravel%20Pipeline%20%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><a href="https://learnku.com/articles/2769/laravel-pipeline-realization-of-the-principle-of-single-component">Laravel Pipeline 组件的实现原理</a></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式系统互斥性与幂等性问题的分析与解决</title>
    <link href="/2021/08/29/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%BA%92%E6%96%A5%E6%80%A7%E4%B8%8E%E5%B9%82%E7%AD%89%E6%80%A7%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3/"/>
    <url>/2021/08/29/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%BA%92%E6%96%A5%E6%80%A7%E4%B8%8E%E5%B9%82%E7%AD%89%E6%80%A7%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>原文节选自美团技术博客：<a href="https://tech.meituan.com/2016/09/29/distributed-system-mutually-exclusive-idempotence-cerberus-gtis.html">分布式系统互斥性与幂等性问题的分析与解决</a></p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dockerfile</title>
    <link href="/2021/08/27/%E8%BF%90%E7%BB%B4/Docker/Dockerfile/"/>
    <url>/2021/08/27/%E8%BF%90%E7%BB%B4/Docker/Dockerfile/</url>
    
    <content type="html"><![CDATA[<p>Docker 可以通过读取 Dockerfile 中的指令自动构建镜像。 Dockerfile 是一个文本文档，其中包含了用户创建镜像的所有命令和说明。</p><h3 id="一、-变量"><a href="#一、-变量" class="headerlink" title="一、 变量"></a>一、 变量</h3><p>变量用 <code>$variable_name</code> 或者 <code>$&#123;variable_name&#125;</code> 表示</p><p><code>$&#123;variable:-word&#125;</code>表示如果<code>variable</code>设置，则结果将是该值。如果<code>variable</code>未设置，<code>word</code>则将是结果。<br><code>$&#123;variable:+word&#125;</code>表示如果<code>variable</code>设置则为<code>word</code>结果，否则为空字符串。<br>变量前加 \ 可以转义成普通字符串：<code>\$fooor\$&#123;foo&#125;</code>，表示转换为<code>$foo</code>和<code>$&#123;foo&#125;</code>文字。</p><h3 id="二、FROM"><a href="#二、FROM" class="headerlink" title="二、FROM"></a>二、FROM</h3><p>初始化一个新的构建阶段，并设置基础映像：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">FROM [--platform=&lt;platform&gt;] &lt;image&gt; [AS &lt;name&gt;]<br>FROM [--platform=&lt;platform&gt;] &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]<br>FROM [--platform=&lt;platform&gt;] &lt;image&gt;[@&lt;digest&gt;] [AS &lt;name&gt;]<br></code></pre></div></td></tr></table></figure><p>单个dockfile可以多次出现 FROM ，以使用之前的构建阶段作为另一个构建阶段的依赖项<br>AS name表示为构建阶段命名，在后续FROM和COPY –from=<name>说明中可以使用这个名词，引用此阶段构建的映像<br>digest其实就是就是根据镜像内容产生的一个ID，只要镜像的内容不变digest也不会变<br>tag或digest值是可选的。如果您省略其中任何一个，构建器默认使用一个latest标签。如果找不到该tag值，构建器将返回错误。<br>–platform标志可用于在FROM引用多平台镜像的情况下指定平台。例如，linux/amd64、linux/arm64、 或windows/amd64</p><h3 id="三、RUN"><a href="#三、RUN" class="headerlink" title="三、RUN"></a>三、RUN</h3><p>将在当前镜像之上的新层中执行命令，在 docker build时运行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">RUN /bin/bash -c &#x27;source $HOME/.bashrc; \<br>echo $HOME&#x27;<br></code></pre></div></td></tr></table></figure><p>RUN有两种形式：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">RUN &lt;command&gt;（shell 形式，命令在 shell 中运行，默认/bin/sh -c在 Linux 或cmd /S /CWindows 上）<br>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]（执行形式）<br></code></pre></div></td></tr></table></figure><p>说明：</p><p>可以使用\（反斜杠）将单个 RUN 指令延续到下一行<br>RUN在下一次构建期间，指令缓存不会自动失效。可以使用–no-cache标志使指令缓存无效<br>Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大，可以使用&amp;&amp; 符号连接命令，这样执行后，只会创建 1 层镜像</p><h3 id="四、CMD"><a href="#四、CMD" class="headerlink" title="四、CMD"></a>四、CMD</h3><p>运行程序，在<code>docker run</code> 时运行，但是和<code>run</code>命令不同，RUN 是在 <code>docker build</code>时运行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">FROM ubuntu<br>CMD [&quot;/usr/bin/wc&quot;,&quot;--help&quot;]<br></code></pre></div></td></tr></table></figure><p>支持三种格式</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] 使用 exec 执行，推荐方式；<br>CMD command param1 param2 在 /bin/sh 中执行，提供给需要交互的应用；<br>CMD [&quot;param1&quot;,&quot;param2&quot;] 提供给 ENTRYPOINT 的默认参数；<br></code></pre></div></td></tr></table></figure><p>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。</p><p>如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。</p><h3 id="五、LABEL"><a href="#五、LABEL" class="headerlink" title="五、LABEL"></a>五、LABEL</h3><p>添加元数据</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">LABEL multi.label1=&quot;value1&quot; \<br>      multi.label2=&quot;value2&quot; \<br>      other=&quot;value3&quot;<br></code></pre></div></td></tr></table></figure><h3 id="六、EXPOSE"><a href="#六、EXPOSE" class="headerlink" title="六、EXPOSE"></a>六、EXPOSE</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]<br></code></pre></div></td></tr></table></figure><p>Docker 容器在运行时侦听指定的网络端口。可以指定端口是监听TCP还是UDP，如果不指定协议，默认为TCP。</p><p>该EXPOSE指令实际上并未发布端口。要在运行容器时实际发布端口，<code>docker run -P</code> 来发布和映射一个或多个端口。</p><p>默认情况下，EXPOSE假定 TCP。您还可以指定 UDP：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">EXPOSE 80/udp<br></code></pre></div></td></tr></table></figure><h3 id="七、ENV"><a href="#七、ENV" class="headerlink" title="七、ENV"></a>七、ENV</h3><p>设置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ENV &lt;key&gt;=&lt;value&gt; ...<br></code></pre></div></td></tr></table></figure><p>设置的环境变量将持续存在，您可以使用<code>docker inspect</code>来查看。使用<code>docker run --env &lt;key&gt;=&lt;value&gt;</code>来更改环境变量的值。</p><p>如果环境变量只在构建期间需要，请考虑为单个命令设置一个值：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">RUN DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y ...<br></code></pre></div></td></tr></table></figure><p>或者使用ARG，它不会保留在最终镜像中：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ARG DEBIAN_FRONTEND=noninteractive<br>RUN apt-get update &amp;&amp; apt-get install -y ...<br></code></pre></div></td></tr></table></figure><h3 id="八、ADD"><a href="#八、ADD" class="headerlink" title="八、ADD"></a>八、ADD</h3><p>复制新文件、目录或远程文件 URL <code>&lt;src&gt;</code> ，并将它们添加到<code>&lt;dest&gt;</code>中。</p><p><code>&lt;src&gt;</code>可以指定多个资源，但如果它们是文件或目录，则它们的路径被解释为相对于构建上下文的源，也就是WORKDIR。</p><p>每个都<code>&lt;src&gt;</code>可能包含通配符，匹配将使用 Go 的 filepath.Match规则。例如：</p><p>添加所有以“hom”开头的文件：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ADD hom* /mydir/<br></code></pre></div></td></tr></table></figure><p>在下面的示例中，?被替换为任何单个字符，例如“home.txt”。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ADD hom?.txt /mydir/<br></code></pre></div></td></tr></table></figure><p><dest>是一个绝对路径，或相对WORKDIR的相对路径。</p><h3 id="九、COPY"><a href="#九、COPY" class="headerlink" title="九、COPY"></a>九、COPY</h3><p>语法同ADD一致，复制拷贝文件。</p><p><code>COPY</code>指令和<code>ADD</code>指令的唯一区别在于：是否支持从远程URL获取资源。<code>COPY</code>指令只能从执行<code>docker build</code>所在的主机上读取资源并复制到镜像中。而ADD指令还支持通过URL从远程服务器读取资源并复制到镜像中。</p><p>相同需求时，推荐使用COPY指令。ADD指令更擅长读取本地tar文件并解压缩。</p><h3 id="十、ENTRYPOINT"><a href="#十、ENTRYPOINT" class="headerlink" title="十、ENTRYPOINT"></a>十、ENTRYPOINT</h3><p>ENTRYPOINT 和 CMD 一样，都是在指定容器启动程序及参数，不过它不会被 <code>docker run</code> 的命令行参数指定的指令所覆盖。如果要覆盖的话，需要通过<code>docker run --entrypoint</code> 来指定。</p><p>它有2种格式：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]<br>ENTRYPOINT command param1 param2<br></code></pre></div></td></tr></table></figure><p>当指定了 ENTRYPOINT 后， CMD 的内容作为参数传给 ENTRYPOINT 指令，实际执行时，将变为：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">&lt;ENTRYPOINT&gt; &lt;CMD&gt;<br></code></pre></div></td></tr></table></figure><h3 id="十一、VOLUME"><a href="#十一、VOLUME" class="headerlink" title="十一、VOLUME"></a>十一、VOLUME</h3><p>创建一个具有指定名称的挂载数据卷</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">VOLUME [&quot;/var/log/&quot;]<br>VOLUME /var/log<br></code></pre></div></td></tr></table></figure><p>它的主要作用是：</p><p>避免重要的数据，因容器重启而丢失<br>避免容器不断变大</p><h3 id="十二、ARG"><a href="#十二、ARG" class="headerlink" title="十二、ARG"></a>十二、ARG</h3><p>定义变量，与ENV 作用相同，不过ARG变量不会像ENV变量那样持久化到构建好的镜像中。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ARG &lt;name&gt;[=&lt;default value&gt;]<br></code></pre></div></td></tr></table></figure><p>Docker 有一组预定义的ARG变量，您可以在 Dockerfile 中没有相应指令的情况下使用这些变量。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">HTTP_PROXY<br>http_proxy<br>HTTPS_PROXY<br>https_proxy<br>FTP_PROXY<br>ftp_proxy<br>NO_PROXY<br>no_proxy<br></code></pre></div></td></tr></table></figure><p>要使用这些，请使用–build-arg标志在命令行上传递它们，例如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker build --build-arg HTTPS_PROXY=https://my-proxy.example.com .<br></code></pre></div></td></tr></table></figure><h3 id="十三、ONBUILD"><a href="#十三、ONBUILD" class="headerlink" title="十三、ONBUILD"></a>十三、ONBUILD</h3><p>将一个触发指令添加到镜像中，以便稍后在该镜像用作另一个构建的基础时执行。也就是另外一个dockerfile FROM了这个镜像的时候执行。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ONBUILD ADD . /app/src<br>ONBUILD RUN /usr/local/bin/python-build --dir /app/src<br></code></pre></div></td></tr></table></figure><h3 id="十四、STOPSIGNAL"><a href="#十四、STOPSIGNAL" class="headerlink" title="十四、STOPSIGNAL"></a>十四、STOPSIGNAL</h3><p>设置将发送到容器退出的系统调用信号。该信号可以是与内核系统调用表中的位置匹配的有效无符号数，例如 9，或格式为 SIGNAME 的信号名称，例如 SIGKILL。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">STOPSIGNAL signal<br></code></pre></div></td></tr></table></figure><p>默认的 stop-signal 是 SIGTERM，在docker stop的时候会给容器内PID为1的进程发送这个signal，通过<code>--stop-signal</code> 可以设置自己需要的signal，主要目的是为了让容器内的应用程序在接收到signal之后可以先处理一些事物，实现容器的平滑退出，如果不做任何处理，容器将在一段时间之后强制退出，会造成业务的强制中断，默认时间是10s。</p><h3 id="十五、HEALTHCHECK"><a href="#十五、HEALTHCHECK" class="headerlink" title="十五、HEALTHCHECK"></a>十五、HEALTHCHECK</h3><p>用于指定某个程序或者指令来监控 docker 容器服务的运行状态。该HEALTHCHECK指令有两种形式：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">HEALTHCHECK [OPTIONS] CMD command （通过在容器内运行命令来检查容器健康状况）<br>HEALTHCHECK NONE （禁用从基础镜像继承的任何健康检查）<br></code></pre></div></td></tr></table></figure><h3 id="十六、SHELL"><a href="#十六、SHELL" class="headerlink" title="十六、SHELL"></a>十六、SHELL</h3><p>覆盖用于命令的shell 形式的默认 shell。Linux 上的默认 shell 是<code>[&quot;/bin/sh&quot;, &quot;-c&quot;]</code>，Windows 上是<code>[&quot;cmd&quot;, &quot;/S&quot;, &quot;/C&quot;]</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">SHELL [&quot;executable&quot;, &quot;parameters&quot;] <br></code></pre></div></td></tr></table></figure><p>该SHELL指令在 Windows 上特别有用，因为 Windows 有两种常用且截然不同的本机 shell：cmd和powershell，以及可用的备用 shell，包括sh。该SHELL指令可以出现多次。每条SHELL指令都会覆盖所有先前的SHELL指令，并影响所有后续指令。</p><h3 id="十七、WORKDIR"><a href="#十七、WORKDIR" class="headerlink" title="十七、WORKDIR"></a>十七、WORKDIR</h3><p>工作目录，如果WORKDIR不存在，即使它没有在后续Dockerfile指令中使用，它也会被创建。</p><p>docker build 构建镜像过程中，每一个 RUN 命令都会新建一层。只有通过 WORKDIR 创建的目录才会一直存在。</p><p>可以设置多个WORKDIR，如果提供了相对路径，它将相对于前一条WORKDIR指令的路径。例如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">WORKDIR /a<br>WORKDIR b<br>WORKDIR c<br>RUN pwd <br></code></pre></div></td></tr></table></figure><p>最终pwd命令的输出是/a/b/c.</p><p>该WORKDIR指令可以解析先前使用 ENV，例如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ENV DIRPATH=/path<br>WORKDIR $DIRPATH/$DIRNAME<br>RUN pwd<br></code></pre></div></td></tr></table></figure><p>最终pwd命令的输出是/path/$DIRNAME</p><h3 id="十八、USER"><a href="#十八、USER" class="headerlink" title="十八、USER"></a>十八、USER</h3><p>设置用户名（或 UID）和可选的用户组（或 GID）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">USER &lt;user&gt;[:&lt;group&gt;]<br>USER &lt;UID&gt;[:&lt;GID&gt;]<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Dockerfile</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>Dockerfile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac关闭浏览器手势</title>
    <link href="/2021/08/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/Mac/Mac%E5%85%B3%E9%97%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%8B%E5%8A%BF/"/>
    <url>/2021/08/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/Mac/Mac%E5%85%B3%E9%97%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%8B%E5%8A%BF/</url>
    
    <content type="html"><![CDATA[<p>Mac上面关闭 双指左滑右滑，导致浏览器前进后退的现象</p><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -<span class="hljs-keyword">bool</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><h3 id="Microsoft-Edge"><a href="#Microsoft-Edge" class="headerlink" title="Microsoft Edge"></a>Microsoft Edge</h3><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">defaults write com.microsoft.edgemac AppleEnableSwipeNavigateWithScrolls -<span class="hljs-keyword">bool</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机相关</category>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机相关</tag>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>composer安装依赖报错</title>
    <link href="/2021/07/22/PHP/Composer/composer%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E6%8A%A5%E9%94%99/"/>
    <url>/2021/07/22/PHP/Composer/composer%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p>使用composer安装composer.json文件中的依赖时，报错 <code>Allowed memory size of 1610612736 bytes exhausted (tried to allocate 83886080 bytes)</code>，反正就是说内存超出限制了。<br>实际是因为<code>php.ini</code>中 <code>memory_limit</code>的大小限制的。</p><h3 id="修改php-ini"><a href="#修改php-ini" class="headerlink" title="修改php.ini"></a>修改php.ini</h3><p>mac M1 通过<code>homebrew</code>安装的PHP，对应的<code>php.ini</code> 文件位置 <code>opt/homebrew/etc/php/7.4/php.ini</code><br>我自己的环境修改为 2048M 后，composer 可以正常安装依赖。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">memory_limit = 2048M<br></code></pre></div></td></tr></table></figure><p>重新执行 composer install，开启愉悦地玩耍。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Composer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Composer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL Explain</title>
    <link href="/2021/07/20/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%20Explain/"/>
    <url>/2021/07/20/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%20Explain/</url>
    
    <content type="html"><![CDATA[<blockquote><p>平常业务中，经常会出现一些查询的慢sql，有些一眼就可以看出来是什么问题，有些不太方便定位是什么条件导致查询变慢。这时候我们通过<code>explain</code>命令来查看mysql查询时的关键指标</p></blockquote><h3 id="查询示例"><a href="#查询示例" class="headerlink" title="查询示例"></a>查询示例</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sehll">explain select * from orders where created_at &gt; &#39;2021-07-12 00:00:00&#39; and created_at &lt; &#39;2021-07-19 00:00:00&#39;;<br></code></pre></div></td></tr></table></figure><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">orders</td><td align="left">NULL</td><td align="left">range</td><td align="left">orders_created_at_status_deleted_at_index</td><td align="left">orders_created_at_status_deleted_at_index</td><td align="left">5</td><td align="left">NULL</td><td align="left">176128</td><td align="left">100</td><td align="left">Using index condition</td></tr></tbody></table><p>expain出来的信息有12个，分别是<code>id、select_type、table、partitions、type、possible_keys、key、key_len、ref、rows、filtered、Extra</code>。</p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ul><li>id：选择标识符</li><li>select_type：表示查询的类型。</li><li>table：输出结果集的表</li><li>partitions：匹配的分区</li><li>type：表示表的连接类型</li><li>possible_keys：表示查询时，可能使用的索引</li><li>key：表示实际使用的索引</li><li>key_len：索引字段的长度</li><li>ref：列与索引的比较</li><li>rows：扫描出的行数(估算的行数)</li><li>filtered：按表条件过滤的行百分比</li><li>Extra：执行情况的描述和说明</li></ul><h3 id="一、id：选择标识符"><a href="#一、id：选择标识符" class="headerlink" title="一、id：选择标识符"></a>一、id：选择标识符</h3><ol><li><p>id相同时，执行顺序由上至下</p></li><li><p>如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</p></li><li><p>id如果相同，可以认为是一组，从上往下顺序执行；在所有组中，id值越大，优先级越高，越先执行</p></li></ol><h3 id="二、select-type：表示查询的类型。"><a href="#二、select-type：表示查询的类型。" class="headerlink" title="二、select_type：表示查询的类型。"></a>二、select_type：表示查询的类型。</h3><ul><li><p>SIMPLE(简单SELECT，不使用UNION或子查询等)</p></li><li><p>PRIMARY(子查询中最外层查询，查询中若包含任何复杂的子部分，最外层的select被标记为PRIMARY)</p></li><li><p>UNION(UNION中的第二个或后面的SELECT语句)</p></li><li><p>DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)</p></li><li><p>UNION RESULT(UNION的结果，union语句中第二个select开始后面所有select)</p></li><li><p>SUBQUERY(子查询中的第一个SELECT，结果不依赖于外部查询)</p></li><li><p>DEPENDENT SUBQUERY(子查询中的第一个SELECT，依赖于外部查询)</p></li><li><p>DERIVED(派生表的SELECT, FROM子句的子查询)</p></li><li><p>UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)</p></li></ul><h3 id="三、table：输出结果集的表"><a href="#三、table：输出结果集的表" class="headerlink" title="三、table：输出结果集的表"></a>三、table：输出结果集的表</h3><p>显示这一步所访问数据库中表名称（显示这一行的数据是关于哪张表的），有时不是真实的表名字，可能是简称，例如上面的e，d，也可能是第几步执行的结果的简称</p><h3 id="四、partitions：匹配的分区"><a href="#四、partitions：匹配的分区" class="headerlink" title="四、partitions：匹配的分区"></a>四、partitions：匹配的分区</h3><h3 id="五、type：表示表的连接类型"><a href="#五、type：表示表的连接类型" class="headerlink" title="五、type：表示表的连接类型"></a>五、type：表示表的连接类型</h3><p>对表访问方式，表示MySQL在表中找到所需行的方式，又称“访问类型”。</p><p>常用的类型有： <code>ALL、index、range、 ref、eq_ref、const、system、NULL</code>（从左到右，性能从差到好）</p><ul><li><p>ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行</p></li><li><p>index: Full Index Scan，index与ALL区别为index类型只遍历索引树</p></li><li><p>range:只检索给定范围的行，使用一个索引来选择行</p></li><li><p>ref: 表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p></li><li><p>eq_ref: 类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件</p></li><li><p>const、system: 当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量，system是const类型的特例，当查询的表只有一行的情况下，使用system</p></li><li><p>NULL: MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。</p></li></ul><h3 id="六、possible-keys：表示查询时，可能使用的索引"><a href="#六、possible-keys：表示查询时，可能使用的索引" class="headerlink" title="六、possible_keys：表示查询时，可能使用的索引"></a>六、possible_keys：表示查询时，可能使用的索引</h3><p>指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用（该查询可以利用的索引，如果没有任何索引显示 null）</p><p>该列完全独立于EXPLAIN输出所示的表的次序。这意味着在possible_keys中的某些键实际上不能按生成的表次序使用。<br>如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询</p><h3 id="七、key：表示实际使用的索引"><a href="#七、key：表示实际使用的索引" class="headerlink" title="七、key：表示实际使用的索引"></a>七、key：表示实际使用的索引</h3><p>key列显示MySQL实际决定使用的键（索引），必然包含在possible_keys中</p><p>如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。</p><h3 id="八、key-len：索引字段的长度"><a href="#八、key-len：索引字段的长度" class="headerlink" title="八、key_len：索引字段的长度"></a>八、key_len：索引字段的长度</h3><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）</p><p>不损失精确性的情况下，长度越短越好 </p><h3 id="九、ref：列与索引的比较"><a href="#九、ref：列与索引的比较" class="headerlink" title="九、ref：列与索引的比较"></a>九、ref：列与索引的比较</h3><p>列与索引的比较，表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p><h3 id="十、rows：扫描出的行数-估算的行数"><a href="#十、rows：扫描出的行数-估算的行数" class="headerlink" title="十、rows：扫描出的行数(估算的行数)"></a>十、rows：扫描出的行数(估算的行数)</h3><p> 估算出结果集行数，表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</p><h3 id="十一、filtered：按表条件过滤的行百分比"><a href="#十一、filtered：按表条件过滤的行百分比" class="headerlink" title="十一、filtered：按表条件过滤的行百分比"></a>十一、filtered：按表条件过滤的行百分比</h3><h3 id="十二、Extra：执行情况的描述和说明"><a href="#十二、Extra：执行情况的描述和说明" class="headerlink" title="十二、Extra：执行情况的描述和说明"></a>十二、Extra：执行情况的描述和说明</h3><p>该列包含MySQL解决查询的详细信息,有以下几种情况：</p><ul><li><p>Using where:不用读取表中所有信息，仅通过索引就可以获取所需数据，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示mysql服务器将在存储引擎检索行后再进行过滤</p></li><li><p>Using temporary：表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询，常见 group by ; order by</p></li><li><p>Using filesort：当Query中包含 order by 操作，而且无法利用索引完成的排序操作称为“文件排序”</p></li><li><p>Using join buffer：改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。</p></li><li><p>Impossible where：这个值强调了where语句会导致没有符合条件的行（通过收集统计信息不可能存在结果）。</p></li><li><p>Select tables optimized away：这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行</p></li><li><p>No tables used：Query语句中使用from dual 或不含任何from子句</p></li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况</li><li>EXPLAIN不考虑各种Cache</li><li>EXPLAIN不能显示MySQL在执行查询时所作的优化工作</li><li>部分统计信息是估算的，并非精确值</li><li>EXPALIN只能解释SELECT操作，其他操作要重写为SELECT后查看执行计划。</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel - ide-helper</title>
    <link href="/2021/07/01/PHP/Laravel/ide-helper/"/>
    <url>/2021/07/01/PHP/Laravel/ide-helper/</url>
    
    <content type="html"><![CDATA[<p>通过 <code>ide-helper</code> 自动生成Model上面的 属性</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">php artisan ide-helper:models &quot;App\\Models\\CustomizedSkuInfo&quot;<br></code></pre></div></td></tr></table></figure><p>Model层最好指定一下表名，并且数据库中这张表已经存在</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomizedSkuInfo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">SoftDeletes</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;customized_sku_info&#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP 请求之合并与拆分技术详解</title>
    <link href="/2021/06/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/HTTP/HTTP%20%E8%AF%B7%E6%B1%82%E4%B9%8B%E5%90%88%E5%B9%B6%E4%B8%8E%E6%8B%86%E5%88%86%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/06/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/HTTP/HTTP%20%E8%AF%B7%E6%B1%82%E4%B9%8B%E5%90%88%E5%B9%B6%E4%B8%8E%E6%8B%86%E5%88%86%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://weibo.com/ttarticle/p/show?id=2309404650438917226597">HTTP 请求之合并与拆分技术详解</a></li><li><a href="https://segmentfault.com/a/1190000015665465">合并HTTP请求 vs 并行HTTP请求，到底谁更快？</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机相关</category>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机相关</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-序</title>
    <link href="/2021/06/04/Golang/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/0%E6%80%BB%E7%BB%93/"/>
    <url>/2021/06/04/Golang/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="参考项目"><a href="#参考项目" class="headerlink" title="参考项目"></a>参考项目</h3><ul><li><a href="https://github.com/senghoo/golang-design-pattern">golang-design-pattern</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1单例模式</title>
    <link href="/2021/06/04/Golang/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/06/04/Golang/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>adasd</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">单例模式<br>todo<br> <br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>画图经验总结</title>
    <link href="/2021/06/03/%E5%B7%A5%E5%85%B7/%E7%94%BB%E5%9B%BE/%E7%94%BB%E5%9B%BE%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <url>/2021/06/03/%E5%B7%A5%E5%85%B7/%E7%94%BB%E5%9B%BE/%E7%94%BB%E5%9B%BE%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="常用的网址"><a href="#常用的网址" class="headerlink" title="常用的网址"></a>常用的网址</h3><p><a href="https://www.processon.com/">Processon</a></p><p><a href="https://app.diagrams.net/">Draw.io</a></p><p><a href="https://mermaid-js.github.io/mermaid/#/">Mermaid</a></p><p>个人比较推荐 <code>Draw.io</code>, 元文件可以直接存储到 github，对于数量和下载的图片没有任何限制，可以下载SVG矢量图</p><h3 id="画图教程"><a href="#画图教程" class="headerlink" title="画图教程"></a>画图教程</h3><ul><li><a href="https://www.bilibili.com/video/BV1dV411z77V">PROCESSON在线流程制作教程</a></li><li><a href="https://www.bilibili.com/video/BV1Tf4y1v7RK">draw.io画流程图的基本操作和技巧</a> </li><li><a href="https://www.bilibili.com/video/BV1T54114782">draw.io 教程（流程图设计工具）B站</a></li><li><a href="https://www.youtube.com/playlist?list=PLX6xdk86h_0zxz0Ia4Te17VTehnlqmBnw">draw.io 教程（流程图设计工具）youtube</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>做图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>做图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gin-路由</title>
    <link href="/2021/05/23/Golang/Gin/%E8%B7%AF%E7%94%B1%E6%A0%91/"/>
    <url>/2021/05/23/Golang/Gin/%E8%B7%AF%E7%94%B1%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<ul><li><p>httprouter框架 (Gin使用的路由框架)  <a href="https://www.cnblogs.com/foxy/p/9469401.html">https://www.cnblogs.com/foxy/p/9469401.html</a></p></li><li><p><a href="https://blog.csdn.net/e421083458/article/details/91994788">https://blog.csdn.net/e421083458/article/details/91994788</a></p></li></ul><ul><li>Gin框架的路由快在哪里  <a href="https://www.bilibili.com/video/BV1q7411U7qf">https://www.bilibili.com/video/BV1q7411U7qf</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>Gin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>Gin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel-Model事件监听</title>
    <link href="/2021/05/20/PHP/Laravel/Laravel-Model%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/"/>
    <url>/2021/05/20/PHP/Laravel/Laravel-Model%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/</url>
    
    <content type="html"><![CDATA[<blockquote><p>通常我们有这样的业务需求，如果Model的某个字段发生了变化，就做出对应的业务处理，那么怎么才能监测到字段的变化呢，Laravel的Eloquent Model模型为我们提供了一套解决方案。其实就是利用Observer监听Model。</p></blockquote><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1、创建事件<br><br>php artisan make:observer AfterSaleObserver --model=Models/User<br><br>2、在 AppServiceProvider 里面注册事件<br><br></code></pre></div></td></tr></table></figure><p>在 <code>Observers</code>目录下回生成 <code>UserObserver</code>文件</p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>Eloquent 的模型触发了几个事件，可以在模型的生命周期的以下几点进行监控： <code>retrieved、creating、created、updating、updated、saving、saved、deleting、deleted、restoring、restored</code>。事件能在每次在数据库中保存或更新特定模型类时轻松地执行代码。<br>从数据库中检索现有模型时会触发 <code>retrieved</code> 事件。当新模型第一次被保存时， <code>creating</code> 以及 <code>created</code> 事件会被触发。如果模型已经存在于数据库中并且调用了 <code>save</code> 方法，会触发 <code>updating</code> 和 <code>updated</code> 事件。在这两种情况下，<code>saving / saved</code> 事件都会触发。<br>开始前，在 Eloquent 模型上定义一个 <code>$dispatchesEvents</code> 属性，将 Eloquent 模型的生命周期的各个点映射到你的 事件类 中。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">UserSaved</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">UserDeleted</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Notifications</span>\<span class="hljs-title">Notifiable</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Auth</span>\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">Authenticatable</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Authenticatable</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">Notifiable</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 模型的事件映射。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> array</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$dispatchesEvents</span> = [<br>        <span class="hljs-string">&#x27;saved&#x27;</span> =&gt; UserSaved::class,<br>        <span class="hljs-string">&#x27;deleted&#x27;</span> =&gt; UserDeleted::class,<br>    ];<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="观察器"><a href="#观察器" class="headerlink" title="观察器"></a>观察器</h3><p>如果要给某个模型监听很多事件，则可以使用观察器将所有监听器分组到一个类中。观察器类里的方法名应该对应 Eloquent 中你想监听的事件。 每种方法接收 model 作为其唯一的参数。Laravel 没有为观察器设置默认的目录，所以你可以创建任何你喜欢你的目录来存放：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Observers</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">User</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserObserver</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听用户创建的事件。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  User  $user</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">created</span>(<span class="hljs-params">User <span class="hljs-variable">$user</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-variable">$user</span>-&gt;getOriginal(<span class="hljs-string">&#x27;status&#x27;</span>);<br>        <span class="hljs-variable">$user</span>-&gt;getOriginal();<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Handle the after sale &quot;updated&quot; event.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> AfterSale $afterSale</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updated</span> (<span class="hljs-params">User <span class="hljs-variable">$user</span></span>) </span>&#123;<br><br>        <span class="hljs-variable">$newStatus</span> = <span class="hljs-variable">$user</span>-&gt;status;  <span class="hljs-comment">// 获取model更新后的字段值</span><br>        <span class="hljs-variable">$oldStatus</span> = <span class="hljs-variable">$user</span>-&gt;getOriginal(<span class="hljs-string">&#x27;status&#x27;</span>);   <span class="hljs-comment">// 获取model更新前的字段值</span><br>        <span class="hljs-variable">$oldUser</span> = <span class="hljs-variable">$user</span>-&gt;getOriginal();  <span class="hljs-comment">// 获取更新前的整个model实例</span><br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$newStatus</span> != <span class="hljs-variable">$oldStatus</span>) &#123;<br>            <span class="hljs-comment">// todo something</span><br>            Logger::info(<span class="hljs-variable">$user</span>-&gt;getOriginal());<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听用户删除事件。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  User  $user</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deleting</span>(<span class="hljs-params">User <span class="hljs-variable">$user</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>要注册一个观察器，需要在模型上使用 <code>observe</code> 方法。你可以在服务提供器中的 <code>boot</code> 方法注册观察器。在这个例子中，我们将在 <code>AppServiceProvider</code> 注册观察器：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Providers</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">User</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Observers</span>\<span class="hljs-title">UserObserver</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">ServiceProvider</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 运行所有应用.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        User::observe(UserObserver::class);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册服务提供.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP8 feature</title>
    <link href="/2021/05/15/PHP/PHP8/PHP8%20feature/"/>
    <url>/2021/05/15/PHP/PHP8/PHP8%20feature/</url>
    
    <content type="html"><![CDATA[<blockquote><p>PHP 8.0 是 PHP 语言的一个主版本更新。<br>它包含了很多新功能与优化项， 包括命名参数、联合类型、注解、构造器属性提升、match 表达式、nullsafe 运算符、JIT，并改进了类型系统、错误处理、语法一致性。</p></blockquote><p><a href="https://www.php.net/releases/8.0/zh.php">PHP8中文官方文档</a></p><p><a href="https://www.php.net/manual/zh/migration80.php">PHP8迁移指南</a></p><ul><li><a href="https://www.php.net/manual/zh/migration80.new-features.php">新特性</a></li><li><a href="https://www.php.net/manual/zh/migration80.incompatible.php">不向后兼容的变更</a></li><li><a href="https://www.php.net/manual/zh/migration80.deprecated.php">PHP 8.0 废弃的功能</a></li><li><a href="https://www.php.net/manual/zh/migration80.other-changes.php">其他变更</a></li></ul><h3 id="视频或者文档资料"><a href="#视频或者文档资料" class="headerlink" title="视频或者文档资料"></a>视频或者文档资料</h3><ul><li><a href="https://www.bilibili.com/video/BV1Ua411A72q">php8内核开发者介绍php8 2020php峰会</a></li><li><a href="https://www.laruence.com/2020/06/12/5902.html">PHP 8新特性之Attributes(注解)</a></li></ul><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><ul><li><input checked="" disabled="" type="checkbox"> 可以主要看一下 <a href="https://www.php.net/manual/zh/migration80.incompatible.php">不向后兼容的变更</a>，短期内对我们编写程序影响最大的点应该是这里。</li></ul>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>PHP8</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>PHP8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git Commit 规范</title>
    <link href="/2021/04/30/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/Git%20Commit%20%E8%A7%84%E8%8C%83/"/>
    <url>/2021/04/30/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/Git%20Commit%20%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h3 id="Git-提交规范文档"><a href="#Git-提交规范文档" class="headerlink" title="Git 提交规范文档"></a>Git 提交规范文档</h3><ul><li>PHPStrom 推荐推荐使用 Git Commit Template 插件，方便编写通用的git commit message</li><li><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">Commit message 和 Change log 编写指南</a></li><li><a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/#%e7%ba%a6%e5%ae%9a%e5%bc%8f%e6%8f%90%e4%ba%a4%e8%a7%84%e8%8c%83">约定式提交</a></li><li><a href="https://juejin.cn/post/6844904004749623309">开箱即用的代码提交规范</a></li></ul><h3 id="Git-提交规范"><a href="#Git-提交规范" class="headerlink" title="Git 提交规范"></a>Git 提交规范</h3><h4 id="Commit-message-的格式"><a href="#Commit-message-的格式" class="headerlink" title="Commit message 的格式"></a>Commit message 的格式</h4><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-params">&lt;type&gt;</span>(<span class="hljs-params">&lt;scope&gt;</span>): <span class="hljs-params">&lt;subject&gt;</span><br><span class="hljs-comment">// 空一行</span><br><span class="hljs-params">&lt;body&gt;</span><br><span class="hljs-comment">// 空一行</span><br><span class="hljs-params">&lt;footer&gt;</span><br></code></pre></div></td></tr></table></figure><p>其中，Header 是必需的，Body 和 Footer 可以省略。</p><p>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p><h2 id="2-1-Header"><a href="#2-1-Header" class="headerlink" title="2.1 Header"></a><strong>2.1 Header</strong></h2><p>Header部分只有一行，包括三个字段：<code>type</code>（必需）、<code>scope</code>（可选）和 <code>subject</code>（必需）。</p><p>（1）type</p><p><code>type</code>用于说明 commit 的类别，只允许使用下面7个标识。</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima">feat：新功能（<span class="hljs-built_in">feature</span>）<br><span class="hljs-built_in">fix</span>：修补bug<br>docs：文档（documentation）<br><span class="hljs-built_in">style</span>： 格式（不影响代码运行的变动）<br>refactor：重构（即不是新增功能，也不是修改bug的代码变动）<br>test：增加测试<br>chore：构建过程或辅助工具的变动<br></code></pre></div></td></tr></table></figure><p>如果<code>type</code>为<code>feat</code>和<code>fix</code>，则该 commit 将肯定出现在 Change log 之中。其他情况（<code>docs、chore、style、refactor、test</code>）由你决定，要不要放入 Change log，建议是不要。</p><p>（2）scope</p><p><code>scope</code>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><p>（3）subject</p><p><code>subject</code>是 commit 目的的简短描述，不超过50个字符。</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">以动词开头，使用第一人称现在时，比如<span class="hljs-keyword">change</span>，而不是changed或<span class="hljs-keyword">changes</span><br>第一个字母小写<br>结尾不加句号（.）<br></code></pre></div></td></tr></table></figure><h2 id="2-2-Body"><a href="#2-2-Body" class="headerlink" title="2.2 Body"></a><strong>2.2 Body</strong></h2><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">More <span class="hljs-keyword">detailed</span> explanatory <span class="hljs-keyword">text</span>, <span class="hljs-keyword">if</span> necessary.  Wrap <span class="hljs-keyword">it</span> <span class="hljs-built_in">to</span> <br>about <span class="hljs-number">72</span> <span class="hljs-keyword">characters</span> <span class="hljs-keyword">or</span> so. <br><br>Further paragraphs come <span class="hljs-keyword">after</span> blank <span class="hljs-keyword">lines</span>.<br><br>- Bullet points are okay, too<br>- Use <span class="hljs-keyword">a</span> hanging indent<br></code></pre></div></td></tr></table></figure><p>有两个注意点。</p><p>（1）使用第一人称现在时，比如使用change而不是changed或changes。</p><p>（2）应该说明代码变动的动机，以及与以前行为的对比。</p><h2 id="2-3-Footer"><a href="#2-3-Footer" class="headerlink" title="2.3 Footer"></a><strong>2.3 Footer</strong></h2><p>Footer 部分只用于两种情况。</p><p>（1）不兼容变动</p><p>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">BREAKING CHANGE:</span> <span class="hljs-string">isolate</span> <span class="hljs-string">scope</span> <span class="hljs-string">bindings</span> <span class="hljs-string">definition</span> <span class="hljs-string">has</span> <span class="hljs-string">changed.</span><br><br>    <span class="hljs-attr">To migrate the code follow the example below:</span><br><br>    <span class="hljs-attr">Before:</span><br><br>    <span class="hljs-attr">scope:</span> &#123;<br>      <span class="hljs-attr">myAttr:</span> <span class="hljs-string">&#x27;attribute&#x27;</span>,<br>    &#125;<br><br>    <span class="hljs-attr">After:</span><br><br>    <span class="hljs-attr">scope:</span> &#123;<br>      <span class="hljs-attr">myAttr:</span> <span class="hljs-string">&#x27;@&#x27;</span>,<br>    &#125;<br><br>    <span class="hljs-string">The</span> <span class="hljs-string">removed</span> <span class="hljs-string">`inject`</span> <span class="hljs-string">wasn&#x27;t</span> <span class="hljs-string">generaly</span> <span class="hljs-string">useful</span> <span class="hljs-string">for</span> <span class="hljs-string">directives</span> <span class="hljs-string">so</span> <span class="hljs-string">there</span> <span class="hljs-string">should</span> <span class="hljs-string">be</span> <span class="hljs-literal">no</span> <span class="hljs-string">code</span> <span class="hljs-string">using</span> <span class="hljs-string">it.</span><br></code></pre></div></td></tr></table></figure><p>（2）关闭 Issue</p><p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Closes </span><span class="hljs-comment">#234</span><br></code></pre></div></td></tr></table></figure><p>也可以一次关闭多个 issue 。</p><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">Closes</span> <span class="hljs-selector-id">#123</span>, <span class="hljs-selector-id">#245</span>, <span class="hljs-selector-id">#992</span><br></code></pre></div></td></tr></table></figure><h2 id="2-4-Revert"><a href="#2-4-Revert" class="headerlink" title="2.4 Revert"></a><strong>2.4 Revert</strong></h2><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以<code>revert</code>:开头，后面跟着被撤销 Commit 的 Header。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">revert</span>: feat(pencil): add &#x27;graphiteWidth&#x27; option<br><br><span class="hljs-attribute">This</span> reverts commit <span class="hljs-number">667</span>ecc<span class="hljs-number">1654</span>a<span class="hljs-number">317</span>a<span class="hljs-number">13331</span>b<span class="hljs-number">17617</span>d<span class="hljs-number">973392</span>f<span class="hljs-number">415</span>f<span class="hljs-number">02</span>.<br></code></pre></div></td></tr></table></figure><p>Body部分的格式是固定的，必须写成<code>This reverts commit &amp;lt;hash&gt;.</code>，其中的<code>hash</code>是被撤销 commit 的 SHA 标识符。</p><p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的<code>Reverts</code>小标题下面。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://juejin.cn/post/6844903944175484936">【译】Google 官方文章——如何去做code review</a></li><li><a href="https://google.github.io/eng-practices/review/reviewer/">https://google.github.io/eng-practices/review/reviewer/</a></li><li><a href="https://google.github.io/styleguide/">Google Style Guides</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>编程规范</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>编程规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电影推荐</title>
    <link href="/2021/04/27/%E5%BD%B1%E8%A7%86/%E7%94%B5%E5%BD%B1/"/>
    <url>/2021/04/27/%E5%BD%B1%E8%A7%86/%E7%94%B5%E5%BD%B1/</url>
    
    <content type="html"><![CDATA[<h3 id="推荐自己比较看过的比较喜欢的影视作品"><a href="#推荐自己比较看过的比较喜欢的影视作品" class="headerlink" title="推荐自己比较看过的比较喜欢的影视作品"></a>推荐自己比较看过的比较喜欢的影视作品</h3><h3 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h3><ul><li><a href="https://www.bilibili.com/bangumi/play/ss33314/">城南旧事</a></li><li><a href="https://www.bilibili.com/video/BV1HE41177c1">活着</a></li><li><a href="https://www.bilibili.com/video/BV1Hs411g7mE">天使爱美丽</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss25393/">你丫闭嘴</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss33315/">雷雨</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss32515/">祥林嫂-祝福</a></li><li><a href="https://www.bilibili.com/video/BV11t411v7sz">药</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss33324/">阿Q正传</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss10080/">白日焰火</a></li><li>姜子牙</li><li>信条</li><li><a href="https://www.bilibili.com/video/BV18J41117Nu">小丑</a></li><li><a href="">唐人街探案123</a></li><li><a href="https://www.bilibili.com/video/BV1cf4y1v7fE">数码宝贝1-9</a></li><li><a href="https://www.bilibili.com/video/BV1EW411u7j5">横空出世</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss11907/">一个勺子</a></li><li><a href="https://www.bilibili.com/video/BV1V4411t7GK">血钻</a></li><li><a href="https://www.bilibili.com/video/BV1xb411278E">不能说的秘密</a></li><li><a href="https://www.bilibili.com/video/BV1pt411e7gj">星际穿越</a></li><li><a href="https://www.bilibili.com/video/BV11W411L7u1">神秘巨星</a></li><li><a href="https://www.bilibili.com/video/BV1AW411T7TC">至暗时刻</a></li><li><a href="https://www.bilibili.com/video/BV1qW41137nk">银翼杀手2049</a></li><li><a href="https://www.bilibili.com/video/BV1Tp411R7EG">奇迹男孩</a></li><li><a href="https://www.bilibili.com/video/BV1ZW411w7Jr">降临</a></li><li><a href="https://www.bilibili.com/video/BV1tW411A7Ea">敦刻尔克</a></li><li><a href="https://www.bilibili.com/video/BV1hW411s7P4">钢琴家</a></li><li><a href="https://www.bilibili.com/video/BV1Pt411Y7YK">海上钢琴师</a></li><li><a href="https://www.bilibili.com/video/BV1pW411n75Y">飞跃疯人院</a></li><li><a href="https://www.bilibili.com/video/BV1pW411e7oF">寻梦环游记</a></li><li><a href="https://www.bilibili.com/video/BV1nX4y1K7Jc">飞屋环游记</a></li><li><a href="https://www.bilibili.com/video/BV1VW411q7mF">勇敢的心</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss27504/">罗马假日</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss25537/">蒂凡尼的早餐</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss26891/">龙凤配</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss26901/">战争与和平</a></li><li>窈窕淑女</li><li>甜姐儿</li><li>谜中谜</li><li><a href="https://www.bilibili.com/video/BV1cx411q7F6">华尔街之狼</a></li><li><a href="https://www.bilibili.com/video/BV1zx411879p">禁闭岛</a></li><li><a href="https://www.bilibili.com/video/BV18x411v7Q8">熔炉</a></li><li><a href="https://www.bilibili.com/video/BV19K4y1N7uZ">忠犬八公的故事</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss26175/">美丽心灵</a></li><li><a href="https://www.bilibili.com/video/BV1nx411r7SZ">海边的曼彻斯特</a></li><li><a href="https://www.bilibili.com/video/BV1ns411h7a5">素媛</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss32432/">了不起的盖茨比</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss12548">让子弹飞</a></li><li><a href="https://www.bilibili.com/video/BV1ps411x7UY">鬼子来了</a></li><li><a href="https://www.bilibili.com/video/BV1ks411C7uF">辛德勒的名单</a></li><li><a href="https://www.bilibili.com/video/BV14s411C7Dk">这个杀手不太冷</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss28888/">黑客帝国1</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss28966">黑客帝国2</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss28967">黑客帝国3</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss2688/">秒速五厘米</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss25568">阿甘正传</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss28586/">盗梦空间</a></li><li><a href="https://www.bilibili.com/video/BV1xs411y7bs">千与千寻</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss28585/">星际穿越</a></li><li><a href="https://www.bilibili.com/video/BV1Rs411e7Zs">海上钢琴师</a></li><li><a href="https://www.bilibili.com/bangumi/play/ep118109">大鱼海棠</a></li></ul><h3 id="电视剧"><a href="#电视剧" class="headerlink" title="电视剧"></a>电视剧</h3><ul><li><a href="https://www.bilibili.com/video/BV12s411x79z">大宋提刑官</a></li><li><a href="https://www.bilibili.com/video/BV1hK4y1N7E2">闯关东</a></li><li><a href="https://www.bilibili.com/video/BV1zo4y1R71Y">山海情</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss33981/">风犬少年的天空</a></li><li><a href="https://www.bilibili.com/video/BV1gA411M7RN">是大臣</a></li><li><a href="https://www.bilibili.com/video/BV1Fa411c7Vh">是首相</a></li><li><a href="https://www.bilibili.com/video/BV1QJ411a76B">纸牌屋</a></li><li><a href="https://www.bilibili.com/video/BV1fe411x7ZG">神探夏洛克</a></li><li><a href="https://www.bilibili.com/bangumi/play/ep265262">火力少年王1</a></li><li><a href="https://www.bilibili.com/video/BV1Tt411f7k4">火力少年王2</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss33625/">水浒传</a></li><li><a href="https://tv.cctv.com/2021/02/02/VIDAJNNHiuXByYkLTOs0zo2k210202.shtml">觉醒年代</a></li><li><a href="https://www.bilibili.com/video/BV1hx411e7KP">三国演义</a></li><li><a href="https://www.bilibili.com/video/BV1CC4y1a7ee">红楼梦</a></li></ul><h3 id="综艺"><a href="#综艺" class="headerlink" title="综艺"></a>综艺</h3><ul><li><a href="https://www.bilibili.com/bangumi/play/ss30759/">你好生活1</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss36135/">你好生活2</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss33670/">花样实习生</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>电影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP开发规范</title>
    <link href="/2021/04/23/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/PHP%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <url>/2021/04/23/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/PHP%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">code_scheme</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mohuani&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">PHPCodeStyleSettings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ALIGN_KEY_VALUE_PAIRS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ALIGN_PHPDOC_COMMENTS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONCAT_SPACES&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;COMMA_AFTER_LAST_ARRAY_ELEMENT&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOWER_CASE_BOOLEAN_CONST&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FORCE_SHORT_DECLARATION_ARRAY_STYLE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">PHPCodeStyleSettings</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">editorconfig</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ENABLED&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">editorconfig</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">codeStyleSettings</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;PHP&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;KEEP_FIRST_COLUMN_COMMENT&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CLASS_BRACE_STYLE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;METHOD_BRACE_STYLE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ALIGN_MULTILINE_ARRAY_INITIALIZER_EXPRESSION&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SPACE_BEFORE_METHOD_PARENTHESES&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;KEEP_SIMPLE_METHODS_IN_ONE_LINE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">codeStyleSettings</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">code_scheme</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>PHPstorm  code-style 直接导入规范</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/85934/1617256307388-a6b2edfa-d0c4-49a6-a03d-0ddc7ee36253.png#height=758&id=P69Xd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=758&originWidth=1225&originalType=binary&size=534753&status=done&style=none&width=1225" alt="image.png"></p><h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><ul><li><p><a href="https://plugins.jetbrains.com/plugin/7320-php-annotations">PHP Annotation</a></p></li><li><p><a href="https://plugins.jetbrains.com/plugin/9525--env-files-support">.env files support</a></p></li><li><p><a href="https://plugins.jetbrains.com/plugin/4230-bashsupport">BashSupport</a></p></li><li><p><a href="https://plugins.zhile.io/">IDE Eval Reset</a></p><blockquote><p>在Settings/Preferences… -&gt; Plugins 内手动添加第三方插件仓库地址：<a href="https://plugins.zhile.io/">https://plugins.zhile.io</a></p></blockquote></li><li><p><a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets">Rainbow Brackets</a></p></li><li><p><a href="https://blog.csdn.net/noaman_wgs/article/details/103429171">Git Commit Template</a></p><h3 id="PSR规范"><a href="#PSR规范" class="headerlink" title="PSR规范"></a>PSR规范</h3></li><li><p><a href="https://learnku.com/docs/psr">https://learnku.com/docs/psr</a></p></li><li><p>PSR-2代码风格规范   （？？好像有冲突）</p></li><li><p>参数类型声明，返回值类型声明</p></li></ul><h3 id="PHP编码规范"><a href="#PHP编码规范" class="headerlink" title="PHP编码规范"></a>PHP编码规范</h3><ul><li>跟金钱相关的计算全部使用 <a href="https://www.php.net/manual/zh/ref.bc.php"><strong>BC函数</strong></a>，避免浮点数计算产生的精度问题<h3 id=""><a href="#" class="headerlink" title=""></a></h3></li></ul>]]></content>
    
    
    <categories>
      
      <category>编程规范</category>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>编程规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL更新Json不生效</title>
    <link href="/2021/04/15/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%20Json/"/>
    <url>/2021/04/15/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%20Json/</url>
    
    <content type="html"><![CDATA[<blockquote><p>MySQL5.7之后支持了json操作，我们可以很方便的使用相关的函数，通过原生 <code>sql</code>直接操作数据库，现在有一个需求：在<code>tableA</code>中字段<code>info</code>的类型为<code>json</code>，但是历史数据里面<code>info</code>有一部分的值是 <code>null</code>，有一部分的值是其他的 <code>&#123;&quot;key1&quot;: &quot;value1&quot;&#125;</code>，选在需要给全部的<code>info</code>字段，如果里面有<code>key3</code>,那么值修改改为<code>value3</code>，如果里面没有<code>key3</code>，那么直接追加上 <code>&quot;key3&quot;: &quot;value3&quot;</code>，</p></blockquote><p>通常我们认为直接通过下面的sql语句就可以解决</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">update tableA <span class="hljs-keyword">set</span> info <span class="hljs-operator">=</span> json_set(info, <span class="hljs-string">&#x27;$.key3&#x27;</span>, &quot;value3&quot;) <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></div></td></tr></table></figure><p>但是在实际操作过程中，发现如果历史数据里面如果 <code>info</code>字段的值是 <code>null</code>的话，<code>json_set</code>是没有生效的，<code>info</code>字段有值的话，<code>json_set</code>才会生效，那么就需要下面的操作才能完成上面的需求</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">update tableA <span class="hljs-keyword">set</span> info <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#123;&quot;value3&quot;: &quot;value3&quot;&#125;&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> info <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> ;<br>update tableA <span class="hljs-keyword">set</span> info <span class="hljs-operator">=</span> json_set(info, <span class="hljs-string">&#x27;$.key3&#x27;</span>, &quot;value3&quot;) <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> info <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br></code></pre></div></td></tr></table></figure><p>另外附上一篇文章：<a href="https://blog.csdn.net/xc_zhou/article/details/83031343">https://blog.csdn.net/xc_zhou/article/details/83031343</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
      <category>Json</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
      <tag>Json</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gorm</title>
    <link href="/2021/04/14/Golang/gorm/gorm%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    <url>/2021/04/14/Golang/gorm/gorm%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="配套视频"><a href="#配套视频" class="headerlink" title="配套视频"></a>配套视频</h3><p><a href="https://www.bilibili.com/video/BV1ST4y1T7NR">Go开源说第二期GORM</a></p><p><a href="https://www.bilibili.com/video/BV1U7411V78R">GORM简明教程-李文周</a></p><h3 id="配套文档"><a href="#配套文档" class="headerlink" title="配套文档"></a>配套文档</h3><p><a href="https://www.liwenzhou.com/posts/Go/gorm_crud/">GORM CRUD指南</a></p><p><a href="https://gorm.io/zh_CN/">GORM官方文档</a></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>gorm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>gorm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go-zero相关资料整理</title>
    <link href="/2021/04/14/Golang/go-zero/go-zero/"/>
    <url>/2021/04/14/Golang/go-zero/go-zero/</url>
    
    <content type="html"><![CDATA[<h3 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h3><ul><li><p><a href="https://www.bilibili.com/video/BV1rD4y127P">101 晓黑板 go-zero 微服务框架的架构设计</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1Jy4y127Xu">Go 开源说第四期 - Go-Zero</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>go-zero</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>go-zero</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel Seeder</title>
    <link href="/2021/04/13/PHP/Laravel/Laravel%20Seeder/"/>
    <url>/2021/04/13/PHP/Laravel/Laravel%20Seeder/</url>
    
    <content type="html"><![CDATA[<p>1、创建Seeder<br>运行 <code>Artisan</code> 命令 <code>make:seeder</code> 生成 Seeder，框架生成的 seeders 都放在 <code>database/seeds</code> 目录下：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">php artisan make:seeder UserSeeder<br></code></pre></div></td></tr></table></figure><p>调用其它 Seeders#<br>在 <code>DatabaseSeeder</code> 类中，你可以使用 <code>call</code> 方法来运行其它的 seed 类。使用 <code>call</code> 方法可以将数据填充拆分成多个文件，这样就不会使单个 seeder 变得非常大。只需简单传递要运行的 seeder 类名称即可：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 执行数据库填充</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">$this</span>-&gt;call([<br>        UserSeeder::class,<br>        PostSeeder::class,<br>        CommentSeeder::class,<br>    ]);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、运行Seeder</p><p>你可以使用 <code>Artisan</code> 命令 <code>db:seed</code> 来填充数据库了。默认情况下，<code>db:seed</code> 命令将运行 <code>DatabaseSeeder</code> 类，这个类可以用来调用其它 Seed 类。不过，你也可以使用 <code>--class</code> 选项来指定一个特定的 seeder 类：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><br>composer dump-autoload<br><br>php artisan db:seed<br><br>php artisan db:seed --<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">UserSeeder</span></span><br><span class="hljs-class"></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac安装Homebrew和其他PHP环境</title>
    <link href="/2021/04/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/Mac/Homebrew/"/>
    <url>/2021/04/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/Mac/Homebrew/</url>
    
    <content type="html"><![CDATA[<p> <del>传送门： <a href="https://getgrav.org/blog/macos-bigsur-apache-multiple-php-versions">https://getgrav.org/blog/macos-bigsur-apache-multiple-php-versions</a></del></p><p> 国内镜像安装方法 ：<a href="https://brew.idayer.com/">https://brew.idayer.com/</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机相关</category>
      
      <category>Mac</category>
      
      <category>Homebrew</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机相关</tag>
      
      <tag>Mac</tag>
      
      <tag>Homebrew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>json_np</title>
    <link href="/2021/04/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/Linux/json_np/"/>
    <url>/2021/04/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/Linux/json_np/</url>
    
    <content type="html"><![CDATA[<blockquote><p>我们平常在terminal通过curl来调接口检查接口的正确性，默认返回的json内容如果少的话，还可以肉眼直接硬看，但是如果返回的数据如果特别多的话，并且结构层级又比较多，再用肉眼看就不太方便了，一般会把结果复制出来，粘贴到在线的json解析平台看一下内容，其实在命令行也可以直接通过json的格式预览返回内容</p></blockquote><p>上代码</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &#x27;&#123;&quot;uid&quot;:100120,&quot;token&quot;:&quot;1fa9fb8004b04f66b7da57393641eddc&quot;&#125;&#x27; | json_pp<br><br><br>&#123;<br>   &quot;token&quot; : &quot;1fa9fb8004b04f66b7da57393641eddc&quot;,<br>   &quot;uid&quot; : 100120<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>参考文章：<a href="https://www.cnblogs.com/johnnyzen/p/13534405.html">https://www.cnblogs.com/johnnyzen/p/13534405.html</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机相关</category>
      
      <category>Linux</category>
      
      <category>json_np</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机相关</tag>
      
      <tag>Linux</tag>
      
      <tag>json_np</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP服务间调用</title>
    <link href="/2021/04/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1/PHP%E6%9C%8D%E5%8A%A1%E9%97%B4%E8%B0%83%E7%94%A8/"/>
    <url>/2021/04/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1/PHP%E6%9C%8D%E5%8A%A1%E9%97%B4%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>后端业务是使用微服务的，微服务的底层是使用Golang编写的。业务逻辑使用的是PHP编写的，某次开发的时候，PHP某个服务A提供了一个控制器叫做<code>UnitController</code>，composer打包之后提供给其他业务B，C，D使用，但是B服务调用A服务<code>UnitController</code>中的某个方法的时候，报错<code>UnitController</code>不存在。后面排查composer包里面<code>UnitController</code>的确是存在的。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>每种编程语言都有自己的一套保留字，在PHP层面<code>unit</code>就是普通字符串，但是在Golang里面<code>unit</code>是保留字，恰好我们<code>UnitController</code>打包后面的名字就叫做<code>Unit</code>，和Golang的保留字冲突，导致了PHP调用服务时出现了 <code>class not found</code>的情况了</p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang操作etcd</title>
    <link href="/2021/04/10/Golang/etcd/golang%E6%93%8D%E4%BD%9Cetcd/"/>
    <url>/2021/04/10/Golang/etcd/golang%E6%93%8D%E4%BD%9Cetcd/</url>
    
    <content type="html"><![CDATA[<blockquote><p>golang 操作etcd,实现简单的 put，get，delete， watch</p></blockquote><blockquote><p>仓库链接：<a href="https://gitee.com/mohuani/golang-demo/tree/master/etcdDemo">https://gitee.com/mohuani/golang-demo/tree/master/etcdDemo</a></p></blockquote><figure class="highlight golang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go.etcd.io/etcd/client/v3&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">var</span> etcdTestKey = <span class="hljs-string">&quot;mohuani-key-1&quot;</span><br><span class="hljs-keyword">var</span> etcdTestValue = <span class="hljs-string">&quot;mohuani-value-1&quot;</span><br><br>cli, err := clientv3.New(clientv3.Config&#123;<br>Endpoints:   []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;127.0.0.1:2379&quot;</span>&#125;,<br>DialTimeout: time.Second,<br>&#125;)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;connect to etcd failed, err: &quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> cli.Close()<br><br><span class="hljs-comment">// put key-value to etcd</span><br>ctx, cancel := context.WithTimeout(context.Background(), time.Second)<br>_, err = cli.Put(ctx, etcdTestKey, etcdTestValue)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;put to etcd failed, err: &quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>cancel()<br><br><span class="hljs-comment">// get value by key from etcd</span><br>ctx, cancel = context.WithTimeout(context.Background(), time.Second)<br>getEtcdResult, err := cli.Get(ctx, etcdTestKey)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;get from etcd failed, err: &quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">for</span> _, resultValue := <span class="hljs-keyword">range</span> getEtcdResult.Kvs &#123;<br>fmt.Printf(<span class="hljs-string">&quot;key:%s value:%s\n&quot;</span>, resultValue.Key, resultValue.Value)<br>&#125;<br>cancel()<br><br>delResult, err := cli.Delete(context.Background(), etcdTestKey)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;delete from etcd failed, err: &quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(delResult)<br>fmt.Println(<span class="hljs-string">&quot;-----&quot;</span>)<br><br><span class="hljs-comment">// watch: 监控某个key的操作变化</span><br>watchEtcdTestResults := cli.Watch(context.Background(), etcdTestKey)<br><span class="hljs-keyword">for</span> watchEtcdTestResult := <span class="hljs-keyword">range</span> watchEtcdTestResults &#123;<br><span class="hljs-keyword">for</span> _, evt := <span class="hljs-keyword">range</span> watchEtcdTestResult.Events &#123;<br>fmt.Printf(<span class="hljs-string">&quot;type:%s key: %s value: %s\n&quot;</span>, evt.Type.String(), evt.Kv.Key, evt.Kv.Value)<br>&#125;<br>&#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>etcd</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>etcd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单元测试</title>
    <link href="/2021/04/09/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <url>/2021/04/09/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><ol><li>单元测试必须遵守 <a href="https://www.jianshu.com/p/4e3d0875efb2">AIR</a> 原则。单元测试在运行时，感觉像空气（AIR）一样并不存在，但在测试质量的保<br>障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。<ul><li>A：Automatic（自动化）</li><li>I：Independent（独立性）</li><li>R：Repeatable（可重复）</li></ul></li><li>单元测试应该是全自动执行的，并且非交互式的。测试框架通常是定期执行的，执行过程必须完全自动化<br>才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用 echo / print / dump<br>等来进行人肉验证，必须使用 assert 来验证。</li><li>单元测试严禁出现 dd / exit / die 等异常流程</li><li>单元测试是可以重复执行的，不能受到外界环境（网络、服务、中间件等）的影响。</li><li>对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。</li><li>核心业务、核心应用、核心模块的增量代码确保单元测试通过。</li><li>单元测试的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都要达到 100%</li><li>编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。<ul><li>B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。</li><li>C：Correct，正确的输入，并得到预期的结果。</li><li>D：Design，与设计文档相结合，来编写单元测试。</li><li>E：Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期的结果。</li></ul></li><li>对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把<br>数据插入进去，请使用程序插入或者导入数据的方式来准备数据。</li><li>在单元测试执行完后, 应该对数据库没有任何修改, 可以使用事务回滚或标记手动删除的形式去做</li><li>对于不可测的代码建议做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。</li><li>单元测试作为一种质量保障手段，不建议项目发布后补充单元测试用例，建议在项目提测前完成单元测试。</li></ol>]]></content>
    
    
    <categories>
      
      <category>编程规范</category>
      
      <category>单元测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程规范</tag>
      
      <tag>单元测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>grep</title>
    <link href="/2021/04/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/Linux/grep/"/>
    <url>/2021/04/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/Linux/grep/</url>
    
    <content type="html"><![CDATA[<blockquote><p>我们平常在linux服务器查询日志文件的时候，经常会使用 <code>cat xxx.log | grep &#39;aaa&#39;</code> 来找寻自己要搜索的东西，但是也会出现这样的场景，我们要搜的东西，不知道落到了哪个目录或者文件下面，所以就需要使用全量模糊搜索</p></blockquote><p><img src="../../../images/2021/image-20210408204947514.png" alt="image-20210408204947514"></p><p><strong>grep 命令文档</strong> ：<a href="https://www.runoob.com/linux/linux-comm-grep.html">https://www.runoob.com/linux/linux-comm-grep.html</a></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><ul><li><p>以递归的方式查找符合条件的文件。例如，查找指定目录/etc/acpi 及其子目录（如果存在子目录的话）下所有文件中包含字符串”update”的文件，并打印出该字符串所在行的内容，使用的命令为：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grep -rn update /etc/acpi <br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机相关</category>
      
      <category>Linux</category>
      
      <category>grep</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机相关</tag>
      
      <tag>Linux</tag>
      
      <tag>grep</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式系统的流言蜚语</title>
    <link href="/2021/03/24/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%B5%81%E8%A8%80%E8%9C%9A%E8%AF%AD/"/>
    <url>/2021/03/24/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%B5%81%E8%A8%80%E8%9C%9A%E8%AF%AD/</url>
    
    <content type="html"><![CDATA[<p>分布式系统的流言蜚语：<a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665515873&amp;idx=1&amp;sn=bf79a5a52c1ea3d2f7a1bb644866d1d6&amp;chksm=80d67322b7a1fa3429c36a418d3c3804688a9f01bea8a27b8ed46528ce6a40eb923d0ef5c45c&amp;scene=0&amp;xtrack=1&amp;key=bf4cf7f356eb2752dfab3431b61181e235018df6317ce9084d1e48e46a5e3a454b221538f9d88192d04d0a34283d416f08274ccf3bbcff5acf783e271bca10ab84ad7a7e6b5648d6f5ead23ea625dafc&amp;ascene=14&amp;uin=MTkwNjk4NjAxMA==&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=JogDaVDjKXx9W3zQZ2sl6TAUdMDS7rKA0Zb9hMwwVMC4ALxeAySdvq8JADMCeINW">https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665515873&amp;idx=1&amp;sn=bf79a5a52c1ea3d2f7a1bb644866d1d6&amp;chksm=80d67322b7a1fa3429c36a418d3c3804688a9f01bea8a27b8ed46528ce6a40eb923d0ef5c45c&amp;scene=0&amp;xtrack=1&amp;key=bf4cf7f356eb2752dfab3431b61181e235018df6317ce9084d1e48e46a5e3a454b221538f9d88192d04d0a34283d416f08274ccf3bbcff5acf783e271bca10ab84ad7a7e6b5648d6f5ead23ea625dafc&amp;ascene=14&amp;uin=MTkwNjk4NjAxMA%3D%3D&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=JogDaVDjKXx9W3zQZ2sl6TAUdMDS7rKA0Zb9hMwwVMC4ALxeAySdvq8JADMCeINW</a></p>]]></content>
    
    
    <categories>
      
      <category>分布式系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微服务RPC问题</title>
    <link href="/2020/12/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1RPC%E9%97%AE%E9%A2%98/"/>
    <url>/2020/12/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1RPC%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>下面的问题，想到解决方案后再补充<br>1、多版本并行开发，上线时版本问题？</p><p>2、方法版本前后兼容问题，方法是否允许删除？</p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微服务理念</title>
    <link href="/2020/12/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%90%86%E5%BF%B5/"/>
    <url>/2020/12/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%90%86%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h4 id="知识参考："><a href="#知识参考：" class="headerlink" title="知识参考："></a>知识参考：</h4><p>简述 Microservices（微服务）：<a href="https://waylau.com/ahout-microservices/">https://waylau.com/ahout-microservices/</a></p><h4 id="单块架构"><a href="#单块架构" class="headerlink" title="单块架构"></a>单块架构</h4><p><img src="https://img-blog.csdnimg.cn/20190413125855470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190413130006726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h5><p><img src="https://img-blog.csdnimg.cn/20190413131311366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190413131559987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190413132112372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190413132542852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190413132602145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190413132635482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190413132703567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190413132729978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务雪崩、降级与熔断</title>
    <link href="/2020/12/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E9%9B%AA%E5%B4%A9%E3%80%81%E9%99%8D%E7%BA%A7%E4%B8%8E%E7%86%94%E6%96%AD/"/>
    <url>/2020/12/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E9%9B%AA%E5%B4%A9%E3%80%81%E9%99%8D%E7%BA%A7%E4%B8%8E%E7%86%94%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<p>服务雪崩、降级与熔断：<a href="https://mp.weixin.qq.com/s?__biz=MzAxNjk4ODE4OQ==&amp;mid=2247485781&amp;idx=1&amp;sn=8e23e1ca1803b8134097152dd9cc4af7&amp;chksm=9bed2827ac9aa13128981075470b013f9f41e593b2a11c13bdd6521ede7e72b08abe2a2a2ac8&amp;scene=0&amp;xtrack=1&amp;key=864f666bf0545584e1124e543625c424cc712ca1e6117345227ce43c008e49120baa6e6e7d47a9bd47b528d7996c3d4f04dc72dbeb92f93e50e441d54c0428c388016f9e2e69d8345811f0a16177eccc&amp;ascene=14&amp;uin=MTkwNjk4NjAxMA==&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=JogDaVDjKXx9W3zQZ2sl6TAUdMDS7rKA0Zb9hMwwVMC4ALxeAySdvq8JADMCeINW">https://mp.weixin.qq.com/s?__biz=MzAxNjk4ODE4OQ==&amp;mid=2247485781&amp;idx=1&amp;sn=8e23e1ca1803b8134097152dd9cc4af7&amp;chksm=9bed2827ac9aa13128981075470b013f9f41e593b2a11c13bdd6521ede7e72b08abe2a2a2ac8&amp;scene=0&amp;xtrack=1&amp;key=864f666bf0545584e1124e543625c424cc712ca1e6117345227ce43c008e49120baa6e6e7d47a9bd47b528d7996c3d4f04dc72dbeb92f93e50e441d54c0428c388016f9e2e69d8345811f0a16177eccc&amp;ascene=14&amp;uin=MTkwNjk4NjAxMA%3D%3D&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=JogDaVDjKXx9W3zQZ2sl6TAUdMDS7rKA0Zb9hMwwVMC4ALxeAySdvq8JADMCeINW</a></p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Restful API</title>
    <link href="/2020/12/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Restful%20API/"/>
    <url>/2020/12/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Restful%20API/</url>
    
    <content type="html"><![CDATA[<p>课程地址：<a href="https://coding.imooc.com/class/122.html">https://coding.imooc.com/class/122.html</a><br><img src="https://img-blog.csdnimg.cn/2019060415535131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
      <category>Restful</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
      <tag>Restful</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云原生概念-视频流媒体架构</title>
    <link href="/2020/12/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%A6%82%E5%BF%B5-%E8%A7%86%E9%A2%91%E6%B5%81%E5%AA%92%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
    <url>/2020/12/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%A6%82%E5%BF%B5-%E8%A7%86%E9%A2%91%E6%B5%81%E5%AA%92%E4%BD%93%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p><img src="../../images/2021/20200220215316337.png"></p><p><img src="../../images/2021/2020022021533739.png"></p><p><img src="../../images/2021/20200220215356131.png"></p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel collecte break continue</title>
    <link href="/2020/12/04/PHP/Laravel/Laravel%20collecte%20break%20continue/"/>
    <url>/2020/12/04/PHP/Laravel/Laravel%20collecte%20break%20continue/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="typora-root-url-images"><a href="#typora-root-url-images" class="headerlink" title="typora-root-url: ../images"></a>typora-root-url: ../images</h2><p><a href="https://editor.csdn.net/md/?articleId=114985626">Laravel collecte break continue</a></p><blockquote><p>背景： Laravel框架中循环我们都推荐使用 collecte 进行循环，但是如果我们想要在循环中<br>break 或者 continue，直接break或者continue，语法层面会直接报错，那么怎么才能实现上述所要的效果呢。其实在循环中 <code>return</code>的效果就类似与<code>break</code>，而 <code>return false</code> 的效果就类似于 <code>continue</code></p></blockquote><p>测试demo如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MohuaniSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Run the database seeds.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;collectContinue();<br>        <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-string">&quot;--------------&quot;</span>);<br>        <span class="hljs-keyword">$this</span>-&gt;collectBreak();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">collectContinue</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$arrList</span> = [<br>            <span class="hljs-string">&quot;a&quot;</span> =&gt; <span class="hljs-string">&quot;A&quot;</span>,<br>            <span class="hljs-string">&quot;b&quot;</span> =&gt; <span class="hljs-string">&quot;B&quot;</span>,<br>            <span class="hljs-string">&quot;c&quot;</span> =&gt; <span class="hljs-string">&quot;C&quot;</span>,<br>        ];<br><br>        <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-number">111</span>);<br>        collect(<span class="hljs-variable">$arrList</span>)-&gt;each(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$arr</span></span>) </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-number">222</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$arr</span> == <span class="hljs-string">&quot;b&quot;</span>) &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-number">333</span>);<br>                <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 跳出本次循环，类似continue</span><br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-number">444</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">collectBreak</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$arrList</span> = [<br>            <span class="hljs-string">&quot;a&quot;</span> =&gt; <span class="hljs-string">&quot;A&quot;</span>,<br>            <span class="hljs-string">&quot;b&quot;</span> =&gt; <span class="hljs-string">&quot;B&quot;</span>,<br>            <span class="hljs-string">&quot;c&quot;</span> =&gt; <span class="hljs-string">&quot;C&quot;</span>,<br>        ];<br><br>        <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-number">111</span>);<br>        collect(<span class="hljs-variable">$arrList</span>)-&gt;each(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$arr</span></span>) </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-number">222</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$arr</span> == <span class="hljs-string">&quot;b&quot;</span>) &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-number">333</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 跳出所有循环，类似break</span><br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-keyword">$this</span>-&gt;command-&gt;info(<span class="hljs-number">444</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><p>运行seeder</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">php artisan  db:seed  --class=MohuaniSeeder<br></code></pre></div></td></tr></table></figure><p>结果：</p><p><img src="../images/20210318194853117.png" alt="20210318194853117"></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Laravel</category>
      
      <category>Collection</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Laravel</tag>
      
      <tag>Collection</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MobaXterm自动断开连接设置</title>
    <link href="/2020/08/14/%E5%B7%A5%E5%85%B7/MobaXterm%E8%87%AA%E5%8A%A8%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E8%AE%BE%E7%BD%AE/"/>
    <url>/2020/08/14/%E5%B7%A5%E5%85%B7/MobaXterm%E8%87%AA%E5%8A%A8%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h4><p>使用MobaXterm工具通过SSH连接Linux服务器，如果一段时间没有操作，MobaXterm会把连接自动断开，这个设定很是不方便。通过更改下面的设置可以使SSH保持长连接，不会自动断开。</p><ul><li>点击设置<br><img src="https://img-blog.csdnimg.cn/20190415215615318.png" alt="在这里插入图片描述"></li><li>把 SSH keepalive 勾选上<br><img src="https://img-blog.csdnimg.cn/20190415215709198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
    
    
    <categories>
      
      <category>MobaXterm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MobaXterm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AppImage ubuntu</title>
    <link href="/2020/08/13/%E5%B7%A5%E5%85%B7/AppImage%20ubuntu/"/>
    <url>/2020/08/13/%E5%B7%A5%E5%85%B7/AppImage%20ubuntu/</url>
    
    <content type="html"><![CDATA[<p>在Ubuntu上下载的软件有时候是 AppImage 格式的，怎么以快捷方式的形式启动软件，可以使用下面的这个应用管理这类软件</p><p>AppImageLauncher: <a href="https://github.com/TheAssassin/AppImageLauncher">https://github.com/TheAssassin/AppImageLauncher</a></p><p>下载一个deb的安装包，然后就可以用 AppImageLauncher 管理其他的AppImage应用了</p>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git Commit Template</title>
    <link href="/2020/06/15/Git/Git%20Commit%20Template/"/>
    <url>/2020/06/15/Git/Git%20Commit%20Template/</url>
    
    <content type="html"><![CDATA[<p>JetBrain 公司软件可以使用的一会插件，团队可以标准化git提交</p><p><a href="https://plugins.jetbrains.com/plugin/9861-git-commit-template">https://plugins.jetbrains.com/plugin/9861-git-commit-template</a></p><p>参考文档：<a href="https://blog.csdn.net/weixin_43550660/article/details/105459038">https://blog.csdn.net/weixin_43550660/article/details/105459038</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常见使用方法</title>
    <link href="/2020/06/15/Git/Git%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2020/06/15/Git/Git%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>项目以往 gitee提交代码为例子</p><ul><li>1、创建公钥<figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">ssh<span class="hljs-literal">-keygen</span> <span class="hljs-literal">-t</span> rsa <span class="hljs-literal">-C</span> “git@gitee.com”<br></code></pre></div></td></tr></table></figure>执行完毕该命令后，会在 “/c/Users/xxxx/.ssh/” 目录下面生成3个文件</li></ul><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">id_rsa<br>id_rsa.pub<br>known_hosts<br></code></pre></div></td></tr></table></figure><ul><li>2、进入将创建好的公钥内容（id_rsa.pub）复制到如下的地址中，这样你就可以有权限对自己的远程仓库进行 <strong>pull</strong> 等操作。</li></ul><p><img src="../images/20200221135543699.png" alt="在这里插入图片描述"></p><ul><li><p>3、在gitee上创建自己的仓库，填写仓库名，是否开源等信息<br><img src="../images/20200221141217320.png" alt="在这里插入图片描述"></p></li><li><p>4、Git 全局设置:</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">git config -<span class="hljs-literal">-global</span> user.name <span class="hljs-string">&quot;积雪草&quot;</span><br>git config -<span class="hljs-literal">-global</span> user.email <span class="hljs-string">&quot;wfk2975019671@sina.com&quot;</span><br></code></pre></div></td></tr></table></figure><ul><li>5、本地没有仓库的话，创建 git 仓库:</li></ul><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">mkdir test<br><span class="hljs-built_in">cd</span> test<br>git init<br>touch README.md<br>git add README.md<br>git commit <span class="hljs-literal">-m</span> <span class="hljs-string">&quot;first commit&quot;</span><br>git remote add origin git@gitee.com:mohuani/test.git<br>git push <span class="hljs-literal">-u</span> origin master<br></code></pre></div></td></tr></table></figure><ul><li>6、本地已有仓库</li></ul><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> existing_git_repo<br>git remote add origin git@gitee.com:mohuani/test.git<br>git push <span class="hljs-literal">-u</span> origin master<br></code></pre></div></td></tr></table></figure><ul><li>7、分支管理<br>参考 <a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰老师的文章–Git教程</a> </li></ul>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git submoudle</title>
    <link href="/2020/06/15/Git/git%20submoudle/"/>
    <url>/2020/06/15/Git/git%20submoudle/</url>
    
    <content type="html"><![CDATA[<p>git submoudle</p><p>git submoudle的使用方法</p><p>项目根目录执行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git submodule init<br>git submodule update<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gitignore文件不生效</title>
    <link href="/2020/06/15/Git/gitignore%E6%96%87%E4%BB%B6%E4%B8%8D%E7%94%9F%E6%95%88/"/>
    <url>/2020/06/15/Git/gitignore%E6%96%87%E4%BB%B6%E4%B8%8D%E7%94%9F%E6%95%88/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>添加了gitignore文件，设置了要过滤的文件，但是提交后发现要过滤的文件还是被提交上去了。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>在git忽略目录中，新建的文件在git中会有缓存，如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略路径也是不起作用的，</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>这时候我们就应该先把本地缓存删除，然后再进行git的提交，这样就不会出现忽略的文件了。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git rm -r --cached .<br>git add .<br>git commit -m <span class="hljs-string">&quot;remove .idea files&quot;</span><br>git push origin master<br></code></pre></div></td></tr></table></figure><p><img src="../images/20200405013811329.png" alt="20200405013811329"></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git push出错</title>
    <link href="/2020/06/15/Git/Git%20push%E5%87%BA%E9%94%99/"/>
    <url>/2020/06/15/Git/Git%20push%E5%87%BA%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>本地一个项目，写的差不多的时候，想起来使用git进行版本管理，于是在远程git仓库创建了一个仓库，本地与远程进行关联后，git push时出现错误 error: failed to push some refs to</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>远程仓库创建的时候，生成了一部分文件（readme，gitignore），本地第一次往远程提交的时候，发现两边的内容不相同，push失败。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>远程仓库创建好后，本地项目还未使用 git inti 初始化，如果已经初始化，请直接删除 .git 文件，然后执行下面的步骤</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">git init<br>git remote add origin git@gitee.com:mohuani/bubble.git<br>git pull -<span class="hljs-literal">-rebase</span> origin master<br>git add .<br>git commit <span class="hljs-literal">-m</span> <span class="hljs-string">&quot;add xxx&quot;</span><br>git push origin master<br></code></pre></div></td></tr></table></figure><p>一般而言，正常的推送流程应为：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">1、在github上创建项目<br><br>2、使用git <span class="hljs-built_in">clone</span> https://github.com/name/project.git克隆到本地<br><br>3、编辑项目<br><br>4、git add . （将变更提交至缓存区）<br><br>5、git commit -m “提交说明（注释）”<br><br>6、git push origin master 将本地变更推送至远程仓库master分支<br></code></pre></div></td></tr></table></figure><hr><p>参考文章： </p><blockquote><p><a href="https://blog.csdn.net/MBuger/article/details/70197532">https://blog.csdn.net/MBuger/article/details/70197532</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache ab测试</title>
    <link href="/2020/04/08/%E6%B5%8B%E8%AF%95/Apache%20ab%E6%B5%8B%E8%AF%95/"/>
    <url>/2020/04/08/%E6%B5%8B%E8%AF%95/Apache%20ab%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<ul><li>AB测试中常见的命令<figure class="highlight vhdl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vhdl">ab -help<br>Usage: ab [options] [http[s]://]hostname[:<span class="hljs-keyword">port</span>]/path<br>Options are:<br>    -n requests     Number <span class="hljs-keyword">of</span> requests <span class="hljs-keyword">to</span> perform<br>    -c concurrency  Number <span class="hljs-keyword">of</span> multiple requests <span class="hljs-keyword">to</span> make<br>    -t timelimit    Seconds <span class="hljs-keyword">to</span> max. <span class="hljs-keyword">wait</span> <span class="hljs-keyword">for</span> responses<br>    -b windowsize   Size <span class="hljs-keyword">of</span> TCP send/receive <span class="hljs-keyword">buffer</span>, <span class="hljs-keyword">in</span> bytes<br>    -p postfile     <span class="hljs-keyword">File</span> containing data <span class="hljs-keyword">to</span> POST. Remember also <span class="hljs-keyword">to</span> set -T<br>    -u putfile      <span class="hljs-keyword">File</span> containing data <span class="hljs-keyword">to</span> PUT. Remember also <span class="hljs-keyword">to</span> set -T<br>    -T content-<span class="hljs-keyword">type</span> Content-<span class="hljs-keyword">type</span> header <span class="hljs-keyword">for</span> POSTing, eg.<br>                    <span class="hljs-symbol">&#x27;application</span>/x-www-form-urlencoded&#x27;<br>                    <span class="hljs-keyword">Default</span> <span class="hljs-keyword">is</span> <span class="hljs-symbol">&#x27;text</span>/plain&#x27;<br>    -v verbosity    How much troubleshooting info <span class="hljs-keyword">to</span> print<br>    -w              Print <span class="hljs-keyword">out</span> results <span class="hljs-keyword">in</span> HTML tables<br>    -i              <span class="hljs-keyword">Use</span> HEAD instead <span class="hljs-keyword">of</span> GET<br>    -x attributes   <span class="hljs-built_in">String</span> <span class="hljs-keyword">to</span> insert as table attributes<br>    -y attributes   <span class="hljs-built_in">String</span> <span class="hljs-keyword">to</span> insert as tr attributes<br>    -z attributes   <span class="hljs-built_in">String</span> <span class="hljs-keyword">to</span> insert as td <span class="hljs-keyword">or</span> th attributes<br>    -C <span class="hljs-keyword">attribute</span>    Add cookie, eg. <span class="hljs-symbol">&#x27;Apache</span>=<span class="hljs-number">1234</span>. (repeatable)<br>    -H <span class="hljs-keyword">attribute</span>    Add Arbitrary header <span class="hljs-literal">line</span>, eg. <span class="hljs-symbol">&#x27;Accept</span>-Encoding: gzip&#x27;<br>                    Inserted <span class="hljs-keyword">after</span> <span class="hljs-keyword">all</span> normal header lines. (repeatable)<br>    -A <span class="hljs-keyword">attribute</span>    Add Basic WWW Authentication, the attributes<br>                    are a colon separated username <span class="hljs-keyword">and</span> password.<br>    -P <span class="hljs-keyword">attribute</span>    Add Basic Proxy Authentication, the attributes<br>                    are a colon separated username <span class="hljs-keyword">and</span> password.<br>    -X proxy:<span class="hljs-keyword">port</span>   Proxyserver <span class="hljs-keyword">and</span> <span class="hljs-keyword">port</span> number <span class="hljs-keyword">to</span> <span class="hljs-keyword">use</span><br>    -V              Print version number <span class="hljs-keyword">and</span> <span class="hljs-keyword">exit</span><br>    -k              <span class="hljs-keyword">Use</span> HTTP KeepAlive feature<br>    -d              Do <span class="hljs-keyword">not</span> show percentiles served table.<br>    -S              Do <span class="hljs-keyword">not</span> show confidence estimators <span class="hljs-keyword">and</span> warnings.<br>    -g filename     Output collected data <span class="hljs-keyword">to</span> gnuplot format <span class="hljs-keyword">file</span>.<br>    -e filename     Output CSV <span class="hljs-keyword">file</span> <span class="hljs-keyword">with</span> percentages served<br>    -r              Don<span class="hljs-symbol">&#x27;t</span> <span class="hljs-keyword">exit</span> <span class="hljs-keyword">on</span> socket receive errors.<br>    -h              Display usage information (this message)<br>    -Z ciphersuite  Specify SSL/TLS cipher suite (See openssl ciphers)<br>    -f protocol     Specify SSL/TLS protocol (SSL2, SSL3, TLS1, <span class="hljs-keyword">or</span> <span class="hljs-keyword">ALL</span>)<br></code></pre></div></td></tr></table></figure></li><li>吞吐率（Requests per second）<br>服务器并发处理能力的量化描述，单位是reqs/s，指的是在某个并发用户数下单位时间内处理的请求数。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。<br>note：吞吐率是基于并发用户数的。这句话代表了两个含义：<br>a、吞吐率和并发用户数相关<br>b、不同的并发用户数下，吞吐率一般是不同的<br>计算公式：总请求数/处理完成这些请求数所花费的时间，即</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">Request <span class="hljs-keyword">per</span> <span class="hljs-keyword">second</span><span class="hljs-operator">=</span>Complete requests<span class="hljs-operator">/</span><span class="hljs-type">Time</span> taken <span class="hljs-keyword">for</span> tests<br></code></pre></div></td></tr></table></figure><ul><li><p>并发连接数（The number of concurrent connections）<br>并发连接数指的是某个时刻服务器所接受的请求数目，简单的讲，就是一个会话。</p></li><li><p>并发用户数（Concurrency Level）<br>要注意区分这个概念和并发连接数之间的区别，一个用户可能同时会产生多个会话，也即连接数。在HTTP/1.1下，IE7支持两个并发连接，IE8支持6个并发连接，FireFox3支持4个并发连接，所以相应的，我们的并发用户数就得除以这个基数。</p></li></ul><ul><li>用户平均请求等待时间（Time per request）<br>计算公式：处理完成所有请求数所花费的时间/（总请求数/并发用户数），即：<br>Time per request=Time taken for tests/（Complete requests/Concurrency Level）</li></ul><ul><li>服务器平均请求等待时间（Time per request:across all concurrent requests）</li></ul><p> <strong>下面是对慕课网首页 <a href="https://www.imooc.com/">https://www.imooc.com/</a> 做的一个简单的测试</strong></p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">ab</span> -<span class="hljs-keyword">c</span> <span class="hljs-number">10</span> -n <span class="hljs-number">100</span> http<span class="hljs-variable">s:</span>//www.imooc.<span class="hljs-keyword">com</span>/<br>  -<span class="hljs-keyword">c</span> concurrency  Number of multiple requests <span class="hljs-keyword">to</span> <span class="hljs-keyword">make</span>   表示并发用户数为<span class="hljs-number">10</span><br>  -t timelimit    Seconds <span class="hljs-keyword">to</span> <span class="hljs-built_in">max</span>. wait <span class="hljs-keyword">for</span> responses    表示请求总数为<span class="hljs-number">100</span><br></code></pre></div></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">ab</span> <span class="hljs-string">-c</span> <span class="hljs-number">10</span> <span class="hljs-string">-n</span> <span class="hljs-number">100</span> <span class="hljs-string">https://www.imooc.com/</span><br><span class="hljs-string">This</span> <span class="hljs-string">is</span> <span class="hljs-string">ApacheBench,</span> <span class="hljs-string">Version</span> <span class="hljs-number">2.3</span> <span class="hljs-string">&lt;$Revision:</span> <span class="hljs-number">655654</span> <span class="hljs-string">$&gt;</span><br><span class="hljs-string">Copyright</span> <span class="hljs-number">1996 </span><span class="hljs-string">Adam</span> <span class="hljs-string">Twiss,</span> <span class="hljs-string">Zeus</span> <span class="hljs-string">Technology</span> <span class="hljs-string">Ltd,</span> <span class="hljs-string">http://www.zeustech.net/</span><br><span class="hljs-string">Licensed</span> <span class="hljs-string">to</span> <span class="hljs-string">The</span> <span class="hljs-string">Apache</span> <span class="hljs-string">Software</span> <span class="hljs-string">Foundation,</span> <span class="hljs-string">http://www.apache.org/</span><br><br><span class="hljs-string">Benchmarking</span> <span class="hljs-string">www.imooc.com</span> <span class="hljs-string">(be</span> <span class="hljs-string">patient).....done</span><br><br><br><span class="hljs-attr">Server Software:</span>        <span class="hljs-string">nginx</span><br><span class="hljs-attr">Server Hostname:</span>        <span class="hljs-string">www.imooc.com</span><br><span class="hljs-attr">Server Port:</span>            <span class="hljs-number">443</span><br><span class="hljs-attr">SSL/TLS Protocol:</span>       <span class="hljs-string">TLSv1/SSLv3,ECDHE-RSA-AES128-GCM-SHA256,2048,128</span><br><br><span class="hljs-attr">Document Path:</span>          <span class="hljs-string">/</span><br><span class="hljs-attr">Document Length:</span>        <span class="hljs-number">249325</span> <span class="hljs-string">bytes</span><br><br><span class="hljs-attr">Concurrency Level:</span>      <span class="hljs-number">10</span><br><span class="hljs-attr">Time taken for tests:</span>   <span class="hljs-number">5.677</span> <span class="hljs-string">seconds</span><br><span class="hljs-attr">Complete requests:</span>      <span class="hljs-number">100</span><br><span class="hljs-attr">Failed requests:</span>        <span class="hljs-number">0</span><br><span class="hljs-attr">Write errors:</span>           <span class="hljs-number">0</span><br><span class="hljs-attr">Total transferred:</span>      <span class="hljs-number">25586992</span> <span class="hljs-string">bytes</span><br><span class="hljs-attr">HTML transferred:</span>       <span class="hljs-number">25554135</span> <span class="hljs-string">bytes</span><br><span class="hljs-attr">Requests per second:</span>    <span class="hljs-number">17.62</span> [<span class="hljs-comment">#/sec] (mean)</span><br><span class="hljs-attr">Time per request:</span>       <span class="hljs-number">567.674</span> [<span class="hljs-string">ms</span>] <span class="hljs-string">(mean)</span><br><span class="hljs-attr">Time per request:</span>       <span class="hljs-number">56.767</span> [<span class="hljs-string">ms</span>] <span class="hljs-string">(mean</span>, <span class="hljs-string">across</span> <span class="hljs-string">all</span> <span class="hljs-string">concurrent</span> <span class="hljs-string">requests)</span><br><span class="hljs-attr">Transfer rate:</span>          <span class="hljs-number">4401.70</span> [<span class="hljs-string">Kbytes/sec</span>] <span class="hljs-string">received</span><br><br><span class="hljs-string">Connection</span> <span class="hljs-string">Times</span> <span class="hljs-string">(ms)</span><br>              <span class="hljs-string">min</span>  <span class="hljs-string">mean</span>[<span class="hljs-string">+/-sd</span>] <span class="hljs-string">median</span>   <span class="hljs-string">max</span><br><span class="hljs-attr">Connect:</span>      <span class="hljs-number">106</span>  <span class="hljs-number">201</span> <span class="hljs-number">244.8</span>    <span class="hljs-number">123</span>    <span class="hljs-number">1124</span><br><span class="hljs-attr">Processing:</span>   <span class="hljs-number">213</span>  <span class="hljs-number">304</span> <span class="hljs-number">179.8</span>    <span class="hljs-number">256</span>    <span class="hljs-number">1437</span><br><span class="hljs-attr">Waiting:</span>       <span class="hljs-number">64</span>  <span class="hljs-number">110</span> <span class="hljs-number">109.8</span>     <span class="hljs-number">77</span>     <span class="hljs-number">624</span><br><span class="hljs-attr">Total:</span>        <span class="hljs-number">322</span>  <span class="hljs-number">505</span> <span class="hljs-number">298.0</span>    <span class="hljs-number">388</span>    <span class="hljs-number">1550</span><br><br><span class="hljs-string">Percentage</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">requests</span> <span class="hljs-string">served</span> <span class="hljs-string">within</span> <span class="hljs-string">a</span> <span class="hljs-string">certain</span> <span class="hljs-string">time</span> <span class="hljs-string">(ms)</span><br>  <span class="hljs-number">50</span><span class="hljs-string">%</span>    <span class="hljs-number">388</span><br>  <span class="hljs-number">66</span><span class="hljs-string">%</span>    <span class="hljs-number">430</span><br>  <span class="hljs-number">75</span><span class="hljs-string">%</span>    <span class="hljs-number">449</span><br>  <span class="hljs-number">80</span><span class="hljs-string">%</span>    <span class="hljs-number">470</span><br>  <span class="hljs-number">90</span><span class="hljs-string">%</span>    <span class="hljs-number">885</span><br>  <span class="hljs-number">95</span><span class="hljs-string">%</span>   <span class="hljs-number">1366</span><br>  <span class="hljs-number">98</span><span class="hljs-string">%</span>   <span class="hljs-number">1498</span><br>  <span class="hljs-number">99</span><span class="hljs-string">%</span>   <span class="hljs-number">1550</span><br> <span class="hljs-number">100</span><span class="hljs-string">%</span>   <span class="hljs-number">1550</span> <span class="hljs-string">(longest</span> <span class="hljs-string">request)</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySql  ERROR 1698 (28000)</title>
    <link href="/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySql%20%20ERROR%201698%20(28000)/"/>
    <url>/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySql%20%20ERROR%201698%20(28000)/</url>
    
    <content type="html"><![CDATA[<p>MySql 5.7.6 起，安装时如果 root 不设置密码，那么默认会采用auth_socket的方式登陆 MySQL 。也就是登陆 MySQL 时验证你的 Linux 的当前用户是否为 root，如果不是就不能登陆。在<code>auth_socket</code>模式下，应用程序通过数据库的用户名、密码是无法连接的，这就需要我们将数据库的登陆模式，改为<code>mysql_native_password</code>模式。</p><p>进入数据库：sudo mysql -uroot，执行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">&#x27;&#x27;</span>;<br>FLUSH PRIVILEGES;<br><span class="hljs-built_in">exit</span>;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL数据库性能分析和优化</title>
    <link href="/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%92%8C%E4%BC%98%E5%8C%96/"/>
    <url>/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%92%8C%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>课程地址：<a href="https://www.imooc.com/learn/194">https://www.imooc.com/learn/194</a></p><p>推荐文章：<a href="https://www.zam9.com/blog/mysql_opt01">https://www.zam9.com/blog/mysql_opt01</a></p><h3 id="MySQL数据库优化"><a href="#MySQL数据库优化" class="headerlink" title="MySQL数据库优化"></a>MySQL数据库优化</h3><h4 id="SQL语句优化"><a href="#SQL语句优化" class="headerlink" title="SQL语句优化"></a>SQL语句优化</h4><p><strong>慢查询</strong></p><p>如何发现有问题的SQL？</p><p>使用mysql慢查询日志对有效率问题的SQL进行监控</p><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams"><span class="hljs-comment">//查看慢查询日志是否开启</span><br>show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;slow_query_log&#x27;</span>;<br><br><span class="hljs-comment">//查看慢查询日志存储位置</span><br>show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;slow_query_log_file&#x27;</span>;<br><br><span class="hljs-comment">//开启慢查询日志</span><br><span class="hljs-keyword">set</span> global <span class="hljs-comment">slow_query_log=on</span>;<br><br><span class="hljs-comment">//指定慢查询日志存储位置</span><br><span class="hljs-keyword">set</span> global <span class="hljs-comment">show_query_log_file=</span><span class="hljs-comment">&#x27;/var/lib/mysql/homestead-slow.log&#x27;</span>;<br><br><span class="hljs-comment">//记录没有使用索引的sql</span><br><span class="hljs-keyword">set</span> global <span class="hljs-comment">log_queries_not_using_indexes=on</span>;<br><br><span class="hljs-comment">//记录查询超过1s的sql</span><br><span class="hljs-keyword">set</span> global <span class="hljs-comment">long_query_time=1</span>;<br></code></pre></div></td></tr></table></figure><p>慢查询日志所包含的内容：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">#<span class="hljs-keyword">User</span><span class="hljs-variable">@Host</span>:root[root] <span class="hljs-variable">@localhost</span>[]<span class="hljs-operator">/</span><span class="hljs-operator">/</span>执行<span class="hljs-keyword">sql</span>的主机信息<br>#Query_time:<span class="hljs-number">0.0000024</span> Lock_time:<span class="hljs-number">0.00</span> Rows_sent:<span class="hljs-number">0</span> Rows_esamined:<span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">sql</span>的执行信息<br><span class="hljs-keyword">SET</span> <span class="hljs-type">timestamp</span><span class="hljs-operator">=</span><span class="hljs-number">1402389324</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">sql</span>执行时间<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> store; <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">sql</span>的内容<br></code></pre></div></td></tr></table></figure><p><strong>MySQL慢查询日志分析工具之mysqldumpslow（mysql官方）</strong></p><p>安装完MySQL后，默认就带了mysqldumpslow，很常用的一个工具。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>查看参数列表<br>mysqldumpslow -h<br><br><span class="hljs-regexp">//</span>分析慢查询日志中前三条比较慢的sql<br>mysqldumpslow -t <span class="hljs-number">3</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/mysql/</span>homestead-slow.log | more <br><br><span class="hljs-regexp">//</span>输出样式效果<br>Count:<span class="hljs-number">1</span> Time:<span class="hljs-number">0.00</span>s Lock=<span class="hljs-number">0.00</span>s Rows=<span class="hljs-number">10.0</span><br>root[rppt]@localhost<br>select * from store<br></code></pre></div></td></tr></table></figure><p><strong>MySQL慢查询日志分析工具之pt-query-digest</strong></p><p>分析结果比mysqldumpslow更详细全面</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata"><span class="hljs-comment">//输出到文件</span><br>pt-<span class="hljs-keyword">query</span>-digest slow-<span class="hljs-keyword">log</span> &gt; slow_log.<span class="hljs-keyword">report</span><br><br><span class="hljs-comment">//输出到数据表</span><br>pt-<span class="hljs-keyword">query</span>-digest slow.<span class="hljs-keyword">log</span> -review \<br><span class="hljs-keyword">h</span>=127.0.0.1,<span class="hljs-keyword">D</span>=<span class="hljs-keyword">test</span>,p=root,P=3306,<span class="hljs-keyword">u</span>=root,t=query_review \<br>--create-reviewtable \<br>--review-history t=hostname_slow<br></code></pre></div></td></tr></table></figure><p>基本使用</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>查看参数列表<br>pt-query-digest --help<br><br><span class="hljs-regexp">//</span>分析慢查询日志中前三条比较慢的sql<br>pt-query-digest <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/mysql/</span>homestead-slow.log | more <br><br><span class="hljs-regexp">//</span>输出分为三部分<br><span class="hljs-number">1</span>.显示除了日志的时间范围，以及总的sql数量和不同的sql数量<br><span class="hljs-number">2</span>.Response Time:响应时间占比 Calls:sql执行次数<br><span class="hljs-number">3</span>.sql的具体日志<br></code></pre></div></td></tr></table></figure><p>如何通过慢查询日志发现有问题的SQL？</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span>查询次数多且每次查询占用时间长的<span class="hljs-keyword">SQL</span><br>通常为pt-query-digest分析的前几个查询<br><br><span class="hljs-number">2.</span>IO大的<span class="hljs-keyword">SQL</span>（数据库主要瓶颈出现在IO层次）<br>注意pt-query-digest分析中的<span class="hljs-keyword">Rows</span> examine项<br><br><span class="hljs-number">3.</span>未命中索引的<span class="hljs-keyword">SQL</span><br>注意pt-query-digest分析中的<span class="hljs-keyword">Rows</span> examine和<span class="hljs-keyword">Rows</span> Send的对比<br></code></pre></div></td></tr></table></figure><p>通过explain查询和分析SQL的执行计划</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> customer_id,,first_name,last_name <span class="hljs-keyword">from</span> customer;<br></code></pre></div></td></tr></table></figure><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>customer</td><td>ALL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>671</td><td></td></tr><tr><td></td><td></td><td>该数据关于哪张表。</td><td>示连接使用了何种类型。从好到差const,eq_reg,ref,range,index和ALL。</td><td>可能应用在该表的索引，空，没有可能的索引。</td><td>实际使用的索引。空，没有使用索引。</td><td>使用的索引长度。不损失精度下，越短越好。</td><td>显示索引的哪一列被使用了，常数。</td><td>mysql认为必须检查的数据的行数。</td><td>注意：Using filesort,Using tempoary</td></tr></tbody></table><p>Count()和Max()的优化</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">//查询最后支付时间<span class="hljs-comment">--优化max()函数</span><br><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> max(payment_date) <span class="hljs-keyword">from</span> payment;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> idx_paydate <span class="hljs-keyword">on</span> payment(payment_data);//给payment_date建立索引(覆盖索引)<br><br>//在一条<span class="hljs-keyword">SQL</span>中同时查出<span class="hljs-number">2006</span>年和<span class="hljs-number">2007</span>年电影的数量<span class="hljs-comment">--优化Count()函数</span><br><span class="hljs-keyword">select</span> count(release_year=<span class="hljs-string">&#x27;2006&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">null</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;2006年电影数量&#x27;</span>，count(release_year=<span class="hljs-string">&#x27;2007&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">null</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;2007年电影数量&#x27;</span> <span class="hljs-keyword">from</span> film;<br>//有关count()函数<br>https://blog.csdn.net/wendychiang1991/article/details/<span class="hljs-number">70909958</span>/<br></code></pre></div></td></tr></table></figure><p>子查询优化</p><figure class="highlight sas"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sas">通常情况下，需要把子查询优化为join查询，但在优化时要注意关联键是否有一对多的关系，要注意重复数据。(<span class="hljs-meta">distinct</span>去重)<br>//查询sandra出演的所有影片<br>explain <span class="hljs-meta">select</span> <span class="hljs-meta">title</span>,release_year,<span class="hljs-meta">LENGTH</span> <span class="hljs-meta">from</span> film<br><span class="hljs-meta">where</span> film_id <span class="hljs-meta">in</span> (<br><span class="hljs-meta">select</span> film_id <span class="hljs-meta">from</span> film_actor <span class="hljs-meta">where</span> actor_id <span class="hljs-meta">in</span> (<br><span class="hljs-meta">select</span> actor_id <span class="hljs-meta">from</span> actor <span class="hljs-meta">where</span> first_name=<span class="hljs-string">&#x27;sandra&#x27;</span>));<br></code></pre></div></td></tr></table></figure><p>group by的优化</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">//改前 临时表<br><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> actor.first_name,actor_last_name,<span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">from</span> sakila.film_actor<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> sakila.actor <span class="hljs-keyword">USING</span>(actor_id)<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> film_actor.actor_id;<br>//改后 结合子查询 索引<br><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> actor.first_name,actor.last_name,c.cnt <span class="hljs-keyword">from</span> sakila.film_actor<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> (<br><span class="hljs-keyword">select</span> actor_id,<span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">as</span> cnt <span class="hljs-keyword">from</span> sakila.film_actor <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> actor_id) <span class="hljs-keyword">as</span> c <span class="hljs-keyword">USING</span>(actor_id);<br></code></pre></div></td></tr></table></figure><p>limit优化</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">limit</span>常用于分页处理，时常会伴随<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 从句使用，因此大多时候会使用Filesorts这样会造成大量的IO问题。<br><br>//文件排序，IO大<br><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> film_id,description <span class="hljs-keyword">from</span> sakila.film <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> title <span class="hljs-keyword">limit</span> <span class="hljs-number">50</span>,<span class="hljs-number">5</span>;<br><span class="hljs-number">1.</span>优化：使用有索引的列或主键进行<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>操作（<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> film_id）<br><span class="hljs-number">2.</span>记录上次返回的主键，在下次查询的时候用主键过滤，避免了数据量大时扫描过多的记录<br><span class="hljs-keyword">select</span> film_id,description <span class="hljs-keyword">from</span> sakila.film <span class="hljs-keyword">where</span> film_if&gt;<span class="hljs-number">55</span> <span class="hljs-keyword">and</span> film_id&lt;=<span class="hljs-number">60</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> film_id <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">5</span>; <br>页数越大，IO越大<br></code></pre></div></td></tr></table></figure><h4 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h4><p>如何选择合适的列建立索引？</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span>在<span class="hljs-keyword">where</span>从句，<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>从句，<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>从句，<span class="hljs-keyword">on</span>从句中出现的列(<span class="hljs-keyword">select</span>)<br><span class="hljs-number">2.</span>索引字段越小越好(表每页数据才会更多，IO效率会更高)<br><span class="hljs-number">3.</span>离散度大的列放到联合索引的前面<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> payment <span class="hljs-keyword">where</span> staff_id=<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> customer_id=<span class="hljs-number">584</span>;<br><span class="hljs-keyword">index</span>(staff_id,customer_id)好？还是<span class="hljs-keyword">index</span>(customer_id,staff_id)好？<br>由于customer_id的离散度更大(重复率小,可选择性更大)，所以应该使用<span class="hljs-keyword">index</span>(customer_id,staff_id)<br></code></pre></div></td></tr></table></figure><p>索引优化SQL的方法</p><p>索引的维护及优化–重复及冗余索引</p><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery">冗余索引是指多个索引的前缀列相同，或是在联合索引中包含了主键的索引。如下<span class="hljs-built_in">：key</span><span class="hljs-built_in">(name</span><span class="hljs-built_in">,id</span>)就是一个冗余索引<br>create table test(<br>id int<span class="hljs-built_in"> not</span> null primary<span class="hljs-built_in"> key</span>,<br>name varchar(<span class="hljs-number">10</span>)<span class="hljs-built_in"> not</span> null,<br>key<span class="hljs-built_in">(name</span><span class="hljs-built_in">,id</span>)<br>)engine=innodb;<br>//可以删除冗余索引，达到优化效果。<br><br>使用pt-duplicate-key-checker工具检查重复及冗余索引<br>pt-duplicate-key-checker \<br>-uroot \<br>-p <span class="hljs-string">&#x27;&#x27;</span> \<br>-h <span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>索引维护的方法–删除不用索引</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">目前mysql中还没有记录索引的使用情况，但是在PerconMySQL和MariaDB中可通过INDEX_STATISTICS表来查看哪些索引未使用，但在mysql中目前只能通过慢查日志配合<span class="hljs-keyword">pt</span>-<span class="hljs-built_in">index</span>-usage工具来进行索引使用情况分析。<br><span class="hljs-keyword">pt</span>-<span class="hljs-built_in">index</span>-usage \<br>-uroot -<span class="hljs-keyword">p</span><span class="hljs-string">&#x27;&#x27;</span> \<br>mysql-slow.<span class="hljs-built_in">log</span><br></code></pre></div></td></tr></table></figure><h4 id="数据库表结构优化"><a href="#数据库表结构优化" class="headerlink" title="数据库表结构优化"></a>数据库表结构优化</h4><p>1、选择<strong>合适</strong>的数据类型</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss">1.使用可以存下你的数据的最小的数据类型<br>2.使用简单的数据类型。int要比varchar类型在mysql处理上更简单<br>3.尽可能的使用not null定义字段<br>4.尽量少用text类型，非用不可时最好考虑分表<br>*使用int来存储日志时间，利用FROM_UNIXTINE()(得到日期),UNIX_TIMESTAMP()(得到时间戳)两个函数来进行转换<br>*使用bigint来存ip地址，利用INET_ATON(),INET_NTOA()两个函数来进行转换<br></code></pre></div></td></tr></table></figure><p>2、表的范式化和反范式化</p><p><strong>范式化</strong>是指数据库设计的规范，目前说到范式化一般是指第三设计范式，也就是要求数据表中不存在非关键字段对任意候选关键字段的传递函数依赖则符合第三范式。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">不符合第三范式要求的表存在下列问题：<br>1.数据冗余：（分类，分类描述）对于每一个商品都会进行记录<br>2.数据的插入异常<br>3.数据的更新异常<br>4.数据的删除异常<br></code></pre></div></td></tr></table></figure><p><strong>反范式化</strong>是指为了查询效率的考虑把原本符合第三范式的表适当的增加冗余，以达到优化查询的目的，反范式化是一种以空间来换取时间的操作。</p><p>3、表的拆分</p><p>垂直拆分</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">所谓的垂直拆分，就是把原来一个有很多列的表拆分成多个表，这解决了表的宽度问题。通常垂直拆分可以按以下原则进行：<br>1.把不常用的字段单独存放到一个表中<br>2.把大字段独立存放到一个表中<br>3.把经常一起使用的字段放到一起<br></code></pre></div></td></tr></table></figure><p>水平拆分</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">表的水平拆分是为了解决单表的数据量过大的问题，水平拆分的表每一个表的结构都是完全一致的。<br>常用的水平拆分方法为：<br><span class="hljs-number">1.</span>对<span class="hljs-built_in">id</span>进行hash运算，如果要拆分成<span class="hljs-number">5</span>个表则使用<span class="hljs-keyword">mod</span>(<span class="hljs-built_in">id</span>,<span class="hljs-number">5</span>)去除<span class="hljs-number">0</span><span class="hljs-number">-4</span>个值<br><span class="hljs-number">2.</span>针对不同的hashID把数据存到不同的表中<br></code></pre></div></td></tr></table></figure><h4 id="系统配置优化"><a href="#系统配置优化" class="headerlink" title="系统配置优化"></a>系统配置优化</h4><p>1、操作系统配置优化</p><p>数据库是基于操作系统的，目前大多数mysql都是安装在Linux系统之上，所以对于操作系统的一些参数配置也会影响到MYSQL的性能。</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">网络方面的配置，要修改/etc/stysctl.conf文件<br>#增加tcp支持的队列数<br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_max_syn_backlog</span> = <span class="hljs-number">65535</span><br>#减少断开链接是，资源回收<br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_max_tw_buckets</span> = <span class="hljs-number">8000</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_tw_reuse</span> = <span class="hljs-number">1</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_tw_recycle</span> = <span class="hljs-number">1</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_fin_timeout</span> = <span class="hljs-number">10</span><br><br>打开文件数的限制，可以使用ulimit -<span class="hljs-selector-tag">a</span> 查看目录的各位限制，可以修改/etcsecurity/limitsconf文件，增加一下内容以修改打开文件数量的限制<br>*soft nofile <span class="hljs-number">65535</span><br>*hard nofile <span class="hljs-number">65535</span><br>除此之外最好在mysql服务器上关闭iptables，selinux等防火墙软件。<br></code></pre></div></td></tr></table></figure><p>2、MySQL数据库优化</p><p>MySQL配置文件</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">mysql可以通过启动时指定配置参数和使用配置文件两种方法进行配置，在大数情况下配置文件位于<span class="hljs-regexp">/etc/my</span>.cnf或是<span class="hljs-regexp">/etc/my</span>sql<span class="hljs-regexp">/my.cnf在windows系统配置文件可以是位于C:/</span>windows/my.ini文件，mysql查找配置文件的顺序可以通过一下方法获得<br><span class="hljs-regexp">/usr/</span>sbin/mysqld --verbose --help | <span class="hljs-keyword">grep</span> -A <span class="hljs-number">1</span> <span class="hljs-string">&#x27; Default options &#x27;</span><br></code></pre></div></td></tr></table></figure><p>MySQL配置文件–常用参数说明</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-number">1.i</span>nnodb_buffer_pool_size &gt;= total MB<br>非常重要的一个参数，用于配置innodb的缓冲池，如果数据库中只有innodb表，则推荐配置量为总内存的<span class="hljs-number">75</span>%<br><br><span class="hljs-number">2.i</span>nnodb_buffer_pool__instances<br>MySQL5<span class="hljs-number">.5</span>中新增加参数，可以控制缓冲池的个数，默认情况下只有一个缓冲池。<br><br><span class="hljs-number">3.i</span>nnodb_log_buffer_size<br>innodb log缓冲的大小，由于日志最长每秒钟就会刷新所以一般不用太大。<br><br><span class="hljs-number">4.i</span>nnodb_flush_log_at_trx_commit<br>关键参数，对innodb的IO效率影响很大。默认值为<span class="hljs-number">1</span>，可取<span class="hljs-number">0</span>，<span class="hljs-number">1</span>，<span class="hljs-number">2</span>三个值，一般建议为<span class="hljs-number">2</span>，但如果数据安全性要求比较高则使用默认值<span class="hljs-number">1.</span><br><br><span class="hljs-number">5.i</span>nnodb_read_io_threads   innodb_write_io_threads<br>以上两个参数决定了Innodb读写的IO进程数，默认为<span class="hljs-number">4.</span><br><br><span class="hljs-number">6.i</span>nnodb_file_per_table<br>关键参数，控制innodb每一个表使用独立的表空间，默认为off，也就是所有表都会建立在共享表空间中。<br><br><span class="hljs-number">7.i</span>nnodb_stats_on_metadata<br>决定了mysql在什么情况下会刷新innodb表的统计信息。<br></code></pre></div></td></tr></table></figure><p>3、第三方配置工具</p><p>链接地址：<a href="https://tools.percona.com/wizard">https://tools.percona.com/wizard</a></p><h4 id="服务器硬件优化"><a href="#服务器硬件优化" class="headerlink" title="服务器硬件优化"></a>服务器硬件优化</h4><p>如何选择cpu？</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.mysql有一些工作只能使用到单核cpu，Replicate,SQL...<br><span class="hljs-attribute">2</span>.mysql对cpu核数的支持并不是越多越快。mysql<span class="hljs-number">5</span>.<span class="hljs-number">5</span>使用的服务器不要超过<span class="hljs-number">30</span>核<br></code></pre></div></td></tr></table></figure><p>磁盘IO优化</p><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">常用RAID级别简介<br>RAID0：也称条带，就是把多个磁盘链接成一个硬盘使用，这个级别IO最好<br>RAID1：也称镜像，要求至少有两个磁盘，每组磁盘存储的数据相同<br>RAID5：也是把多个硬盘合并成一个逻辑盘使用，数据读写时会建立奇偶校验信息，分别存储在不同磁盘上。<br>RAID1<span class="hljs-string">+0</span>：就是RAID1和RAID0的结合。同时具备两个级别的优缺点。一般建议数据库使用这个级别。<br><br>SNA和NAT是否适合数据库？<br>1.常用于高可用解决方案<br>2.顺序读写效率很高，但是随机读写不如人意<br>3.数据库随机读写比率很高<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql导出表结构和表数据</title>
    <link href="/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql%E5%AF%BC%E5%87%BA%E8%A1%A8%E7%BB%93%E6%9E%84%E5%92%8C%E8%A1%A8%E6%95%B0%E6%8D%AE/"/>
    <url>/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql%E5%AF%BC%E5%87%BA%E8%A1%A8%E7%BB%93%E6%9E%84%E5%92%8C%E8%A1%A8%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>命令行下具体用法如下：  </p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">mysqldump -u用戶名 -p密码 -d 数据库名 表名 &gt; 脚本名<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>导出整个数据库结构和数据</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysqldump <span class="hljs-operator">-</span>h localhost <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123456 database <span class="hljs-operator">&gt;</span> dump.sql<br></code></pre></div></td></tr></table></figure><p>导出单个数据表结构和数据</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysqldump <span class="hljs-operator">-</span>h localhost <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123456  database <span class="hljs-keyword">table</span> <span class="hljs-operator">&gt;</span> dump.sql<br></code></pre></div></td></tr></table></figure><p>导出整个数据库结构（不包含数据）</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysqldump <span class="hljs-operator">-</span>h localhost <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123456  <span class="hljs-operator">-</span>d database <span class="hljs-operator">&gt;</span> dump.sql<br></code></pre></div></td></tr></table></figure><p>导出单个数据表结构（不包含数据）</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysqldump <span class="hljs-operator">-</span>h localhost <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123456  <span class="hljs-operator">-</span>d database <span class="hljs-keyword">table</span> <span class="hljs-operator">&gt;</span> dump.sql<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql查看建表的注释</title>
    <link href="/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql%E6%9F%A5%E7%9C%8B%E5%BB%BA%E8%A1%A8%E7%9A%84%E6%B3%A8%E9%87%8A/"/>
    <url>/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql%E6%9F%A5%E7%9C%8B%E5%BB%BA%E8%A1%A8%E7%9A%84%E6%B3%A8%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<p>查看表结构-表格形式，带注释</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">show full columns from tableName;<br></code></pre></div></td></tr></table></figure><p>查看表结构-建表语句，带注释</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">show create table tableName;<br></code></pre></div></td></tr></table></figure><p>简单查看表结构</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">desc tableName;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解 Mysql 索引底层原理</title>
    <link href="/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20Mysql%20%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <url>/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20Mysql%20%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>深入理解 Mysql 索引底层原理 - <a href="https://zhuanlan.zhihu.com/p/113917726">https://zhuanlan.zhihu.com/p/113917726</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 高可用解决方案总结</title>
    <link href="/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%20%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/"/>
    <url>/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%20%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>Redis 高可用解决方案总结：<a href="https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247487221&amp;idx=1&amp;sn=1c3182ad46e8781a04f49ec8ad53f482&amp;chksm=eb538bc3dc2402d5df24a37ec0c0c31099d152df6d3b62380ccebf7f4ec04e64a8dadd83fd7b&amp;mpshare=1&amp;scene=24&amp;srcid=05031WU0aEvCwiVHBCld65XU&amp;key=bf4cf7f356eb2752d8a578bd21d61203d7e72957a4125eb1fe25f0b2384de21e8c81b4a3811eb1285d479714fea7aaa1aa4249cb83cdd5c96b083e77b1c3747440db1862d7b543a903029fb6330afa7a&amp;ascene=14&amp;uin=MTkwNjk4NjAxMA==&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=JogDaVDjKXx9W3zQZ2sl6TAUdMDS7rKA0Zb9hMwwVMC4ALxeAySdvq8JADMCeINW">https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247487221&amp;idx=1&amp;sn=1c3182ad46e8781a04f49ec8ad53f482&amp;chksm=eb538bc3dc2402d5df24a37ec0c0c31099d152df6d3b62380ccebf7f4ec04e64a8dadd83fd7b&amp;mpshare=1&amp;scene=24&amp;srcid=05031WU0aEvCwiVHBCld65XU&amp;key=bf4cf7f356eb2752d8a578bd21d61203d7e72957a4125eb1fe25f0b2384de21e8c81b4a3811eb1285d479714fea7aaa1aa4249cb83cdd5c96b083e77b1c3747440db1862d7b543a903029fb6330afa7a&amp;ascene=14&amp;uin=MTkwNjk4NjAxMA%3D%3D&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=JogDaVDjKXx9W3zQZ2sl6TAUdMDS7rKA0Zb9hMwwVMC4ALxeAySdvq8JADMCeINW</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis-list</title>
    <link href="/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/redis-list/"/>
    <url>/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/redis-list/</url>
    
    <content type="html"><![CDATA[<ul><li>控制List的长度，每次push或者pop的时候，可以使用ltrim()函数让list保持固定长度</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win10设置ubuntu系统root账户密码</title>
    <link href="/2019/09/05/%E5%B7%A5%E5%85%B7/win10%E8%AE%BE%E7%BD%AEubuntu%E7%B3%BB%E7%BB%9Froot%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81/"/>
    <url>/2019/09/05/%E5%B7%A5%E5%85%B7/win10%E8%AE%BE%E7%BD%AEubuntu%E7%B3%BB%E7%BB%9Froot%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h3 id="一、安装ubuntu"><a href="#一、安装ubuntu" class="headerlink" title="一、安装ubuntu"></a>一、安装ubuntu</h3><p>ubuntu安装docker官方文档： <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a></p><h3 id="二、修改root账户的密码"><a href="#二、修改root账户的密码" class="headerlink" title="二、修改root账户的密码"></a>二、修改root账户的密码</h3><p>在win10商店下载ubuntu，安装docker后，每次使用docker命令都需要输入sudo，不使用sudo会报错</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">Cannot connect to the Docker daemon at tcp://localhost:<span class="hljs-number">2375</span>. Is the docker daemon running?<br></code></pre></div></td></tr></table></figure><p>网上也有其他的解决方法，我试了都不行，干脆进到ubuntu后，直接切换成root用户，这样就不用每次输入sudo，下面操作如下</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">sudo passwd root<br>[<span class="hljs-type">sudo</span>] password <span class="hljs-keyword">for</span> mohuani:<br>Enter new UNIX password:<br>Retype new UNIX password:<br>passwd: password updated successfully<br><br>su root<br>Password:<br></code></pre></div></td></tr></table></figure><p>可以愉快的玩耍了…</p>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP 返回码详解</title>
    <link href="/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/HTTP/HTTP%20%E8%BF%94%E5%9B%9E%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
    <url>/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/HTTP/HTTP%20%E8%BF%94%E5%9B%9E%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p> HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。</p><p>##1xx（临时响应）<br><strong>表示临时响应并需要请求者继续执行操作的状态代码。</strong></p><ul><li>100（继续）请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。  </li><li>101（切换协议）请求者已要求服务器切换协议，服务器已确认并准备切换。</li></ul><p>##2xx （成功）<br><strong>表示成功处理了请求的状态代码。</strong></p><ul><li><p>200（成功）服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。</p></li><li><p>201（已创建）请求成功并且服务器创建了新的资源。</p></li><li><p>202（已接受） 服务器已接受请求，但尚未处理。</p></li><li><p>203（非授权信息）服务器已成功处理了请求，但返回的信息可能来自另一来源。</p></li><li><p>204（无内容）服务器成功处理了请求，但没有返回任何内容。</p></li><li><p>205（重置内容）服务器成功处理了请求，但没有返回任何内容。</p></li><li><p>206（部分内容）服务器成功处理了部分 GET 请求。</p></li></ul><p>##3xx （重定向）<br><strong>表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</strong></p><ul><li><p>300（多种选择）针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</p></li><li><p>301（永久移动）请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</p></li><li><p>302（临时移动）服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p></li><li><p>303（查看其他位置）请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</p></li><li><p>304（未修改）自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</p></li><li><p>305（使用代理）请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</p></li><li><p>307（临时重定向）服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p></li></ul><p>##4xx（请求错误）<br><strong>这些状态代码表示请求可能出错，妨碍了服务器的处理。</strong></p><ul><li><p>400（错误请求）服务器不理解请求的语法。</p></li><li><p>401（未授权）请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</p></li><li><p>403（禁止）服务器拒绝请求。</p></li><li><p>404（未找到）服务器找不到请求的网页。</p></li><li><p>405（方法禁用）禁用请求中指定的方法。</p></li><li><p>406（不接受）无法使用请求的内容特性响应请求的网页。</p></li><li><p>407（需要代理授权）此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</p></li><li><p>408（请求超时）服务器等候请求时发生超时。</p></li><li><p>409（冲突）服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</p></li><li><p>410（已删除）如果请求的资源已永久删除，服务器就会返回此响应。</p></li><li><p>411（需要有效长度）服务器不接受不含有效内容长度标头字段的请求。</p></li><li><p>412（未满足前提条件）服务器未满足请求者在请求中设置的其中一个前提条件。</p></li><li><p>413（请求实体过大）服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</p></li><li><p>414（请求的 URI 过长）请求的 URI（通常为网址）过长，服务器无法处理。</p></li><li><p>415（不支持的媒体类型）请求的格式不受请求页面的支持。</p></li><li><p>416（请求范围不符合要求）如果页面无法提供请求的范围，则服务器会返回此状态代码。</p></li><li><p>417（未满足期望值）服务器未满足”期望”请求标头字段的要求。</p></li></ul><p>##5xx（服务器错误）<br><strong>这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</strong></p><ul><li>500（服务器内部错误）服务器遇到错误，无法完成请求。</li></ul><p>501（尚未实施）服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</p><ul><li><p>502（错误网关）服务器作为网关或代理，从上游服务器收到无效响应。</p></li><li><p>503（服务不可用）服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</p></li><li><p>504（网关超时）服务器作为网关或代理，但是没有及时从上游服务器收到请求。</p></li><li><p>505（HTTP 版本不受支持）服务器不支持请求中所用的 HTTP 协议版本。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机相关</category>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机相关</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TensorFlow学习笔记1</title>
    <link href="/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <url>/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<p>自己构建一些数据，来实现一个简单函数的模拟学习</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> tensorflow as tf<br><span class="hljs-attribute">import</span> numpy as np<br><br><span class="hljs-comment"># create data</span><br><span class="hljs-attribute">x_data</span> = np.random.rand(<span class="hljs-number">100</span>).astype(np.float<span class="hljs-number">32</span>)<br><span class="hljs-attribute">y_data</span> = x_data*<span class="hljs-number">0</span>.<span class="hljs-number">1</span> + <span class="hljs-number">0</span>.<span class="hljs-number">3</span><br><br><span class="hljs-comment"># create tensorflow structure start</span><br><span class="hljs-attribute">Weights</span> = tf.Variable(tf.random_uniform([<span class="hljs-number">1</span>],-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>))<br><span class="hljs-attribute">biases</span> = tf.Variable(tf.zeros([<span class="hljs-number">1</span>]))<br><br><span class="hljs-attribute">y</span> = Weights*x_data + biases<br><br><span class="hljs-attribute">loss</span> = tf.reduce_mean(tf.square(y-y_data))<br><span class="hljs-attribute">optimizer</span> = tf.train.GradientDescentOptimizer(<span class="hljs-number">0</span>.<span class="hljs-number">5</span>)<br><span class="hljs-attribute">train</span> = optimizer.minimize(loss)<br><br><span class="hljs-comment"># 2018-4-6记录</span><br><span class="hljs-comment"># 莫烦的视频中用的是老版本 initialize_all_variables()</span><br><span class="hljs-comment"># 现在新版的函数是 global_variables_initializer()</span><br><span class="hljs-comment"># init = tf.initialize_all_variables()</span><br><br><span class="hljs-attribute">init</span> = tf.global_variables_initializer()<br><br><span class="hljs-comment"># create tensorflow structure end</span><br><br><span class="hljs-attribute">sess</span> = tf.Session()<br><span class="hljs-attribute">sess</span>.run(init)<br><br><span class="hljs-attribute">for</span> step in range(<span class="hljs-number">401</span>):<br>    <span class="hljs-attribute">sess</span>.run(train)<br>    <span class="hljs-attribute">if</span> step % <span class="hljs-number">20</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-attribute">print</span>(step,sess.run(Weights),sess.run(biases))<br><br><br></code></pre></div></td></tr></table></figure><p>经过401的迭代后输出的结果</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>[-<span class="hljs-number">0.39455852</span>] [<span class="hljs-number">0.70643663</span>]<br><span class="hljs-symbol">20 </span>[-<span class="hljs-number">0.05729461</span>] [<span class="hljs-number">0.37692836</span>]<br><span class="hljs-symbol">40 </span>[<span class="hljs-number">0.05577959</span>] [<span class="hljs-number">0.32162696</span>]<br><span class="hljs-symbol">60 </span>[<span class="hljs-number">0.08756826</span>] [<span class="hljs-number">0.30608</span>]<br><span class="hljs-symbol">80 </span>[<span class="hljs-number">0.09650504</span>] [<span class="hljs-number">0.3017093</span>]<br><span class="hljs-symbol">100 </span>[<span class="hljs-number">0.09901748</span>] [<span class="hljs-number">0.30048054</span>]<br><span class="hljs-symbol">120 </span>[<span class="hljs-number">0.09972379</span>] [<span class="hljs-number">0.3001351</span>]<br><span class="hljs-symbol">140 </span>[<span class="hljs-number">0.09992234</span>] [<span class="hljs-number">0.300038</span>]<br><span class="hljs-symbol">160 </span>[<span class="hljs-number">0.09997816</span>] [<span class="hljs-number">0.30001068</span>]<br><span class="hljs-symbol">180 </span>[<span class="hljs-number">0.09999388</span>] [<span class="hljs-number">0.30000302</span>]<br><span class="hljs-symbol">200 </span>[<span class="hljs-number">0.09999828</span>] [<span class="hljs-number">0.30000085</span>]<br><span class="hljs-symbol">220 </span>[<span class="hljs-number">0.09999953</span>] [<span class="hljs-number">0.30000025</span>]<br><span class="hljs-symbol">240 </span>[<span class="hljs-number">0.09999986</span>] [<span class="hljs-number">0.30000007</span>]<br><span class="hljs-symbol">260 </span>[<span class="hljs-number">0.0999999</span>] [<span class="hljs-number">0.30000007</span>]<br><span class="hljs-symbol">280 </span>[<span class="hljs-number">0.0999999</span>] [<span class="hljs-number">0.30000007</span>]<br><span class="hljs-symbol">300 </span>[<span class="hljs-number">0.0999999</span>] [<span class="hljs-number">0.30000007</span>]<br><span class="hljs-symbol">320 </span>[<span class="hljs-number">0.0999999</span>] [<span class="hljs-number">0.30000007</span>]<br><span class="hljs-symbol">340 </span>[<span class="hljs-number">0.0999999</span>] [<span class="hljs-number">0.30000007</span>]<br><span class="hljs-symbol">360 </span>[<span class="hljs-number">0.0999999</span>] [<span class="hljs-number">0.30000007</span>]<br><span class="hljs-symbol">380 </span>[<span class="hljs-number">0.0999999</span>] [<span class="hljs-number">0.30000007</span>]<br><span class="hljs-symbol">400 </span>[<span class="hljs-number">0.0999999</span>] [<span class="hljs-number">0.30000007</span>]<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机相关</category>
      
      <category>TensorFlow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机相关</tag>
      
      <tag>TensorFlow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TensorFlow学习笔记6</title>
    <link href="/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <url>/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="TensorFlow搭建神经网络可视化结果"><a href="#TensorFlow搭建神经网络可视化结果" class="headerlink" title="TensorFlow搭建神经网络可视化结果"></a>TensorFlow搭建神经网络可视化结果</h2><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">import tensorflow <span class="hljs-keyword">as</span> tf<br>import numpy <span class="hljs-keyword">as</span> np<br>import matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>def add<span class="hljs-constructor">_layer(<span class="hljs-params">inputs</span>, <span class="hljs-params">in_size</span>, <span class="hljs-params">out_size</span>, <span class="hljs-params">activation_function</span> = None)</span>:<br>    Weights = tf.<span class="hljs-constructor">Variable(<span class="hljs-params">tf</span>.<span class="hljs-params">random_normal</span>([<span class="hljs-params">in_size</span>, <span class="hljs-params">out_size</span>])</span>)<br>    biases = tf.<span class="hljs-constructor">Variable(<span class="hljs-params">tf</span>.<span class="hljs-params">zeros</span>([1, <span class="hljs-params">out_size</span>])</span> + <span class="hljs-number">0.1</span>)<br>    Wx_plus_b = tf.matmul(inputs, Weights) + biases<br>    <span class="hljs-keyword">if</span> activation_function is None:<br>        outputs = Wx_plus_b<br>    <span class="hljs-keyword">else</span>:<br>        outputs = activation<span class="hljs-constructor">_function(Wx_plus_b)</span><br>    return outputs<br><br>x_data = np.linspace(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">300</span>)<span class="hljs-literal">[:,<span class="hljs-identifier">np</span>.<span class="hljs-identifier">newaxis</span>]</span><br>noise = np.random.normal(<span class="hljs-number">0</span>,<span class="hljs-number">0.05</span>,x_data.shape)<br>y_data = np.square(x_data) - <span class="hljs-number">0.5</span> + noise<br><br><br>xs = tf.placeholder(tf.float32,<span class="hljs-literal">[N<span class="hljs-identifier">one</span>,<span class="hljs-number">1</span>]</span>)<br>ys = tf.placeholder(tf.float32,<span class="hljs-literal">[N<span class="hljs-identifier">one</span>,<span class="hljs-number">1</span>]</span>)<br>l1 = add<span class="hljs-constructor">_layer(<span class="hljs-params">xs</span>,1,10,<span class="hljs-params">activation_function</span> = <span class="hljs-params">tf</span>.<span class="hljs-params">nn</span>.<span class="hljs-params">relu</span>)</span><br>prediction = add<span class="hljs-constructor">_layer(<span class="hljs-params">l1</span>,10,1,<span class="hljs-params">activation_function</span>=None)</span><br><br><br>loss =tf.reduce<span class="hljs-constructor">_mean(<span class="hljs-params">tf</span>.<span class="hljs-params">reduce_sum</span>(<span class="hljs-params">tf</span>.<span class="hljs-params">square</span>(<span class="hljs-params">ys</span> - <span class="hljs-params">prediction</span>)</span>,<br>                    reduction_indices=<span class="hljs-literal">[<span class="hljs-number">1</span>]</span>))<br><br>train_step = tf.train.<span class="hljs-constructor">GradientDescentOptimizer(0.1)</span>.minimize(loss)<br><br># init = tf.initialize<span class="hljs-constructor">_all_variables()</span><br>init = tf.global<span class="hljs-constructor">_variables_initializer()</span><br><br>sess = tf.<span class="hljs-constructor">Session()</span><br>sess.run(init)<br><br>fig = plt.figure<span class="hljs-literal">()</span><br>ax = fig.add<span class="hljs-constructor">_subplot(1,1,1)</span><br>ax.scatter(x_data,y_data)<br><br>plt.ion<span class="hljs-literal">()</span><br>plt.show<span class="hljs-literal">()</span><br># plt.close<span class="hljs-literal">()</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1000</span>):<br>    sess.run(train_step,feed_dict=&#123;xs:x_data,ys:y_data&#125;)<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">50</span><span class="hljs-operator"> == </span><span class="hljs-number">0</span>:<br>        # print(sess.run(loss,feed_dict=&#123;xs:x_data,ys:y_data&#125;))<br><br>        <span class="hljs-keyword">try</span>:<br>            ax.lines.remove(lines<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>)<br>        except Exception:<br>            pass<br><br>        prediction_value = sess.run(prediction,feed_dict=&#123;xs:x_data&#125;)<br>        lines = ax.plot(x_data,prediction_value,&#x27;r-&#x27;,lw = <span class="hljs-number">3</span>)<br>        plt.pause(<span class="hljs-number">0.5</span>)<br><br><br></code></pre></div></td></tr></table></figure><p>运行的效果<br><img src="https://img-blog.csdn.net/20180407000723874?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>计算机相关</category>
      
      <category>TensorFlow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机相关</tag>
      
      <tag>TensorFlow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TensorFlow学习笔记5</title>
    <link href="/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<ol><li>搭建神经网络基本流程</li></ol><hr><p>定义添加神经层的函数</p><p>1.训练的数据<br>2.定义节点准备接收数据<br>3.定义神经层：隐藏层和预测层<br>4.定义 loss 表达式<br>5.选择 optimizer 使 loss 达到最小</p><p>然后对所有变量进行初始化，通过 sess.run optimizer，迭代 1000 次进行学习：</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix"><span class="hljs-built_in">import</span> tensorflow as tf<br><span class="hljs-built_in">import</span> numpy as np<br><br><span class="hljs-comment"># 添加层</span><br>def add_layer(inputs, in_size, out_size, <span class="hljs-attr">activation_function=None):</span><br>    <span class="hljs-comment"># add one more layer and return the output of this layer</span><br>    <span class="hljs-attr">Weights</span> = tf.Variable(tf.random_normal([in_size, out_size]))<br>    <span class="hljs-attr">biases</span> = tf.Variable(tf.zeros([<span class="hljs-number">1</span>, out_size]) + <span class="hljs-number">0.1</span>)<br>    <span class="hljs-attr">Wx_plus_b</span> = tf.matmul(inputs, Weights) + biases<br>    <span class="hljs-keyword">if</span> activation_function is None:<br>        <span class="hljs-attr">outputs</span> = Wx_plus_b<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-attr">outputs</span> = activation_function(Wx_plus_b)<br>    return outputs<br><br><span class="hljs-comment"># 1.训练的数据</span><br><span class="hljs-comment"># Make up some real data</span><br><span class="hljs-attr">x_data</span> = np.linspace(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">300</span>)[:, np.newaxis]<br><span class="hljs-attr">noise</span> = np.random.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.05</span>, x_data.shape)<br><span class="hljs-attr">y_data</span> = np.square(x_data) - <span class="hljs-number">0.5</span> + noise<br><br><span class="hljs-comment"># 2.定义节点准备接收数据</span><br><span class="hljs-comment"># define placeholder for inputs to network</span><br><span class="hljs-attr">xs</span> = tf.placeholder(tf.float32, [None, <span class="hljs-number">1</span>])<br><span class="hljs-attr">ys</span> = tf.placeholder(tf.float32, [None, <span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># 3.定义神经层：隐藏层和预测层</span><br><span class="hljs-comment"># add hidden layer 输入值是 xs，在隐藏层有 10 个神经元</span><br><span class="hljs-attr">l1</span> = add_layer(xs, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-attr">activation_function=tf.nn.relu)</span><br><span class="hljs-comment"># add output layer 输入值是隐藏层 l1，在预测层输出 1 个结果</span><br><span class="hljs-attr">prediction</span> = add_layer(l1, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-attr">activation_function=None)</span><br><br><span class="hljs-comment"># 4.定义 loss 表达式</span><br><span class="hljs-comment"># the error between prediciton and real data</span><br><span class="hljs-attr">loss</span> = tf.reduce_mean(tf.reduce_sum(tf.square(ys - prediction),<br>                     <span class="hljs-attr">reduction_indices=[1]))</span><br><br><span class="hljs-comment"># 5.选择 optimizer 使 loss 达到最小</span><br><span class="hljs-comment"># 这一行定义了用什么方式去减少 loss，学习率是 0.1</span><br><span class="hljs-attr">train_step</span> = tf.train.GradientDescentOptimizer(<span class="hljs-number">0.1</span>).minimize(loss)<br><br><br><span class="hljs-comment"># important step 对所有变量进行初始化</span><br><span class="hljs-comment">#init = tf.initialize_all_variables()</span><br><span class="hljs-attr">init</span> = tf.global_variables_initializer()<br><span class="hljs-attr">sess</span> = tf.Session()<br><span class="hljs-comment"># 上面定义的都没有运算，直到 sess.run 才会开始运算</span><br><br> <span class="hljs-number">1</span>. 列表内容<br><br>sess.run(init)<br><br><span class="hljs-comment"># 迭代 1000 次学习，sess.run optimizer</span><br>for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1000</span>):<br>    <span class="hljs-comment"># training train_step 和 loss 都是由 placeholder 定义的运算，所以这里要用 feed 传入参数</span><br>    sess.run(train_step, <span class="hljs-attr">feed_dict=&#123;xs:</span> x_data, ys: y_data&#125;)<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">50</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># to see the step improvement</span><br>        print(sess.run(loss, <span class="hljs-attr">feed_dict=&#123;xs:</span> x_data, ys: y_data&#125;))<br></code></pre></div></td></tr></table></figure><p>运行的结果：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>.<span class="hljs-number">005811795</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">005243601</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">0048823874</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">004609399</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">0043644696</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">00416661</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">004008478</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">0038800447</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">0037535445</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">0036441346</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">003548924</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">0034721296</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">003409828</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">0033587494</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机相关</category>
      
      <category>TensorFlow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机相关</tag>
      
      <tag>TensorFlow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>is()和hasClass()</title>
    <link href="/2019/09/03/%E5%89%8D%E7%AB%AF/is()%E5%92%8ChasClass()/"/>
    <url>/2019/09/03/%E5%89%8D%E7%AB%AF/is()%E5%92%8ChasClass()/</url>
    
    <content type="html"><![CDATA[<h4 id="is-和hasClass"><a href="#is-和hasClass" class="headerlink" title="is()和hasClass()"></a>is()和hasClass()</h4><ul><li><p>jq中的is()有判断元素是否含有某个class的属性，但是hasClass()没有效果。下面是我找的对应的官方的文档，注意仔细阅读文档里面的小demo，并且注意里面的细微区别。</p></li><li><p>is()</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">https://api.jquery.com/is/<br><br>Description: Check the current matched <span class="hljs-built_in">set</span> of elements against a selector, element, or jQuery object and <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span> <span class="hljs-keyword">if</span> at least one of these elements matches the given arguments.<br></code></pre></div></td></tr></table></figure></li><li><p>hasClass()</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">https://api.jquery.com/hasClass/<span class="hljs-comment">#hasClass-className</span><br><br>Description: Determine whether any of the matched elements are assigned the given class.<br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TensorFlow学习笔记4</title>
    <link href="/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><strong>placeholder传值</strong></p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">import tensorflow <span class="hljs-keyword">as</span> <span class="hljs-keyword">tf</span><br><br>input1 = <span class="hljs-keyword">tf</span>.placeholder(<span class="hljs-keyword">tf</span>.float32)<br>input2 = <span class="hljs-keyword">tf</span>.placeholder(<span class="hljs-keyword">tf</span>.float32)<br><br>output = <span class="hljs-keyword">tf</span>.multiply(input1,input2)<br><br># with <span class="hljs-keyword">tf</span>.Session <span class="hljs-keyword">as</span> ses<span class="hljs-variable">s:</span><br>sess = <span class="hljs-keyword">tf</span>.Session()<br><span class="hljs-keyword">print</span>(sess.run(output,feed_dict=&#123;input1:[<span class="hljs-number">7</span>.],input2:[<span class="hljs-number">2</span>.]&#125;))<br></code></pre></div></td></tr></table></figure><p>运行的结果</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">[<span class="hljs-number">14.</span>]<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机相关</category>
      
      <category>TensorFlow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机相关</tag>
      
      <tag>TensorFlow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTPS 比 HTTP 更安全</title>
    <link href="/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/HTTP/HTTPS%20%E6%AF%94%20HTTP%20%E6%9B%B4%E5%AE%89%E5%85%A8/"/>
    <url>/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/HTTP/HTTPS%20%E6%AF%94%20HTTP%20%E6%9B%B4%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<p>为什么 HTTPS 比 HTTP 更安全？：<a href="https://mp.weixin.qq.com/s/xAXiY_7Lvog-Xrq6qEokUQ?client=tim&amp;ADUIN=1348954449&amp;ADSESSION=1561252296&amp;ADTAG=CLIENT.QQ.5603_.0&amp;ADPUBNO=26882">https://mp.weixin.qq.com/s/xAXiY_7Lvog-Xrq6qEokUQ?client=tim&amp;ADUIN=1348954449&amp;ADSESSION=1561252296&amp;ADTAG=CLIENT.QQ.5603_.0&amp;ADPUBNO=26882</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机相关</category>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机相关</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TensorFlow学习笔记3</title>
    <link href="/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><strong>Variable变量的简单使用</strong></p><p>在 Tensorflow 中，定义了某字符串是变量，它才是变量，这一点是与 Python 所不同的</p><figure class="highlight pf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pf">import tensorflow as tf<br><br><span class="hljs-keyword">state</span> = tf.Variable(<span class="hljs-number">0</span>,name = &#x27;counter&#x27;)<br>print(<span class="hljs-keyword">state</span>.name)<br><br>one = tf.constant(<span class="hljs-number">1</span>)<br><br>new_vaule = tf.add(<span class="hljs-keyword">state</span>,one)<br>update = tf.assign(<span class="hljs-keyword">state</span>,new_vaule)<br><br><span class="hljs-comment"># 2018-4-6记录</span><br><span class="hljs-comment"># 莫烦的视频中用的是老版本 initialize_all_variables()</span><br><span class="hljs-comment"># 现在新版的函数是 global_variables_initializer()</span><br><span class="hljs-comment"># init = tf.initialize_all_variables()</span><br>init = tf.global_variables_initializer()<br><br><br>sess = tf.Session()<br>sess.run(init)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):<br>    sess.run(update)<br>    print(sess.run(<span class="hljs-keyword">state</span>))<br>sess.close()<br></code></pre></div></td></tr></table></figure><p>运行的结果</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">counter</span>:<span class="hljs-number">0</span><br><br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">2</span><br><span class="hljs-attribute">3</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机相关</category>
      
      <category>TensorFlow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机相关</tag>
      
      <tag>TensorFlow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TensorFlow学习笔记2</title>
    <link href="/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/"/>
    <url>/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/TensorFlow/TensorFlow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<p><strong>Session的两种使用方式</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> tensorflow as tf<br><br><span class="hljs-attribute">matrix1</span> = tf.constant([[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>]])<br><span class="hljs-attribute">matrix2</span> = tf.constant([[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]])<br><br><span class="hljs-attribute">product</span> = tf.matmul(matrix<span class="hljs-number">1</span>,matrix<span class="hljs-number">2</span>)  # matrix multiply  np.dot(m<span class="hljs-number">1</span>,m<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># session的两种打开模式</span><br><br><span class="hljs-comment"># method 1</span><br><br><span class="hljs-comment"># sess = tf.Session()</span><br><span class="hljs-comment"># result1 = sess.run(product)</span><br><span class="hljs-comment"># print(result1)</span><br><span class="hljs-comment"># sess.close()</span><br><br><span class="hljs-comment"># method 2</span><br><span class="hljs-attribute">with</span> tf.Session() as sess:<br>    <span class="hljs-attribute">result2</span> = sess.run(product)<br>    <span class="hljs-attribute">print</span>(result<span class="hljs-number">2</span>)<br></code></pre></div></td></tr></table></figure><p>运行的结果</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua"><span class="hljs-string">[[12]]</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机相关</category>
      
      <category>TensorFlow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机相关</tag>
      
      <tag>TensorFlow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu 20.04 设置不见了</title>
    <link href="/2019/09/03/%E5%B7%A5%E5%85%B7/ubuntu%2020.04%20%E8%AE%BE%E7%BD%AE%E4%B8%8D%E8%A7%81%E4%BA%86/"/>
    <url>/2019/09/03/%E5%B7%A5%E5%85%B7/ubuntu%2020.04%20%E8%AE%BE%E7%BD%AE%E4%B8%8D%E8%A7%81%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p>ubuntu20.04 用着用着突然发现设置不见了，即使重启电脑还是找不到设置，后来通过扒帖子发现是一个包丢失了，<code>gnome-control-center</code>，重新安装一个这个包就好了</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt install gnome-control-center<br></code></pre></div></td></tr></table></figure><p>附上前面扒到的帖子：</p><blockquote><p><a href="https://forum.ubuntu.com.cn/viewtopic.php?t=491114">https://forum.ubuntu.com.cn/viewtopic.php?t=491114</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Phpstorm ubuntu创建图标</title>
    <link href="/2019/09/03/%E5%B7%A5%E5%85%B7/Phpstorm%20ubuntu%E5%88%9B%E5%BB%BA%E5%9B%BE%E6%A0%87/"/>
    <url>/2019/09/03/%E5%B7%A5%E5%85%B7/Phpstorm%20ubuntu%E5%88%9B%E5%BB%BA%E5%9B%BE%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<p>我们通过源码包的方式安装Jetbrain全家桶的软件时，桌面是没有快捷方式启动的，只能通过命令行的方式启动，很不方便。下面贴一下我的配置，通过快捷方式启动软件<br>ubuntu 2004</p><p>进入目录下面的目录，参考里面已有的文件创建一个xxx.desktop文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/usr/share/applications<br></code></pre></div></td></tr></table></figure><h3 id="PhpStorm"><a href="#PhpStorm" class="headerlink" title="PhpStorm"></a>PhpStorm</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[Desktop Entry]<br>Type=Application<br>Name=Phpstorm<br>GenericName=Phpstorm2020<br>Comment=Phpstorm2020:The PHP IDE<br>Exec=<span class="hljs-string">&quot;/home/mohuani/develop/PhpStorm-201.7846.90/bin/phpstorm.sh&quot;</span><br>Icon=/home/mohuani/develop/PhpStorm-201.7846.90/bin/phpstorm.svg<br>Terminal=phpstorm<br>Categories=Phpstorm<br></code></pre></div></td></tr></table></figure><h3 id="DataGrip"><a href="#DataGrip" class="headerlink" title="DataGrip"></a>DataGrip</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[Desktop Entry]<br>Type=Application<br>Name=Datagrip<br>GenericName=DataGrip2020<br>Comment=DataGrip2020:The SQL IDE<br>Exec=<span class="hljs-string">&quot;/home/mohuani/develop/DataGrip-2020.1.5/bin/datagrip.sh&quot;</span><br>Icon=/home/mohuani/develop/DataGrip-2020.1.5/bin/datagrip.svg<br>Terminal=datagrip<br>Categories=Datagrip<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Phpstorm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Phpstorm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GO语言全栈工程师2</title>
    <link href="/2019/06/15/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%882/"/>
    <url>/2019/06/15/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%882/</url>
    
    <content type="html"><![CDATA[<h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><p><img src="https://img-blog.csdnimg.cn/2019062017341078.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2019062017104812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620172120303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019062017213696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p><img src="https://img-blog.csdnimg.cn/20190620172218964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>部分操作和解释可以参考下面的博客<br><a href="https://www.cnblogs.com/thinkeridea/p/10317417.html">https://www.cnblogs.com/thinkeridea/p/10317417.html</a><br><a href="https://blog.csdn.net/xj178926426/article/details/78782786">https://blog.csdn.net/xj178926426/article/details/78782786</a><br><a href="https://blog.csdn.net/wfk2975019671/article/details/86838110">https://blog.csdn.net/wfk2975019671/article/details/86838110</a></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Beego</title>
    <link href="/2019/06/15/Golang/Beego/"/>
    <url>/2019/06/15/Golang/Beego/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190428134858948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190428134923877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190428134935702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190428134957610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190428135008573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190428135018507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190428135027266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>beego</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>beego</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go语言学习笔记5-面向接口</title>
    <link href="/2019/06/15/Golang/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05-%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3/"/>
    <url>/2019/06/15/Golang/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05-%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190625095314114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="接口的定义和实现"><a href="#接口的定义和实现" class="headerlink" title="接口的定义和实现"></a>接口的定义和实现</h5><p><img src="https://img-blog.csdnimg.cn/20190625130255954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190625134807481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/201906251348495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190625135221955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Google资深工程师深度讲解Go语言11-http及其他标准库</title>
    <link href="/2019/06/15/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%8011-http%E5%8F%8A%E5%85%B6%E4%BB%96%E6%A0%87%E5%87%86%E5%BA%93/"/>
    <url>/2019/06/15/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%8011-http%E5%8F%8A%E5%85%B6%E4%BB%96%E6%A0%87%E5%87%86%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190630223929865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190630223952906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019063022481518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190630224746124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GO语言全栈工程师1</title>
    <link href="/2019/06/15/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%881/"/>
    <url>/2019/06/15/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%881/</url>
    
    <content type="html"><![CDATA[<p>GO语言全栈工程师 基础+就业班：<a href="https://www.bilibili.com/video/av46086727/">https://www.bilibili.com/video/av46086727/</a></p><h5 id="go语言函数详解"><a href="#go语言函数详解" class="headerlink" title="go语言函数详解"></a>go语言函数详解</h5><p>函数可以直接赋值给一个变量<br><img src="https://img-blog.csdnimg.cn/20190620084226797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>map，slice，chan，指针，interface默认都是以引用的范式传递</p><h5 id="函数返回值和参数"><a href="#函数返回值和参数" class="headerlink" title="函数返回值和参数"></a>函数返回值和参数</h5><p><img src="https://img-blog.csdnimg.cn/2019062011291621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620112947325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620113051270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620113608353.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620113540426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h5><p>defer的用途：关闭文件句柄，锁资源释放，数据库连接释放<br><img src="https://img-blog.csdnimg.cn/20190620113941509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620114242786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620114227254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019062011434432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190620171302309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620171454201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Google资深工程师深度讲解Go语言4-面向对象</title>
    <link href="/2019/06/15/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%804-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2019/06/15/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%804-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h5 id="接口体和方法"><a href="#接口体和方法" class="headerlink" title="接口体和方法"></a>接口体和方法</h5><p><img src="https://img-blog.csdnimg.cn/20190624231127111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190624232338909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190624232702781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="包和封装"><a href="#包和封装" class="headerlink" title="包和封装"></a>包和封装</h5><p><img src="https://img-blog.csdnimg.cn/2019062501212967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190625013051362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190625013022974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190625013557977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="GOPATH以及目录结构"><a href="#GOPATH以及目录结构" class="headerlink" title="GOPATH以及目录结构"></a>GOPATH以及目录结构</h5><p><img src="https://img-blog.csdnimg.cn/20190625092642885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5G时代Vlog原型系统开发</title>
    <link href="/2019/06/15/Golang/5G%E6%97%B6%E4%BB%A3Vlog%E5%8E%9F%E5%9E%8B%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/"/>
    <url>/2019/06/15/Golang/5G%E6%97%B6%E4%BB%A3Vlog%E5%8E%9F%E5%9E%8B%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h5 id="5G时代Vlog原型系统开发"><a href="#5G时代Vlog原型系统开发" class="headerlink" title="5G时代Vlog原型系统开发"></a>5G时代Vlog原型系统开发</h5><p>课程地址：<a href="https://www.imooc.com/learn/1131">https://www.imooc.com/learn/1131</a></p><h5 id="课程代码"><a href="#课程代码" class="headerlink" title="课程代码"></a>课程代码</h5><p>ps：其中的文件上传不知道哪里出错了，一直不成功</p><figure class="highlight golang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;crypto/md5&quot;</span><br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;path/filepath&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sayHello</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>w.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;hello world&quot;</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>fileHandler := http.FileServer(http.Dir(<span class="hljs-string">&quot;./video&quot;</span>))<br><br>http.Handle(<span class="hljs-string">&quot;/video/&quot;</span>, http.StripPrefix(<span class="hljs-string">&quot;/video/&quot;</span>, fileHandler))<br><br>http.HandleFunc(<span class="hljs-string">&quot;/api/upload&quot;</span>, uploadHandler)<br><br>http.HandleFunc(<span class="hljs-string">&quot;/api/list&quot;</span>, getFileListHandler)<br><br>http.HandleFunc(<span class="hljs-string">&quot;/sayHello&quot;</span>, sayHello)<br><br>http.ListenAndServe(<span class="hljs-string">&quot;:8090&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">上传文件</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">uploadHandler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>r.Body = http.MaxBytesReader(w, r.Body, <span class="hljs-number">10</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>)<br>err := r.ParseMultipartForm(<span class="hljs-number">10</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, err.Error(), http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>file, fileHeader, err := r.FormFile(<span class="hljs-string">&quot;uploadFile&quot;</span>)<br>ret := strings.HasSuffix(fileHeader.Filename, <span class="hljs-string">&quot;.mp4&quot;</span>)<br><span class="hljs-keyword">if</span> ret == <span class="hljs-literal">false</span> &#123;<br>http.Error(w, <span class="hljs-string">&quot;not mp4&quot;</span>, http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>md5Byte := md5.Sum([]<span class="hljs-keyword">byte</span>(fileHeader.Filename + time.Now().String()))<br>md5Str := fmt.Sprintf(<span class="hljs-string">&quot;%x&quot;</span>, md5Byte)<br>newFileName := md5Str + <span class="hljs-string">&quot;.mp4&quot;</span><br><br>dst, err := os.Create(<span class="hljs-string">&quot;./video/&quot;</span> + newFileName)<br><span class="hljs-keyword">defer</span> dst.Close()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, err.Error(), http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> file.Close()<br><span class="hljs-keyword">if</span> _, err := io.Copy(dst, file); err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, err.Error(), http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getFileListHandler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>files, _ := filepath.Glob(<span class="hljs-string">&quot;video/*&quot;</span>)<br><span class="hljs-keyword">var</span> ret []<span class="hljs-keyword">string</span><br><span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> files &#123;<br>ret = <span class="hljs-built_in">append</span>(ret, <span class="hljs-string">&quot;http://&quot;</span>+r.Host+filepath.Base(file))<br>&#125;<br>retJson, _ := json.Marshal(ret)<br>w.Write(retJson)<br><span class="hljs-keyword">return</span><br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Google资深工程师深度讲解Go语言3-内建容器</title>
    <link href="/2019/06/15/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%803-%E5%86%85%E5%BB%BA%E5%AE%B9%E5%99%A8/"/>
    <url>/2019/06/15/Golang/GO%E8%AF%AD%E8%A8%80%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%803-%E5%86%85%E5%BB%BA%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="go语言中只有值传递，没有引用传递"><a href="#go语言中只有值传递，没有引用传递" class="headerlink" title="go语言中只有值传递，没有引用传递"></a>go语言中只有值传递，没有引用传递</h4><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p><img src="https://img-blog.csdnimg.cn/20190213221143555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h4><p><img src="https://img-blog.csdnimg.cn/20190213221406268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p><img src="https://img-blog.csdnimg.cn/20190213221814765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="数组是值类型"><a href="#数组是值类型" class="headerlink" title="数组是值类型"></a>数组是值类型</h4><p><img src="https://img-blog.csdnimg.cn/20190213222908437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><p>切片可以看成是对数组的一种引用。<br>slice(start, end) 里面的start和end都是下标，end并不是指长度，且下标end是不包括的<br><img src="https://img-blog.csdnimg.cn/20190213225437397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="reslice"><a href="#reslice" class="headerlink" title="reslice"></a>reslice</h4><p><img src="https://img-blog.csdnimg.cn/20190213225515814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="slice扩展"><a href="#slice扩展" class="headerlink" title="slice扩展"></a>slice扩展</h4><p><img src="https://img-blog.csdnimg.cn/20190213230356814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190213230454766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620192636328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019062019300012.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><p><img src="https://img-blog.csdnimg.cn/20190620192137743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620192336653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620194457375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="rune数据类型"><a href="#rune数据类型" class="headerlink" title="rune数据类型"></a>rune数据类型</h4><p><a href="https://www.jianshu.com/p/4fbf529926ca">https://www.jianshu.com/p/4fbf529926ca</a><br><img src="https://img-blog.csdnimg.cn/20190620205734367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190620210106955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker入门</title>
    <link href="/2018/08/22/%E8%BF%90%E7%BB%B4/Docker/Docker%E5%85%A5%E9%97%A8/"/>
    <url>/2018/08/22/%E8%BF%90%E7%BB%B4/Docker/Docker%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h5 id="Docker入门"><a href="#Docker入门" class="headerlink" title="Docker入门"></a>Docker入门</h5><p>课程地址：<a href="https://www.imooc.com/learn/867">https://www.imooc.com/learn/867</a></p><h5 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h5><p><img src="https://img-blog.csdnimg.cn/20190621221824749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190621221925307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h5><p><img src="https://img-blog.csdnimg.cn/20190622020403160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622020416908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="Dockerfile介绍"><a href="#Dockerfile介绍" class="headerlink" title="Dockerfile介绍"></a>Dockerfile介绍</h5><p>最简单的创建命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> alpine:latest<br><span class="hljs-keyword">MAINTAINER</span> xbf<br><span class="hljs-keyword">CMD</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello Docker&quot;</span></span><br></code></pre></div></td></tr></table></figure><p>然后通过以下命令进行创建，查看，运行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker build -t hello_docker .  // 将该目录下的所有dockerfile文件都进行build<br>docker images hello_docker  // 列出hello_docker的相关信息<br>docker run hello_docker  // 运行hello_docker应用容器<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/201906220222401.png" alt="在这里插入图片描述"><br>再次创建一个镜像并运行</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu<br><span class="hljs-keyword">MAINTAINER</span> mohuani<br><span class="hljs-keyword">RUN</span><span class="bash"> sed -i <span class="hljs-string">&#x27;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get update</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get install -y nginx</span><br><span class="hljs-keyword">COPY</span><span class="bash"> index.html /var/www/html</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;usr/sbin/nginx&quot;</span>, <span class="hljs-string">&quot;-g&quot;</span>, <span class="hljs-string">&quot;daemon off;&quot;</span>]</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker run -d -p 8081:80 hello_nginx<br>curl &quot;http://localhost::8081&quot;<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190622025227208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019062202532895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h5><p><img src="https://img-blog.csdnimg.cn/20190622030745734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622030812364.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622031053524.png" alt="在这里插入图片描述"></p><h5 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h5><p><img src="https://img-blog.csdnimg.cn/20190622031641121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622031906671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622031945395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell'">docker search whalesay<br>docker images  &#x2F;&#x2F; 此处可以忽略<br>docker run docker&#x2F;whalesay cowsay 你真的是傻比<br><br>docker tag docker&#x2F;whalesay mohuani&#x2F;whalesay  &#x2F;&#x2F; 以docker&#x2F;whalesay为模板创建一个名字为mohuani&#x2F;whalesay的镜像<br>docker login<br>docker push mohuani&#x2F;whalesay<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190622032800383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622033555763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登录网站   <a href="https://hub.docker.com/">https://hub.docker.com/</a> 就可以查看自己刚刚上传的镜像信息</p><h5 id="多容器app-docker-compose"><a href="#多容器app-docker-compose" class="headerlink" title="多容器app docker-compose"></a>多容器app docker-compose</h5><p>docker-compose的官方安装教程  <a href="https://docs.docker.com/compose/">https://docs.docker.com/compose/</a></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose<br>sudo chmod +x /usr/local/bin/docker-compose<br>sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose<br>docker-compose --version<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190622040044533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622040730314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622040709707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622044043339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190622044131488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Ghost相关的链接<br>Ghost中文网  <a href="http://www.ghostchina.com/">http://www.ghostchina.com/</a><br>Ghost的docker镜像 <a href="https://hub.docker.com/_/ghost">https://hub.docker.com/_/ghost</a></p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker-compose lnmp</title>
    <link href="/2018/08/22/%E8%BF%90%E7%BB%B4/Docker/docker-compose%20lnmp/"/>
    <url>/2018/08/22/%E8%BF%90%E7%BB%B4/Docker/docker-compose%20lnmp/</url>
    
    <content type="html"><![CDATA[<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><p>ubuntu 安装好 docker 和 docker-compose</p><h4 id="编写启动文件"><a href="#编写启动文件" class="headerlink" title="编写启动文件"></a>编写启动文件</h4><ul><li>docker-compose.yml<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">nginx:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">v-nginx</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">80</span><span class="hljs-string">:80</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">443</span><span class="hljs-string">:443</span><br>    <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./nginx/conf.d:/tmp/nginx/conf.d</span><br>    <br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">v-mysql</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql:/tmp/lib/mysql</span><br></code></pre></div></td></tr></table></figure></li></ul><p>运行命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker-compose -f ./docker-compose.yml up -d <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker部署MySQL+PHP-FPM+Nginx服务</title>
    <link href="/2018/08/22/%E8%BF%90%E7%BB%B4/Docker/docker%E9%83%A8%E7%BD%B2MySQL+PHP-FPM+Nginx%E6%9C%8D%E5%8A%A1/"/>
    <url>/2018/08/22/%E8%BF%90%E7%BB%B4/Docker/docker%E9%83%A8%E7%BD%B2MySQL+PHP-FPM+Nginx%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>docker部署MySQL+PHP-FPM+Nginx服务：<a href="https://zhuanlan.zhihu.com/p/59863793?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=29127226687488&amp;from=groupmessage">https://zhuanlan.zhihu.com/p/59863793?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=29127226687488&amp;from=groupmessage</a></p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac环境变量</title>
    <link href="/2018/08/22/%E8%BF%90%E7%BB%B4/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <url>/2018/08/22/%E8%BF%90%E7%BB%B4/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>把路径配置到  /etc/paths 里面</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>容器边缘节点</title>
    <link href="/2018/08/22/%E8%BF%90%E7%BB%B4/%E5%AE%B9%E5%99%A8%E8%BE%B9%E7%BC%98%E8%8A%82%E7%82%B9/"/>
    <url>/2018/08/22/%E8%BF%90%E7%BB%B4/%E5%AE%B9%E5%99%A8%E8%BE%B9%E7%BC%98%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>个人理解：<br>边缘节点：在业务中离用户最近的节点，不需要再经过其他网关服务进行转发的节点。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装Docker</title>
    <link href="/2018/08/22/%E8%BF%90%E7%BB%B4/Centos7%E5%AE%89%E8%A3%85Docker/"/>
    <url>/2018/08/22/%E8%BF%90%E7%BB%B4/Centos7%E5%AE%89%E8%A3%85Docker/</url>
    
    <content type="html"><![CDATA[<h5 id="Centos7安装Docker"><a href="#Centos7安装Docker" class="headerlink" title="Centos7安装Docker"></a>Centos7安装Docker</h5><p>Docker官方给出的安装文档：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><p>其中的版本号选择可以不操作</p><p><a href="https://blog.csdn.net/tangyaliang11/article/details/87266194">https://blog.csdn.net/tangyaliang11/article/details/87266194</a></p><p><a href="https://www.runoob.com/docker/centos-docker-install.html">https://www.runoob.com/docker/centos-docker-install.html</a></p><p><a href="https://www.cnblogs.com/yufeng218/p/8370670.html">https://www.cnblogs.com/yufeng218/p/8370670.html</a></p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx知识梳理</title>
    <link href="/2018/06/22/NGINX/Nginx%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    <url>/2018/06/22/NGINX/Nginx%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><strong>Nginx进程管理信信号</strong></p><p><img src="../images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70.png" alt="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70"></p>]]></content>
    
    
    <categories>
      
      <category>NGINX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NGINX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入浅出nginx9-10</title>
    <link href="/2018/06/22/NGINX/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAnginx9-10/"/>
    <url>/2018/06/22/NGINX/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAnginx9-10/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190702002835367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190702002932802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><a href="https://www.bilibili.com/video/av46744851/?p=10">https://www.bilibili.com/video/av46744851/?p=10</a></p>]]></content>
    
    
    <categories>
      
      <category>NGINX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NGINX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx unit</title>
    <link href="/2018/06/22/NGINX/Nginx%20unit/"/>
    <url>/2018/06/22/NGINX/Nginx%20unit/</url>
    
    <content type="html"><![CDATA[<p>1、nginx  unit 的配置时直接在内存中更新的，如何做到语法错误检测<br>2、怎么配置不同语言的App应用<br>3、配置语法是怎样的，和nginx的区别大吗<br>4、不同语言的App在使用unit作为web容器的时候，都需要做出什么样的改动，例如：golang使用unit的时候需要将http.handler替换陈unit.handler</p>]]></content>
    
    
    <categories>
      
      <category>NGINX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NGINX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx架构及核心流程及模块介绍</title>
    <link href="/2018/06/22/NGINX/Nginx%E6%9E%B6%E6%9E%84%E5%8F%8A%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B%E5%8F%8A%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/"/>
    <url>/2018/06/22/NGINX/Nginx%E6%9E%B6%E6%9E%84%E5%8F%8A%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B%E5%8F%8A%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p>Nginx架构及核心流程及模块介绍：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2MjEyMDI5NA==&amp;mid=2247483697&amp;idx=1&amp;sn=a1e79703c39b00224ba613ba6c01a98e&amp;chksm=ce0df138f97a782e0f97a2748dd8c4d1b48941d6229f4b6d5e22b60a9edf2e46041be062eefc&amp;mpshare=1&amp;scene=24&amp;srcid=0314M9iypvJXOF6eYPXj9mx4&amp;key=bf4cf7f356eb27520c9277b9384b285123f7e2159c8b4f2dfc4e404b8d08db6c2dc3c3639b3ffc54cd4213fb1eb08860918edddf3081951de0b3fc834cf98bd32b84fb59b7604e54f11484b60f6a931f&amp;ascene=14&amp;uin=MTkwNjk4NjAxMA==&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=JogDaVDjKXx9W3zQZ2sl6TAUdMDS7rKA0Zb9hMwwVMC4ALxeAySdvq8JADMCeINW">https://mp.weixin.qq.com/s?__biz=Mzg2MjEyMDI5NA==&amp;mid=2247483697&amp;idx=1&amp;sn=a1e79703c39b00224ba613ba6c01a98e&amp;chksm=ce0df138f97a782e0f97a2748dd8c4d1b48941d6229f4b6d5e22b60a9edf2e46041be062eefc&amp;mpshare=1&amp;scene=24&amp;srcid=0314M9iypvJXOF6eYPXj9mx4&amp;key=bf4cf7f356eb27520c9277b9384b285123f7e2159c8b4f2dfc4e404b8d08db6c2dc3c3639b3ffc54cd4213fb1eb08860918edddf3081951de0b3fc834cf98bd32b84fb59b7604e54f11484b60f6a931f&amp;ascene=14&amp;uin=MTkwNjk4NjAxMA%3D%3D&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=JogDaVDjKXx9W3zQZ2sl6TAUdMDS7rKA0Zb9hMwwVMC4ALxeAySdvq8JADMCeINW</a></p>]]></content>
    
    
    <categories>
      
      <category>NGINX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NGINX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx关键字</title>
    <link href="/2018/06/22/NGINX/nginx%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2018/06/22/NGINX/nginx%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>对关键字的解释会慢慢加上</p><p>master进程：<br>worker进程：<br>pass_proxy</p><hr><p>core Nginx.c：<br>daemon<br>master_process<br>timer_resolution<br>pid<br>lock_file<br>worker_processes<br>debug_points<br>user<br>worker_priority<br>worker_cpu_affinity<br>worker_rlimit_nofile<br>worker_rlimit_core<br>worker_rlimit_sigpending<br>working_directory<br>worker_threads<br>thread_stack_size</p><p>core Ngx_conf_file.c:<br>include</p><p>event Ngx_devpoll_modules.c:<br>devpoll_changes<br>devpoll_events</p><p>event Ngx_epoll_modules.c:<br>epoll_events</p><p>event Ngx_event.c:<br>events<br>worker_connections<br>connections<br>use<br>multi_accept<br>accept_mutex<br>accept_mutex_delay<br>debug_connection</p><p>core Ngx_eventport_modules.c:<br>eventport_events</p><p>core Ngx_event_openssl.c:<br>ssl_engine</p><p>http Ngx_http.c:<br>http</p><p>http modules Ngx_http_access_modules.c:<br>allow<br>deny</p><p>http modules Ngx_http_addition_filter_modules.c:<br>add_before_body<br>add_after_body</p><p>http modules Ngx_http_auth_basic_modules.c:<br>auth_basic<br>auth_basic_user_file</p><p>http modules Ngx_http_autoindex_module.c:<br>autoindex<br>autoindex_localtime<br>autoindex_exact_size</p><p>http modules Ngx_http_browser_module.c:<br>modern_browser<br>ancient_browser<br>modern_browser_value<br>ancient_browser_value</p><p>http modules Ngx_http_charset_filter_module.c:<br>charset<br>source_charset<br>override_charset<br>charset_map</p><p>http Ngx_http_copy_filter_module.c:<br>output_buffers</p><p>http Ngx_http_core_module.c:<br>variables_hash_max_size<br>variables_hash_bucket_size<br>server_names_hash_max_size<br>server_names_hash_bucket_size<br>server<br>connection_pool_size<br>request_pool_size<br>client_header_timeout<br>client_header_buffer_size<br>large_client_header_buffers<br>optimize_server_names<br>optimize_host_names<br>ignore_invalid_headers<br>location<br>listen<br>server_name<br>types_hash_max_size<br>types_hash_bucket_size<br>types<br>default_type<br>root<br>alias<br>limit_except<br>client_max_body_size<br>client_body_buffer_size<br>client_body_timeout<br>client_body_temp_path<br>client_body_in_file_only<br>sendfile<br>tcp_nopush<br>tcp_nodelay<br>send_timeout<br>send_lowat<br>postpone_output<br>limit_rate<br>keepalive_timeout<br>satisfy_any<br>internal<br>lingering_time<br>lingering_timeout<br>reset_timedout_connection<br>port_in_redirect<br>msie_padding<br>msie_refresh<br>log_not_found<br>recursive_error_pages<br>error_page<br>post_action<br>error_log<br>open_file_cache</p><p>http modules ngx_http_dav_module.c:<br>dav_methods<br>create_full_put_path<br>dav_access</p><p>http modules ngx_http_empty_gif_module.c:<br>empty_gif</p><p>http modules ngx_http_fastcgi_module.c:<br>fastcgi_pass<br>fastcgi_index<br>fastcgi_ignore_client_abort<br>fastcgi_connect_timeout<br>fastcgi_send_timeout<br>fastcgi_send_lowat<br>fastcgi_buffer_size<br>fastcgi_header_buffer_size<br>fastcgi_pass_request_headers<br>fastcgi_pass_request_body<br>fastcgi_intercept_errors<br>fastcgi_redirect_errors<br>fastcgi_read_timeout<br>fastcgi_buffers<br>fastcgi_busy_buffers_size<br>fastcgi_temp_path<br>fastcgi_max_temp_file_size<br>fastcgi_temp_file_write_size<br>fastcgi_next_upstream<br>fastcgi_upstream_max_fails<br>fastcgi_upstream_fail_timeout<br>fastcgi_param<br>fastcgi_pass_header<br>fastcgi_hide_header</p><p>http modules ngx_http_flv_modules.c:<br>flv</p><p>http modules ngx_http_geo_modules.c:<br>geo</p><p>http modules ngx_http_gzip_filter_modules.c:<br>gzip<br>gzip_buffers<br>gzip_types<br>gzip_comp_level<br>gzip_window<br>gzip_hash<br>gzip_no_buffer<br>gzip_http_version<br>gzip_proxied<br>gzip_min_length</p><p>http modules ngx_http_headers_filter_modules.c:<br>expires<br>add_header</p><p>http modules ngx_http_index_modules.c:<br>index<br>index_cache</p><p>http modules ngx_http_log_modules.c:<br>log_format<br>access_log</p><p>http modules ngx_http_map_modules.c:<br>map<br>map_hash_max_size<br>map_hash_bucket_size</p><p>http modules ngx_http_memcached_modules.c:<br>memcached_pass<br>memcached_connect_timeout<br>memcached_send_timeout<br>memcached_buffer_size<br>memcached_read_timeout<br>memcached_next_upstream<br>memcached_upstream_max_fails<br>memcached_upstream_fail_timeout</p><p>mysql ngx_http_mysql_test.c<br>mysql_test</p><p>http modules ngx_http_perl_modules.c:<br>perl_modules<br>perl_require<br>perl<br>perl_set</p><p>http modules ngx_http_proxy_modules.c:<br>proxy_pass<br>proxy_redirect<br>proxy_buffering<br>proxy_ignore_client_abort<br>proxy_connect_timeout<br>proxy_send_timeout<br>proxy_send_lowat<br>proxy_intercept_errors<br>proxy_redirect_errors<br>proxy_set_header<br>proxy_set_body<br>proxy_method<br>proxy_pass_request_headers<br>proxy_pass_request_body<br>proxy_buffer_size<br>proxy_header_buffer_size<br>proxy_read_timeout<br>proxy_buffers<br>proxy_busy_buffers_size<br>proxy_temp_path<br>proxy_max_temp_file_size<br>proxy_temp_file_write_size<br>proxy_next_upstream<br>proxy_upstream_max_fails<br>proxy_upstream_fail_timeout<br>proxy_pass_header<br>proxy_hide_header</p><p>http modules ngx_http_realip_module.c:<br>set_real_ip_from<br>real_ip_header</p><p>http modules ngx_http_referer_module.c:<br>valid_referers</p><p>http modules ngx_http_rewrite_module.c:<br>rewrite<br>return<br>break<br>if<br>set<br>rewrite_log<br>uninitialized_variable_warn</p><p>http modules ngx_http_ssi_filter_module.c:<br>ssi<br>ssi_silent_errors<br>ssi_ignore_recycled_buffers<br>ssi_min_file_chunk<br>ssi_value_length<br>ssi_types</p><p>http modules Ngx_http_ssl_module.c:<br>ssl<br>ssl_certificate<br>ssl_certificate_key<br>ssl_protocols<br>ssl_ciphers<br>ssl_verify_client<br>ssl_verify_depth<br>ssl_client_certificate<br>ssl_prefer_server_ciphers<br>ssl_session_timeout</p><p>http modules Ngx_http_static_module.c:<br>redirect_cache</p><p>http modules Ngx_http_status_module.c:<br>status</p><p>http modules Ngx_http_stub_status_module.c:<br>stub_status</p><p>http Ngx_http_upstream.c:<br>upstream<br>server</p><p>http modules Ngx_http_upstream_ip_hash_module.c：<br>ip_hash</p><p>http modules Ngx_http_userid_filter_module.c：<br>userid<br>userid_service<br>userid_name<br>userid_domain<br>userid_path<br>userid_expires<br>userid_p3p<br>userid_mark</p><p>imap Ngx_imap.c：<br>imap</p><p>imap Ngx_imap_auth_http_module.c:<br>auth_http<br>auth_http_timeout<br>auth_http_header</p><p>imap Ngx_imap_core_module.c:<br>server<br>listen<br>protocol<br>imap_client_buffer<br>so_keepalive<br>timeout<br>pop3_capabilities<br>imap_capabilities<br>server_name<br>auth</p><p>imap Ngx_imap_proxy_module.c:<br>proxy<br>proxy_buffer<br>proxy_timeout<br>proxy_pass_error_message</p><p>imap Ngx_imap_ssl_module.c:<br>ssl<br>starttls<br>ssl_certificate<br>ssl_certificate_key<br>ssl_protocols<br>ssl_ciphers<br>ssl_prefer_server_ciphers<br>ssl_session_timeout</p><p>event modules Ngx_iocp_module.c:<br>iocp_threads<br>post_acceptex<br>acceptex_read</p><p>event modules Ngx_kqueue_module.c:<br>kqueue_changes<br>kqueue_events</p><p>core Ngx_log.c:<br>error_log</p><p>event modules Ngx_rtsig_module.c:<br>rtsig_signo<br>rtsig_overflow_events<br>rtsig_overflow_test<br>rtsig_overflow_threshold</p>]]></content>
    
    
    <categories>
      
      <category>NGINX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NGINX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx  resolver</title>
    <link href="/2018/06/22/NGINX/nginx%20%20resolver/"/>
    <url>/2018/06/22/NGINX/nginx%20%20resolver/</url>
    
    <content type="html"><![CDATA[<p><strong>背景</strong>：nginx 配置proxy_pass后，访问接口出现no resolver defined to resolve错误，或者接口直接502，404，需要配置 nginx resolver</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">server &#123;<br>server_name wfk.mohuani.com<br><br>location / &#123;<br>resolver <span class="hljs-number">114.114</span>.<span class="hljs-number">114.114</span>;<br>proxy_pass https:<span class="hljs-regexp">//</span>wfk.mohuani.com<span class="hljs-regexp">/abc/</span><span class="hljs-variable">$1</span>/<span class="hljs-variable">$2</span>  ---<span class="hljs-number">404</span><br>proxy_pass https:<span class="hljs-regexp">//</span>www.baidu.com<span class="hljs-regexp">/abc/</span><span class="hljs-variable">$1</span>/<span class="hljs-variable">$2</span>  ---<span class="hljs-number">502</span><br>proxy_pass https:<span class="hljs-regexp">//</span><span class="hljs-number">113.105</span>.<span class="hljs-number">77.194</span><span class="hljs-regexp">/abc/</span><span class="hljs-variable">$1</span>/<span class="hljs-variable">$2</span>  ---<span class="hljs-number">404</span><br>proxy_pass https:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/abc/</span><span class="hljs-variable">$1</span>/<span class="hljs-variable">$2</span>   ---<span class="hljs-number">404</span><br>&#125;<br><br></code></pre></div></td></tr></table></figure><h5 id="不配置-resolver的情况接口的状态"><a href="#不配置-resolver的情况接口的状态" class="headerlink" title="不配置 resolver的情况接口的状态"></a>不配置 resolver的情况接口的状态</h5><ul><li>proxy_pass 代理的是域名（非自身server_name），且代理的地址中包含变量，接口502</li><li>proxy_pass 代理的是ip，且代理的地址中包含变量，接口404</li><li>proxy_pass 代理的域名如果和自身server_name相同接口会404，如果和自身的server_name不相同的话接口会502</li></ul><p> ps：个人猜测，当proxy_pass 设置为自身server_name 时，server_name会被转成127.0.0.1，导致接口报的是404，而不是502。</p><h5 id="具体什么情况下需要配置-resolver"><a href="#具体什么情况下需要配置-resolver" class="headerlink" title="具体什么情况下需要配置 resolver"></a>具体什么情况下需要配置 resolver</h5><ul><li>proxy_pass 代理的是<strong>域名</strong>或者<strong>ip</strong>,且代理的接口中包含 <strong>变量</strong></li></ul><h5 id="resolver设置哪些DNS"><a href="#resolver设置哪些DNS" class="headerlink" title="resolver设置哪些DNS"></a>resolver设置哪些DNS</h5><p>resolver 设置公共的DNS或者公司内部的DNS都可以</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">resolver</span> <span class="hljs-number">114.114.114.114</span>;<br><span class="hljs-attribute">resolver</span> <span class="hljs-number">8.8.8.8</span>;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NGINX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NGINX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx中间件架构-代理服务</title>
    <link href="/2018/06/17/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/"/>
    <url>/2018/06/17/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h4 id="代理区别"><a href="#代理区别" class="headerlink" title="代理区别"></a>代理区别</h4><p>正向代理代理的对象是客户端<br>反向代理代理的对象是服务端</p><h4 id="proxy-pass"><a href="#proxy-pass" class="headerlink" title="proxy_pass"></a>proxy_pass</h4><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">配置语法<br>Syntax:proxy_pass URL;<br>Default:-;<br>Context:location, <span class="hljs-keyword">if</span> <span class="hljs-keyword">in</span> location, limit_except;<br>------<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/uri/</span><br>https:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/uri/</span><br><br></code></pre></div></td></tr></table></figure><h4 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h4><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">Syntax:</span>proxy_buffering <span class="hljs-keyword">on</span> | <span class="hljs-keyword">off</span>;<br><span class="hljs-symbol">Default:</span>proxy_buffering <span class="hljs-keyword">on</span>;<br><span class="hljs-symbol">Context:</span>http, server, location;<br>拓展： proxy_buffer_size, proxy_buffers, proxy_busy_buffers_size<br></code></pre></div></td></tr></table></figure><h4 id="跳转重定向"><a href="#跳转重定向" class="headerlink" title="跳转重定向"></a>跳转重定向</h4><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">Syntax:</span>proxy_redirect <span class="hljs-keyword">default</span>; proxy_redirect <span class="hljs-keyword">off</span>; proxy_redirect redirect replacement;<br><span class="hljs-symbol">Default:</span>proxy_redirect ;<br><span class="hljs-symbol">Context:</span>server, location;<br></code></pre></div></td></tr></table></figure><h4 id="头信息"><a href="#头信息" class="headerlink" title="头信息"></a>头信息</h4><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss">Syntax:proxy_set_header field value;<br>Default:proxy_set_header Host <span class="hljs-variable">$proxy_host</span>;<br>proxy_set_header Connection close;<br>Context:server, location;<br>扩展：proxy_hide_header, proxy_set_body<br></code></pre></div></td></tr></table></figure><h4 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h4><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">Syntax:proxy_connect_timeout <span class="hljs-type">time</span>;<br><span class="hljs-keyword">Default</span>:proxy_connect_timeout <span class="hljs-number">60</span>s;<br>Context:<span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>;<br>扩展：proxy_read_timeout, proxy_send_timeout  <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NGINX</category>
      
      <category>Nginx中间件架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NGINX</tag>
      
      <tag>Nginx中间件架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx中间件架构-Lua开发</title>
    <link href="/2018/06/17/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-Lua%E5%BC%80%E5%8F%91/"/>
    <url>/2018/06/17/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-Lua%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h4 id="Lua介绍"><a href="#Lua介绍" class="headerlink" title="Lua介绍"></a>Lua介绍</h4><p><img src="https://img-blog.csdnimg.cn/20190210160956312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190210161027419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190210161049801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190210161115210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190210161258232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190210161322352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="nginx调用Lua指令"><a href="#nginx调用Lua指令" class="headerlink" title="nginx调用Lua指令"></a>nginx调用Lua指令</h4><p><img src="https://img-blog.csdnimg.cn/20190210163932385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="nginx-lua-api（lua调用nginx）"><a href="#nginx-lua-api（lua调用nginx）" class="headerlink" title="nginx lua api（lua调用nginx）"></a>nginx lua api（lua调用nginx）</h4><p><img src="https://img-blog.csdnimg.cn/20190210164213535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>NGINX</category>
      
      <category>Nginx中间件架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NGINX</tag>
      
      <tag>Nginx中间件架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx中间件架构-性能优化</title>
    <link href="/2018/06/17/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2018/06/17/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h4 id="location匹配优先级"><a href="#location匹配优先级" class="headerlink" title="location匹配优先级"></a>location匹配优先级</h4><p> ~ 区分大小写，~~*不区分大小写<br><img src="https://img-blog.csdnimg.cn/20190210204325483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="try-files"><a href="#try-files" class="headerlink" title="try_files"></a>try_files</h4><p>场景：用于文件缓存<br><img src="https://img-blog.csdnimg.cn/20190210205237263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="root和alias的区别"><a href="#root和alias的区别" class="headerlink" title="root和alias的区别"></a>root和alias的区别</h4><p><img src="https://img-blog.csdnimg.cn/20190210205600926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190210205627916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="传递用户的真实ip"><a href="#传递用户的真实ip" class="headerlink" title="传递用户的真实ip"></a>传递用户的真实ip</h4><p>在代理1处直接获取用户的ip，然后通过层层代理透传到后端<br><img src="https://img-blog.csdnimg.cn/20190210210042226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="其他常见错误"><a href="#其他常见错误" class="headerlink" title="其他常见错误"></a>其他常见错误</h4><p><img src="https://img-blog.csdnimg.cn/20190210210327967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="文件句柄优化"><a href="#文件句柄优化" class="headerlink" title="文件句柄优化"></a>文件句柄优化</h4><p><img src="https://img-blog.csdnimg.cn/20190210213216549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 针对用户进行修改<br> <img src="https://img-blog.csdnimg.cn/20190210213355529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 针对进程限制<br> <img src="https://img-blog.csdnimg.cn/20190210213510966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="cpu亲和绑定"><a href="#cpu亲和绑定" class="headerlink" title="cpu亲和绑定"></a>cpu亲和绑定</h4><p><img src="https://img-blog.csdnimg.cn/20190211223904157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="gzip兼容"><a href="#gzip兼容" class="headerlink" title="gzip兼容"></a>gzip兼容</h4><p><img src="https://img-blog.csdnimg.cn/20190211225553944.png" alt="在这里插入图片描述"></p><h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><p><img src="https://img-blog.csdnimg.cn/20190211230042274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190211230546667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>NGINX</category>
      
      <category>Nginx中间件架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NGINX</tag>
      
      <tag>Nginx中间件架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx中间件架构-HTTPS服务</title>
    <link href="/2018/06/17/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-HTTPS%E6%9C%8D%E5%8A%A1/"/>
    <url>/2018/06/17/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-HTTPS%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h4 id="secure-link-module"><a href="#secure-link-module" class="headerlink" title="secure_link_module"></a>secure_link_module</h4><p><img src="https://img-blog.csdnimg.cn/20190210115918944.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/201902101159349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190210120132744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="geoip-module"><a href="#geoip-module" class="headerlink" title="geoip_module"></a>geoip_module</h4><p><img src="https://img-blog.csdnimg.cn/20190210122757753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="http-geoip-module使用场景"><a href="#http-geoip-module使用场景" class="headerlink" title="http_geoip_module使用场景"></a>http_geoip_module使用场景</h4><p><img src="https://img-blog.csdnimg.cn/20190210122938312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190210123713696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="生成秘钥和CA证书"><a href="#生成秘钥和CA证书" class="headerlink" title="生成秘钥和CA证书"></a>生成秘钥和CA证书</h4><p><img src="https://img-blog.csdnimg.cn/20190210152829845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>NGINX</category>
      
      <category>Nginx中间件架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NGINX</tag>
      
      <tag>Nginx中间件架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx中间件架构-负载均衡</title>
    <link href="/2018/06/17/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <url>/2018/06/17/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    
    <content type="html"><![CDATA[<h4 id="upstream"><a href="#upstream" class="headerlink" title="upstream"></a>upstream</h4><p><img src="https://img-blog.csdnimg.cn/20190208163713131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="负载均衡调度状态"><a href="#负载均衡调度状态" class="headerlink" title="负载均衡调度状态"></a>负载均衡调度状态</h4><p><img src="https://img-blog.csdnimg.cn/20190208163801717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h4><p><img src="https://img-blog.csdnimg.cn/2019020816472012.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="url-hash"><a href="#url-hash" class="headerlink" title="url_hash"></a>url_hash</h4><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss">Syntax:hash key [consistent];<br>Default:-;<br>Context:upstream;<br>this directive appeared in version 1<span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.2</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190208165904559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="代理缓存"><a href="#代理缓存" class="headerlink" title="代理缓存"></a>代理缓存</h4><p><img src="https://img-blog.csdnimg.cn/20190208170329684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="proxy-cache"><a href="#proxy-cache" class="headerlink" title="proxy_cache"></a>proxy_cache</h4><ul><li>完整<br><img src="https://img-blog.csdnimg.cn/20190208170515936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>部分</li></ul><p><img src="https://img-blog.csdnimg.cn/2019020817072612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="缓存过期周期"><a href="#缓存过期周期" class="headerlink" title="缓存过期周期"></a>缓存过期周期</h4><p><img src="https://img-blog.csdnimg.cn/20190208170807576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="缓存的维度"><a href="#缓存的维度" class="headerlink" title="缓存的维度"></a>缓存的维度</h4><p><img src="https://img-blog.csdnimg.cn/20190208170844518.png" alt="在这里插入图片描述"></p><h4 id="如何清除指定缓存"><a href="#如何清除指定缓存" class="headerlink" title="如何清除指定缓存"></a>如何清除指定缓存</h4><p><img src="https://img-blog.csdnimg.cn/20190208171702548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="如何让指定页面不进行缓存"><a href="#如何让指定页面不进行缓存" class="headerlink" title="如何让指定页面不进行缓存"></a>如何让指定页面不进行缓存</h4><p><img src="https://img-blog.csdnimg.cn/20190208171754843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="大文件分片请求"><a href="#大文件分片请求" class="headerlink" title="大文件分片请求"></a>大文件分片请求</h4><p><img src="https://img-blog.csdnimg.cn/20190208172159437.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190208172303566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190208172232265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="rewrite规则"><a href="#rewrite规则" class="headerlink" title="rewrite规则"></a>rewrite规则</h4><ul><li>这里的规则可以用于写一个维护页面<br><img src="https://img-blog.csdnimg.cn/20190209222155472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h4>beak不会建立新的请求，last还会建立一个新的请求过来。向某个域名进行请求，301请求一次后再次请求不会经过服务器，302请求一次后再次请求还需求经过服务器<br><img src="https://img-blog.csdnimg.cn/20190209223509646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="rewrite规则优先级"><a href="#rewrite规则优先级" class="headerlink" title="rewrite规则优先级"></a>rewrite规则优先级</h4><img src="https://img-blog.csdnimg.cn/20190209225518691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019020922562388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
    
    
    <categories>
      
      <category>NGINX</category>
      
      <category>Nginx中间件架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NGINX</tag>
      
      <tag>Nginx中间件架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx中间件架构-web静态资源</title>
    <link href="/2018/06/17/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-web%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    <url>/2018/06/17/NGINX/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84/nginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84-web%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h4 id="http-x-forwarded-for"><a href="#http-x-forwarded-for" class="headerlink" title="http_x_forwarded_for"></a>http_x_forwarded_for</h4><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">http_x_forwarded_for = Client <span class="hljs-built_in">IP</span>, Proxy1 <span class="hljs-built_in">IP</span>, Client2 <span class="hljs-built_in">IP</span>, Client3 <span class="hljs-built_in">IP</span>...<br></code></pre></div></td></tr></table></figure><h4 id="http-auth-basic-module配置"><a href="#http-auth-basic-module配置" class="headerlink" title="http_auth_basic_module配置"></a>http_auth_basic_module配置</h4><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">Syntax:auth_basic string | <span class="hljs-keyword">off</span>;<br><span class="hljs-keyword">Default</span>:auth_basic <span class="hljs-keyword">off</span>;<br>Context:http, <span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>, limit_except<br> <span class="hljs-comment">------</span><br>Syntax:auth_basic_user_file file;<br><span class="hljs-keyword">Default</span>:—<br>Context:http, <span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>, limit_except<br> <span class="hljs-comment">------</span><br> <span class="hljs-keyword">location</span> ~ ^/<span class="hljs-keyword">admin</span>.html &#123;<br>root/opt/app/code;<br>auth_basic &quot;Auth access test ! imput your password !&quot;;<br>auth_basic_user_file/etc/nginx/auth_conf;  // auth_conf文件存放已经保存的用户名和密码<br><span class="hljs-keyword">index</span><span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br>&#125;<br><br>http_auth_basic_module的局限性：<br><span class="hljs-number">1</span>、用户信息依赖文件<br><span class="hljs-number">2</span>、操作管理机械，效率低下<br><br>解决方案：<br><span class="hljs-number">1</span>、nginx结合Lua实现高效验证<br><span class="hljs-number">2</span>、nginx和LDAP打通，利用nginx-auth-ladp模块<br></code></pre></div></td></tr></table></figure><h4 id="Nginx作为静态资源web服务-配置语法"><a href="#Nginx作为静态资源web服务-配置语法" class="headerlink" title="Nginx作为静态资源web服务_配置语法"></a>Nginx作为静态资源web服务_配置语法</h4><ul><li>   文件读取<figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">Syntax:sendfile <span class="hljs-keyword">on</span> | <span class="hljs-keyword">off</span>;<br><span class="hljs-keyword">Default</span>: sendfile <span class="hljs-keyword">off</span>;<br>Context:http, <span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>, <span class="hljs-keyword">if</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">location</span><br>引读：-<span class="hljs-keyword">with</span>-file-aio 异步文件读取<br></code></pre></div></td></tr></table></figure></li><li>tcp_nopush<figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">Syntax:</span>tcp_nopush <span class="hljs-keyword">on</span> | <span class="hljs-keyword">off</span>;<br><span class="hljs-symbol">Default:</span> tcp_nopush <span class="hljs-keyword">off</span>;<br><span class="hljs-symbol">Context:</span>http, server, location;<br>作用：sendfile开启的情况下，提高网络包的传输效率<br></code></pre></div></td></tr></table></figure></li><li>tcp_nodelay</li></ul><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">Syntax:</span>tcp_nodelay <span class="hljs-keyword">on</span> | <span class="hljs-keyword">off</span>;<br><span class="hljs-symbol">Default:</span> tcp_nodelay <span class="hljs-keyword">off</span>;<br><span class="hljs-symbol">Context:</span>http, server, location;<br>作用：keepalive连接下，提高网络包的额传输实时性<br></code></pre></div></td></tr></table></figure><ul><li>压缩</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">压缩<br>Syntax:gzip <span class="hljs-keyword">on</span> | <span class="hljs-keyword">off</span>;<br><span class="hljs-keyword">Default</span>: gzip <span class="hljs-keyword">off</span>;<br>Context:http, <span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>, <span class="hljs-keyword">if</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">location</span>;<br>作用：压缩传输<br><span class="hljs-comment">------</span><br>压缩比<br>Syntax:gzip_comp_level <span class="hljs-keyword">level</span>;<br><span class="hljs-keyword">Default</span>: gzip_comp_level <span class="hljs-number">1</span>;<br>Context:http, <span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>;<br><span class="hljs-comment">------</span><br>压缩版本<br>Syntax:gzip_http_version <span class="hljs-number">1.0</span> | <span class="hljs-number">1.1</span>;<br><span class="hljs-keyword">Default</span>: gzip_http_version <span class="hljs-number">1.1</span>;<br>Context:http, <span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>;<br><span class="hljs-comment">------</span><br>拓展nginx压缩模块<br>http_gzip_static_module - 预读gzip功能<br>http_gunzip_module - 引用支持gunzip的压缩格式<br></code></pre></div></td></tr></table></figure><h4 id="expires"><a href="#expires" class="headerlink" title="expires"></a>expires</h4><p>添加 Cache-Control、Expires头</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">Syntax:expires [modified] <span class="hljs-type">time</span>;<br>expires eposh | max | <span class="hljs-keyword">off</span>;<br><span class="hljs-keyword">Default</span>: expires <span class="hljs-keyword">off</span>;<br>Context:http, <span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>, <span class="hljs-keyword">if</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">location</span>;<br></code></pre></div></td></tr></table></figure><h4 id="跨域访问"><a href="#跨域访问" class="headerlink" title="跨域访问"></a>跨域访问</h4><p>Access-Control-Allow-Origin</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">Syntax:add_header <span class="hljs-type">name</span> <span class="hljs-keyword">value</span> [<span class="hljs-keyword">always</span>];<br><span class="hljs-keyword">Default</span>: -;<br>Context:http, <span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>, <span class="hljs-keyword">if</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">location</span>;<br></code></pre></div></td></tr></table></figure><h4 id="防盗链-http-refer"><a href="#防盗链-http-refer" class="headerlink" title="防盗链 http_refer"></a>防盗链 http_refer</h4><figure class="highlight lasso"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lasso">Syntax:valid_referers <span class="hljs-literal">none</span> | block | server_names | <span class="hljs-built_in">string</span><span class="hljs-params">...</span>;<br>Default: -;<br>Context:http, server, location;<br>------<br>valid_referers <span class="hljs-literal">none</span> blocked <span class="hljs-number">116.62</span><span class="hljs-number">.103</span><span class="hljs-number">.228</span>;<br><span class="hljs-keyword">if</span> ($valid_referer) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">403</span>;<br>&#125;<br>root /opt/app/code/images;<br>示例<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NGINX</category>
      
      <category>Nginx中间件架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NGINX</tag>
      
      <tag>Nginx中间件架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始搭建创业公司后台技术栈</title>
    <link href="/2018/05/13/%E5%B7%A5%E5%85%B7/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%88%9B%E4%B8%9A%E5%85%AC%E5%8F%B8%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    <url>/2018/05/13/%E5%B7%A5%E5%85%B7/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%88%9B%E4%B8%9A%E5%85%AC%E5%8F%B8%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<p>从零开始搭建创业公司后台技术栈：<a href="https://mp.weixin.qq.com/s/rMQxxSVebFJMkSuzht5HDQ?client=tim&amp;ADUIN=1348954449&amp;ADSESSION=1561252296&amp;ADTAG=CLIENT.QQ.5603_.0&amp;ADPUBNO=26882">https://mp.weixin.qq.com/s/rMQxxSVebFJMkSuzht5HDQ?client=tim&amp;ADUIN=1348954449&amp;ADSESSION=1561252296&amp;ADTAG=CLIENT.QQ.5603_.0&amp;ADPUBNO=26882</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP设计模式（适配器模式）</title>
    <link href="/2017/12/04/PHP/PHP%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <url>/2017/12/04/PHP/PHP%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="设计动机"><a href="#设计动机" class="headerlink" title="设计动机"></a>设计动机</h4><p>假如我们又这样软件系统，我们希望它能够和一个新的库搭配使用，但是这个库所提供的接口与我们的软件系统不兼容，我们不想改变现有代码就能解决这个问题，怎么办？这个时候我们就需要将这个新的库接口转换成我们所需要的接口，这就是适配器模式设计动机。</p><h4 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h4><ol><li><p>适配器模式就是将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。</p></li><li><p>在适配器模式中，我们可以定义一个包装类，包装不兼容接口的对象，这个包装类就是适配器，它所包装的对象就是适配者。</p></li><li><p>适配器提供给客户需要的接口，适配器的实现就是将客户的请求转换成对适配者的相应的接口的引用。也就是说，当客户调用适配器的方法时，适配器方法内部将调用适配者的方法，客户并不是直接访问适配者的，而是通过调用适配器方法访问适配者。因为适配器可以使互不兼容的类能够“合作愉快”。</p></li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p> <strong>1. 首先我们定义一个数据库操作对外，公用的API接口，里面主要设计了connect()   query()   close()  方法。</strong></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">IMooc</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IDatabase</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$passwd</span>, <span class="hljs-variable">$dbname</span></span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>)</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p> <strong>2. 使用mysql实现</strong></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">IMooc</span>\<span class="hljs-title">Database</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">IMooc</span>\<span class="hljs-title">IDatabase</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySQL</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IDatabase</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$conn</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$passwd</span>, <span class="hljs-variable">$dbname</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$conn</span> = mysql_connect(<span class="hljs-variable">$host</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$passwd</span>);<br>        mysql_select_db(<span class="hljs-variable">$dbname</span>, <span class="hljs-variable">$conn</span>);<br>        <span class="hljs-keyword">$this</span>-&gt;conn = <span class="hljs-variable">$conn</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$res</span> = mysql_query(<span class="hljs-variable">$sql</span>, <span class="hljs-keyword">$this</span>-&gt;conn);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        mysql_close(<span class="hljs-keyword">$this</span>-&gt;conn);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p> <strong>3. 使用mysqli实现</strong></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">IMooc</span>\<span class="hljs-title">Database</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">IMooc</span>\<span class="hljs-title">IDatabase</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySQLi</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IDatabase</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$conn</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$passwd</span>, <span class="hljs-variable">$dbname</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$conn</span> = mysqli_connect(<span class="hljs-variable">$host</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$passwd</span>, <span class="hljs-variable">$dbname</span>);<br>        <span class="hljs-keyword">$this</span>-&gt;conn = <span class="hljs-variable">$conn</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> mysqli_query(<span class="hljs-keyword">$this</span>-&gt;conn, <span class="hljs-variable">$sql</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        mysqli_close(<span class="hljs-keyword">$this</span>-&gt;conn);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p> <strong>4. 使用PDO实现</strong> </p><figure class="highlight php-template"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php-template"><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><span class="php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">IMooc</span>\<span class="hljs-title">Database</span>;</span><br><br><span class="php"><span class="hljs-keyword">use</span> <span class="hljs-title">IMooc</span>\<span class="hljs-title">IDatabase</span>;</span><br><br><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PDO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IDatabase</span></span></span><br><span class="php">&#123;</span><br>    /**<br>     * @var \PDO<br><span class="php">     */</span><br><span class="php">    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$conn</span>;</span><br><span class="php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$passwd</span>, <span class="hljs-variable">$dbname</span></span>)</span></span><br><span class="php">    &#123;</span><br><span class="php">        <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> \PDO(<span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$host</span>;dbname=<span class="hljs-subst">$dbname</span>&quot;</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$passwd</span>);</span><br><span class="php">        <span class="hljs-keyword">$this</span>-&gt;conn = <span class="hljs-variable">$conn</span>;</span><br><span class="php">    &#125;</span><br><br><span class="php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span></span><br><span class="php">    &#123;</span><br><span class="php">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;conn-&gt;query(<span class="hljs-variable">$sql</span>);</span><br><span class="php">    &#125;</span><br><br><span class="php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>)</span></span><br><span class="php">    &#123;</span><br><span class="php">        <span class="hljs-keyword">unset</span>(<span class="hljs-keyword">$this</span>-&gt;conn);</span><br><span class="php">    &#125;</span><br><span class="php">&#125;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP 水印  验证码</title>
    <link href="/2017/12/04/PHP/PHP%E7%9B%B8%E5%85%B3/PHP%20%E6%B0%B4%E5%8D%B0%20%20%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <url>/2017/12/04/PHP/PHP%E7%9B%B8%E5%85%B3/PHP%20%E6%B0%B4%E5%8D%B0%20%20%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p><strong>PHP水印</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a25511a9bd25726528c0df256433354a.png" alt="PHP水印"></p><hr><p><strong>PHP验证码处理</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/20a0a84e2cc9836d36e41e6496fbe783.png" alt="PHP验证码处理"></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP7的基本变量</title>
    <link href="/2017/12/04/PHP/PHP%E7%9B%B8%E5%85%B3/PHP7%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8F%98%E9%87%8F/"/>
    <url>/2017/12/04/PHP/PHP%E7%9B%B8%E5%85%B3/PHP7%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h4 id="课程地址：https-www-imooc-com-learn-1085"><a href="#课程地址：https-www-imooc-com-learn-1085" class="headerlink" title="课程地址：https://www.imooc.com/learn/1085"></a>课程地址：<a href="https://www.imooc.com/learn/1085">https://www.imooc.com/learn/1085</a></h4><p><img src="https://img-blog.csdnimg.cn/20190428145419579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190428145455679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP的自动加载机制</title>
    <link href="/2017/12/04/PHP/PHP%E7%9B%B8%E5%85%B3/PHP%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2017/12/04/PHP/PHP%E7%9B%B8%E5%85%B3/PHP%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>我们在写PHP代码的时候，总会遇到这种情况（A.php需要引入XXX.php才能正常运行），代码结构比较小的话，通常我们都是直接通过 include 或者 require 直接引入，如果需要引入的文件不多的话，还可以接受，但是如果引入的文件达到几十个以上，再用 include 和 require 就显得比较繁琐，影响代码的美观。因此我们需要引入PHP文件的自动加载机制。</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>使用 __autoload() 函数</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">// __autoload — Attempt to load undefined class</span><br><span class="hljs-comment">// void __autoload ( string $class )</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__autoload</span>(<span class="hljs-params"><span class="hljs-variable">$class</span></span>)</span>&#123;<br><span class="hljs-keyword">require_once</span>( <span class="hljs-variable">$class</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP简单图形图像处理</title>
    <link href="/2017/12/04/PHP/PHP%E7%9B%B8%E5%85%B3/PHP%E7%AE%80%E5%8D%95%E5%9B%BE%E5%BD%A2%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    <url>/2017/12/04/PHP/PHP%E7%9B%B8%E5%85%B3/PHP%E7%AE%80%E5%8D%95%E5%9B%BE%E5%BD%A2%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>#PHP简单图形图像处理</p><h2 id="引语"><a href="#引语" class="headerlink" title="引语"></a>引语</h2><p>php不仅仅局限于html的输出，还可以创建和操作各种各样的图像文件，如GIF、PNG、JPEG、WBMP、XBM等。</p><p>php还可以将图像流直接显示在浏览器中。</p><p>要处理图像，就要用到php的GD库。</p><p>ps：确保php.ini文件中可以加载GD库。可以在php.ini文件中找到“;extension=php_gd2.dll”，将选项前的分号删除，保存，再重启Apache服务器即可。</p><hr><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>在php中创建一个图像一般需要四个步骤：</p><ul><li><p>1.创建一个背景图像，以后的所有操作都是基于此背景。</p></li><li><p>2.在图像上绘图等操作。</p></li><li><p>3.输出最终图像。</p></li><li><p>4.销毁内存中的图像资源。</p></li></ul><hr><h2 id="1-创建背景图像"><a href="#1-创建背景图像" class="headerlink" title="1.创建背景图像"></a>1.创建背景图像</h2><p>下面的函数可以返回一个图像标识符，代表了一个宽为x_size像素、高为y_size像素的背景，默认为黑色。</p><blockquote><p>resource imagecreatetruecolor(int x_size , int y_size)</p></blockquote><p>在图像上绘图需要两个步骤：首先需要选择颜色。通过imagecolorallocate()函数创建颜色对象。</p><blockquote><p>int imagecolorallocate(resource image, int red, int green, int blue) </p></blockquote><p>然后将颜色绘制到图像上。</p><blockquote><p>bool imagefill(resource image, int x, int y, int color) </p></blockquote><p>imagefill()函数会在image图像的坐标（x，y）处用color颜色进行填充。</p><hr><h2 id="2-在图像上绘图"><a href="#2-在图像上绘图" class="headerlink" title="2.在图像上绘图"></a>2.在图像上绘图</h2><blockquote><p>bool iamgeline(resource image, int begin_x, int begin_y, int end_x, int end_y, int color) </p></blockquote><p>imageline()函数用color颜色在图像image中画出一条从（begin_x,begin_y）到（end_x,end_y）的线段。</p><blockquote><p>bool imagestring(resource image, int font, int begin_x, int begin_y, string s, int color ) </p></blockquote><p>imagestring()函数用color颜色将字符串s画到图像image的（begin_x,begin_y）处（这是字符串的左上角坐标）。如果font等于1,2,3,4或5，则使用内置字体，同时数字代表字体的粗细。如果font字体不是内置的，则需要导入字体库后使用。</p><hr><h2 id="3-输出最终图像"><a href="#3-输出最终图像" class="headerlink" title="3.输出最终图像"></a>3.输出最终图像</h2><p>创建图像以后就可以输出图形或者保存到文件中了，如果需要输出到浏览器中需要使用header()函数发送一个图形的报头“欺骗”浏览器，使它认为运行的php页面是一个图像。</p><blockquote><p>header(“Content-type: image/png”); </p></blockquote><p>发送数据报头以后，利用imagepng()函数输出图形。后面的filename可选，代表生成的图像文件的保存名称。</p><blockquote><p>bool image(resource image [, string filename]) </p></blockquote><hr><h2 id="4-销毁相关的内存资源"><a href="#4-销毁相关的内存资源" class="headerlink" title="4.销毁相关的内存资源"></a>4.销毁相关的内存资源</h2><p>最后需要销毁图像占用的内存资源。</p><blockquote><p>bool imagedestroy(resource image) </p></blockquote><p><strong>例子:</strong></p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><br>&lt;?php<br><span class="hljs-variable">$width</span>=<span class="hljs-number">300</span>;                                          <span class="hljs-regexp">//</span>图像宽度<br><span class="hljs-variable">$height</span>=<span class="hljs-number">200</span>;                                         <span class="hljs-regexp">//</span>图像高度<br>   <span class="hljs-variable">$img</span>=imagecreatetruecolor(<span class="hljs-variable">$width</span>,<span class="hljs-variable">$height</span>);           <span class="hljs-regexp">//</span>创建图像<br>   <span class="hljs-variable">$white</span>=imagecolorallocate(<span class="hljs-variable">$img</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>);         <span class="hljs-regexp">//</span>白色<br>   <span class="hljs-variable">$black</span>=imagecolorallocate(<span class="hljs-variable">$img</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);               <span class="hljs-regexp">//</span>黑色<br>   <span class="hljs-variable">$red</span>=imagecolorallocate(<span class="hljs-variable">$img</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);               <span class="hljs-regexp">//</span>红色<br>   <span class="hljs-variable">$green</span>=imagecolorallocate(<span class="hljs-variable">$img</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>);             <span class="hljs-regexp">//</span>绿色<br>   <span class="hljs-variable">$blue</span>=imagecolorallocate(<span class="hljs-variable">$img</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>);              <span class="hljs-regexp">//</span>蓝色<br>   imagefill(<span class="hljs-variable">$img</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$white</span>);                          <span class="hljs-regexp">//</span>将背景设置为白色<br>   imageline(<span class="hljs-variable">$img</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">260</span>,<span class="hljs-number">150</span>,<span class="hljs-variable">$red</span>);                  <span class="hljs-regexp">//</span>画出一条红色的线<br>   imagestring(<span class="hljs-variable">$img</span>,<span class="hljs-number">5</span>,<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;hello,world!!&quot;</span>,<span class="hljs-variable">$blue</span>);     <span class="hljs-regexp">//</span>显示蓝色的文字<br>   header(<span class="hljs-string">&quot;content-type: image/png&quot;</span>);                   <span class="hljs-regexp">//</span>输出图像的MIME类型<br>   imagepng(<span class="hljs-variable">$img</span>);                                      <span class="hljs-regexp">//</span>输出一个PNG图像数据<br>   imagedestroy(<span class="hljs-variable">$img</span>);                                   <span class="hljs-regexp">//</span>清空内存<br> ?&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP消息队列实现及应用</title>
    <link href="/2017/12/04/PHP/PHP%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <url>/2017/12/04/PHP/PHP%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>直接放置传送门：<a href="https://www.cnblogs.com/dump/p/8243868.html">https://www.cnblogs.com/dump/p/8243868.html</a></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHPstrom配置</title>
    <link href="/2017/12/04/PHP/PHPstrom%E9%85%8D%E7%BD%AE/"/>
    <url>/2017/12/04/PHP/PHPstrom%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="CodeStyle配置"><a href="#CodeStyle配置" class="headerlink" title="CodeStyle配置"></a>CodeStyle配置</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">code_scheme</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Mohuani-PHP&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;11&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">PHPCodeStyleSettings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ALIGN_KEY_VALUE_PAIRS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ALIGN_PHPDOC_COMMENTS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONCAT_SPACES&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;COMMA_AFTER_LAST_ARRAY_ELEMENT&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOWER_CASE_BOOLEAN_CONST&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FORCE_SHORT_DECLARATION_ARRAY_STYLE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">PHPCodeStyleSettings</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">editorconfig</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ENABLED&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">editorconfig</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">codeStyleSettings</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;PHP&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;KEEP_FIRST_COLUMN_COMMENT&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CLASS_BRACE_STYLE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;METHOD_BRACE_STYLE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ALIGN_MULTILINE_ARRAY_INITIALIZER_EXPRESSION&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SPACE_BEFORE_METHOD_PARENTHESES&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;KEEP_SIMPLE_METHODS_IN_ONE_LINE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">codeStyleSettings</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">code_scheme</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h3 id="PSR-配置"><a href="#PSR-配置" class="headerlink" title="PSR 配置"></a>PSR 配置</h3><p><img src="../images/114130537-5bf38580-9933-11eb-91fb-4c3f6627bf93.png" alt="114130537-5bf38580-9933-11eb-91fb-4c3f6627bf93"></p><ul><li><a href="https://learnku.com/docs/psr">https://learnku.com/docs/psr</a></li></ul><h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><ul><li><p><a href="https://plugins.jetbrains.com/plugin/7320-php-annotations">PHP Annotation</a></p></li><li><p><a href="https://plugins.jetbrains.com/plugin/9525--env-files-support">.env files support</a></p></li><li><p><a href="https://plugins.jetbrains.com/plugin/4230-bashsupport">BashSupport</a></p></li><li><p><a href="https://plugins.zhile.io/">IDE Eval Reset</a></p><blockquote><p>在Settings/Preferences… -&gt; Plugins 内手动添加第三方插件仓库地址：<a href="https://plugins.zhile.io/">https://plugins.zhile.io</a>，然后再仓库市场里面搜索并安装插件 <code>IDE Eval Reset</code></p></blockquote></li><li><p><a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets">Rainbow Brackets</a></p></li><li><p><a href="https://blog.csdn.net/noaman_wgs/article/details/103429171">Git Commit Template</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>PHPstrom</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>PHPstrom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHPUnit单元测试</title>
    <link href="/2017/12/04/PHP/PHPUnit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <url>/2017/12/04/PHP/PHPUnit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>###前言<br>单元测试这个问题对于新人来说总感觉没意思，感觉单元测试做不做都没啥问题，有时候还总觉得做单元测试很浪费时间。我总感觉 PHP 的开发者们并没有对 PHP 的质量有所追求，让大部分的开发者总以为浏览器访问就没有问题，所以很多时候，做 PHP 开发的，就没有单元测试的这些概念了。能不能有点追求？作为一个开发者，或者说是一个产品的经手人，就应该用心地去做好每个细节，一次比一次要更好。但是做单元测试，质量检查，是需要一定的时间和人力投入的，但我敢保证地说，你花时间投入的，绝对不会是没用的，一定对你，对项目来说，是一个质的提升，只要你肯投入时间用心去做。</p><p>单元测试是对单独的代码对象进行测试的过程，比如对函数、类、方法进行测试。单元测试可以使用任意一段已经写好的测试代码，也可以使用一些已经存在的测试框架，比如JUnit、PHPUnit或者Cantata++，单元测试框架提供了一系列共同、有用的功能来帮助人们编写自动化的检测单元，例如检查一个实际的值是否符合我们期望的值的断言。单元测试框架经常会包含每个测试的报告，以及给出你已经覆盖到的代码覆盖率。总之一句话，使用 phpunit 进行自动测试，会使你的代码更健壮，减少后期维护的成本，也是一种比较标准的规范。现如今流行的PHP框架都带了单元测试，如Laraval,Symfony,Yii2等，单元测试已经成了标配。另外，单元测试用例是通过命令操控测试脚本的，而不是通过浏览器访问URL的。</p><p>直接简单讲讲 PHPUnit吧。<br>官网：<a href="https://phpunit.de/">https://phpunit.de/</a><br>中文版官网：<a href="http://www.phpunit.cn/">http://www.phpunit.cn/</a><br>###1.安装<br>习惯用 composer，使用 composer 安装吧。关于composer的安装可以参考<a href="https://www.phpcomposer.com/">https://www.phpcomposer.com/</a> 的介绍。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">composer <span class="hljs-built_in">require</span> <span class="hljs-comment">--dev phpunit/phpunit ^6.5</span><br>//这里的 ^<span class="hljs-number">6.5</span> 是版本号<br></code></pre></div></td></tr></table></figure><p>###2.PHPunit的已引入</p><figure class="highlight php-template"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php-template"><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><br><span class="php"><span class="hljs-keyword">use</span> <span class="hljs-title">PHPUnit</span>\<span class="hljs-title">Framework</span>\<span class="hljs-title">TestCase</span>;</span><br><br><span class="php"><span class="hljs-comment">//类名不能以Test开头，否则无法运行</span></span><br><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span> </span></span><br><span class="php">&#123;</span><br><span class="php"><span class="hljs-comment">//Todo</span></span><br><span class="php">&#125;</span><br></code></pre></div></td></tr></table></figure><p>###3.输出格式的解读。</p><p>.    成功<br>F    失败<br>E 错误<br>R 有风险<br>S 跳过<br>I 未完成</p><p>###4.常见的断言方法<br>详细的断言方法和参数详解可以参考PHPUnit中文网站的文档<a href="https://phpunit.readthedocs.io/zh_CN/latest/assertions.html">https://phpunit.readthedocs.io/zh_CN/latest/assertions.html</a></p><p>1.判断一个数组中是否含有指定的key</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertArrayHasKey</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>2.判断是否含有数组形式的子集</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertArraySubset</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>3.判断数组中是否含有指定的值</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertContains</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>4.判断数组中不含指定的值，与3相反</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertNotContains</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>5.判断数组中的数据是否仅是指定的数据类型，比如interger，float，boolean，object，string等。</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertContainsOnly</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>6.与5相反，比如interger，float，boolean，object，string等</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertNotContainsOnly</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>7.</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertContainsOnlyInstancesOf</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>8.判断数组的长度和指定的数组长度是否相等</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertCount</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>9.判断指定的多个数组的值是否相等，数组的元素顺序和值都会进行判断</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertEquals</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>10.与9相反</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertNotEquals</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>###5.字符串的常用断言方法<br>1.判断字符串中是否含有某个字符</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertContains</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>2.判断字符串</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertEquals</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>3.判断字符串与指定的正则表达式能否匹配</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertRegExp</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>4.判断字符串</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertStringMatchesFormat</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>5.判断字符串</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertStringMatchesFormatFile</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>6.判断字符串与指定字符是否相等，assertSame()采用===判断，assertEquals()采用==判断</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertSame</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>7.与6相反</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertNotSame</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>8.判断字符串是否以指定的字符结尾</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertStringEndsWith</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>9.判断字符串是否与指定的文件内容相等</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertStringEqualsFile</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>10.判断字符串是否以指定的字符开头</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertStringStartsWith</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>###6.类的断言方法<br>1.判断类中是否含有指定的某个属性，不管这个属性是否为static，public，private，protected都可以</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertClassHasAttribute</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>2.判断类中是否含有静态属性，只判断是否有static修饰</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertClassHasStaticAttribute</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>3.判断类是否相等，会判断类里面的值，单不判断数据类型，采用==判断</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertEquals</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>4.判断一个类是否来自一个指定的继承类</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertInstanceOf</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>5.断言一个类的实例是否含有指定的属性</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assertObjectHasAttribute</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>PHPUnit</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>PHPUnit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP 优秀资源汇集</title>
    <link href="/2017/12/04/PHP/PHP%20%E4%BC%98%E7%A7%80%E8%B5%84%E6%BA%90%E6%B1%87%E9%9B%86/"/>
    <url>/2017/12/04/PHP/PHP%20%E4%BC%98%E7%A7%80%E8%B5%84%E6%BA%90%E6%B1%87%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="php-awesome"><a href="#php-awesome" class="headerlink" title="php-awesome"></a>php-awesome</h1><blockquote><p>以下是我整理好的 PHP 资源，各位看官拿去用，不用再自己找了。</p><p>每周在 <a href="https://github.com/shockerli/php-awesome">GitHub</a> 上更新，觉得不错请点个 Star ❤️</p><p>如转载分享，请保留出处，谢谢 ?</p><p>原文地址: <a href="https://shockerli.net/post/php-awesome">https://shockerli.net/post/php-awesome</a></p><p>GitHub: <a href="https://github.com/shockerli/php-awesome">https://github.com/shockerli/php-awesome</a></p></blockquote><ul><li><p><strong>PHP PSR 代码标准</strong></p><ul><li>官网: <a href="https://www.php-fig.org/">https://www.php-fig.org</a></li><li>原文: <a href="https://github.com/php-fig/fig-standards">https://github.com/php-fig/fig-standards</a></li><li>中文: <a href="https://psr.phphub.org/">https://psr.phphub.org</a></li></ul></li><li><p><a href="https://github.com/ziadoz/awesome-php">PHP 资源列表</a></p></li><li><p><a href="https://github.com/domnikl/DesignPatternsPHP">PHP 设计模式</a></p></li><li><p><a href="https://github.com/m9rco/algorithm-php">用 PHP 的方式实现的各类算法合集</a></p></li><li><p><a href="https://raw.githubusercontent.com/justjavac/awesome-awesomeness-zh_CN/master/assets/php-mind-map.jpg">PHP 知识技能树</a></p></li></ul><h2 id="资源站点"><a href="#资源站点" class="headerlink" title="资源站点"></a>资源站点</h2><ul><li><a href="http://www.phpweekly.com/">PHP Weekly</a> - PHP 周报邮件</li><li><a href="http://thephpleague.com/zh-cn/"><strong>PHP League</strong></a> - PHP 软件包的发展者联盟</li><li><a href="http://knplabs.com/"><strong>KnpLabs</strong></a> - Object oriented Menus for your Symfony projects</li></ul><h2 id="项目框架"><a href="#项目框架" class="headerlink" title="项目框架"></a>项目框架</h2><ul><li><a href="https://github.com/karsonzhang/fastadmin"><strong>FastAdmin</strong></a> - 基于 ThinkPHP5 + Bootstrap 的极速后台开发框架</li><li><a href="https://gitee.com/rainfer/YFCMF">YFCMF</a> - 后台内容管理框架，基于 ThinkPHP5.1</li><li><a href="https://github.com/thinkcmf/thinkcmf">ThinkCMF</a> - 后台内容管理框架，基于 ThinkPHP5</li><li><a href="https://github.com/geesondog/rhaphp">RhaPHP</a> - 微信开发、小程序开发、微信公众号管理系统</li><li><a href="https://gitee.com/Bigotry/OneBase">OneBase</a> - 基于 ThinkPHP5 的后台开发框架</li></ul><h2 id="成品软件"><a href="#成品软件" class="headerlink" title="成品软件"></a>成品软件</h2><h3 id="未归类"><a href="#未归类" class="headerlink" title="未归类"></a>未归类</h3><ul><li><a href="https://github.com/matomo-org/matomo"><strong>Matomo</strong></a> - 开源 Web 统计软件，原 Piwik</li><li><a href="https://github.com/duckchat/gaga">DuckChat</a> - 私有聊天软件</li><li><a href="https://github.com/BookStackApp/BookStack">BookStack</a> - 类 wiki 和在线书籍写作平台</li><li><a href="https://github.com/lifei6671/SmartWiki">SmartWiki</a> - 支持 Markdown 的文档工具</li><li><a href="https://github.com/Codiad/Codiad">Codiad</a> - Web 在线 IDE</li><li><a href="https://github.com/Qsnh/meedu">MeEdu</a> - 基于 Laravel 开发的在线点播系统</li><li><a href="https://github.com/CachetHQ/Cachet">Cachet</a> - The open source status page system</li><li><a href="https://github.com/magento/magento2">Magento</a> - 电商系统</li><li><a href="https://github.com/monicahq/monica">Monica</a> - 个人 CRM</li><li><a href="https://github.com/phpservermon/phpservermon">PHP Server Monitor</a> - 服务器监控工具</li><li><a href="https://github.com/phpsysinfo/phpsysinfo">phpSysInfo</a> - 系统信息展示</li><li><a href="https://github.com/YouPHPTube/YouPHPTube">YouPHPTube</a> - YouTube 克隆工具</li></ul><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><ul><li><a href="https://github.com/getgrav/grav">Grav</a> - 基于文件的 CMS</li><li><a href="https://github.com/octobercms/october">October</a> - 基于 Laravel 开发的 CMS</li></ul><h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><ul><li><a href="https://github.com/flarum/flarum">Flarum</a> - 基于 PHP 和 Mithril.js 开发的轻社区</li><li><a href="https://github.com/slince/phpdish">PHPDish</a> - 基于 Symfony 框架开发的内容社区系统</li></ul><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><ul><li><a href="https://github.com/nextcloud/server">Nextcloud Server</a> - 基于 PHP 的私有云服务</li><li><a href="https://github.com/HFO4/Cloudreve">Cloudreve</a> - 支持多家云存储的云盘系统</li><li><a href="https://github.com/thephpleague/flysystem">Flysystem</a> - 支持几十种驱动的文件管理库</li></ul><h3 id="微信相关"><a href="#微信相关" class="headerlink" title="微信相关"></a>微信相关</h3><ul><li><a href="https://gitee.com/laiketui/open">来客电商</a> - 微信小程序电商平台</li><li><a href="https://gitee.com/xany/bestshop-php">萤火小程序商城</a></li><li><a href="http://www.weiphp.cn/">WeiPHP</a></li><li><a href="http://www.we7.cc/">微擎</a></li></ul><h3 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h3><ul><li><a href="https://www.zentao.net/"><strong>禅道</strong></a> - 项目管理软件</li><li><a href="https://github.com/jitamin/jitamin">Jitamin</a> - 项目管理系统</li><li><a href="https://github.com/fguillot/kanboard">Kanboard</a> - 项目管理工具</li><li><a href="https://github.com/Alanaktion/phproject">Phproject</a> - 项目管理系统</li></ul><h3 id="构建-部署"><a href="#构建-部署" class="headerlink" title="构建/部署"></a>构建/部署</h3><ul><li><p><a href="https://github.com/phacility/phabricator"><strong>Phabricator</strong></a> - 用于敏捷开发的项目管理软件, 含代码托管、Code Review、任务管理、文档管理、问题跟踪、构建与持续集成、博客、内部聊天等</p><blockquote><ul><li><a href="https://phabricator.webfuns.net/">Phabricator 中文站</a> - 含中文文档、全部插件演示和配置文档</li></ul></blockquote></li><li><p><a href="https://github.com/meolu/walle-web">Walle</a> - Web系统部署工具</p></li><li><p><a href="https://github.com/Piplin/Piplin">Piplin</a> - 持续集成系统</p></li><li><p><a href="https://github.com/phingofficial/phing">Phing</a> - PHP项目构建工具</p></li><li><p><a href="https://github.com/deployphp/deployer">Deployer</a> - PHP项目部署工具</p></li><li><p><a href="https://github.com/block8/phpci">PHPCI</a> - 持续集成工具</p></li></ul><h2 id="基础框架"><a href="#基础框架" class="headerlink" title="基础框架"></a>基础框架</h2><ul><li><a href="https://github.com/slimphp/Slim"><strong>Slim</strong></a> - 非常优秀的轻量级框架，适合开发小型 API 应用</li><li><a href="https://github.com/symfony/symfony">Symfony</a> - 组件式框架，提供了众多优秀的 PHP 类库</li><li><a href="https://github.com/laravel/laravel">Laravel</a> - 号称最优雅的 PHP 框架</li><li><a href="https://github.com/bcit-ci/CodeIgniter">CodeIgniter</a> - 著名的 MVC 框架</li><li><a href="https://github.com/codeigniter4/CodeIgniter4">CodeIgniter4</a> - CodeIgniter 全新现代版本</li><li><a href="https://github.com/yiisoft/yii2">Yii 2</a></li><li><a href="https://github.com/top-think/think">ThinkPHP 5</a></li><li><a href="https://github.com/zendframework/zendframework">Zend Framework</a></li><li><a href="https://github.com/mikecao/flight">Flight</a> - RESTful 框架</li><li><a href="https://github.com/vlucas/bulletphp">Bullet</a> - RESTful 框架</li><li><a href="http://auraphp.com/">Aura</a> - 包含许多组件</li><li><a href="https://kohanaframework.org/">Kohana</a> - HMVC框架</li><li><a href="https://github.com/walkor/workerman"><strong>Workerman</strong></a> - PHP Socket服务器框架</li><li><a href="https://github.com/OpenIBC/Ohsce">Ohsce</a> - 高可靠性 PHP 通信&amp;控制框架 SOCKET</li><li><a href="https://github.com/php-pm/php-pm">PPM</a> - PHP Process Manager</li><li><a href="https://github.com/shenzhe/zphp">ZPHP</a> - SOA 服务框架</li><li><a href="https://github.com/appserver-io/appserver">appserver.io</a> - 多线程的 PHP 应用服务器</li><li><a href="https://github.com/lixuancn/MeepoPS">MeepoPS</a> - 多进程 SocketService</li><li><a href="https://github.com/kakserpom/phpdaemon">phpDaemon</a> - PHP 异步框架</li><li><a href="https://github.com/Comos/qpm">QPM</a> - Quick PHP 进程管理框架</li><li><a href="https://github.com/youzan/zan">Zan PHP Framework</a> - 有赞团队开源的基于 PHP 协程的网络服务框架 </li><li><a href="http://www.swoole.com/">Swoole</a> - PHP 语言的高性能网络通信框架</li><li><a href="https://github.com/phalcon/cphalcon">Phalcon</a> - 扩展型框架</li><li><a href="https://github.com/reactphp/react">React</a> - 异步框架(PHP 版 node.js)</li><li><a href="https://github.com/phalcon/zephir">Zephir</a> - 可以用近似 PHP 的一种中间代码写程序，然后自动转为 C++，并作为扩展来运行</li><li><a href="https://github.com/laruence/php-yaf">Yaf</a> - 鸟哥写的扩展型框架</li><li><a href="https://github.com/frqnck/apix">APIx</a></li><li><a href="https://github.com/goaop/framework">Go!</a> - PHP AOP 框架</li><li><a href="https://github.com/bcosca/fatfree">Fat-Free Framework</a></li><li><a href="https://github.com/cakephp/cakephp">CakePHP</a> - 老牌框架</li><li><a href="https://github.com/lizhichao/one">One</a> - 基于 swoole 常驻内存框架</li></ul><h2 id="类库"><a href="#类库" class="headerlink" title="类库"></a>类库</h2><h3 id="未归类-1"><a href="#未归类-1" class="headerlink" title="未归类"></a>未归类</h3><ul><li><a href="https://github.com/Seldaek/monolog">Monolog</a></li><li><a href="http://hoa-project.net/"><strong>Hoa</strong></a> - An extensible set of PHP libraries</li><li><a href="https://github.com/ilya-dev/belt">Belt</a> - 工具函数库</li><li><a href="https://github.com/pawelantczak/php-sitemap-generator">PHP Sitemap Generator</a> - 网站地图生成类</li><li><a href="http://www.lalit.org/lab/convert-php-array-to-xml-with-attributes">Array2XML</a></li><li><a href="http://www.lalit.org/lab/convert-xml-to-array-in-php-xml2array/">XML2Array</a></li><li><a href="http://www.pchart.net/">pChart</a> - 图表生成库</li><li><a href="http://phpqrcode.sourceforge.net/">PHP QR Code</a> - 二维码生成</li><li><a href="http://easybook-project.org/">Easybook</a></li><li><a href="http://hashids.org/php/">hashids</a> - 根据整数生成唯一、不连续的短 ID</li><li><a href="https://github.com/sschiau/Particle">Particle</a> - 唯一 ID 生成器</li><li><a href="https://github.com/overtrue/pinyin">Pinyin</a> - 中文转拼音工具</li><li><a href="https://github.com/ratchetphp/Ratchet/">Ratchet</a> - 创建实时、双向客户端服务器 WebSockets 应用</li><li><a href="https://github.com/netresearch/jsonmapper">JsonMapper</a> - 将内嵌 JSON 结构映射为 PHP 类的库</li><li><a href="https://github.com/silexphp/Pimple">Pimple</a> - 依赖注入容器</li><li><a href="https://github.com/PHP-DI/PHP-DI">PHP-DI</a> - 依赖注入容器</li><li><a href="https://github.com/serbanghita/Mobile-Detect">Mobile Detect</a> - 浏览器环境检测类</li><li><a href="https://github.com/matomo-org/device-detector">DeviceDetector</a> - 浏览器环境检测类</li><li><a href="https://github.com/poliander/cron">PHP Cron Expression Parser</a> - Crontab 格式解析</li><li><a href="https://github.com/box-project/box2">Box</a> - Phar 构建工具</li><li><a href="http://www.phpmyfaq.de/">phpMyFAQ</a> - F.A.Q. 应用</li><li><a href="https://github.com/doubleleft/hook">hook</a> - BaaS 软件</li><li><a href="https://github.com/kalcaddle/KODExplorer">KodExplorer</a> - 基于Web的在线文件管理、代码编辑器</li><li><a href="https://github.com/mattpass/ICEcoder">ICEcoder</a> - Web IDE(基于 Web 的代码编辑器)</li><li><a href="https://github.com/nikic/PHP-Parser">PHP-Parser</a> - PHP 解析器</li><li><a href="https://github.com/Corveda/PHPSandbox">PHPSandbox</a> - 将运行 PHP 作为独立进程的一种方式</li><li><a href="https://github.com/sebastianbergmann/phpcpd">PHPCPD</a> - 在代码中寻找类似模式的工具</li><li><a href="https://github.com/devster/ubench">Ubench</a> - 代码执行效率评测工具</li><li><a href="https://github.com/pear/Text_Diff">Text_Diff</a> - 代码文件比较工具</li><li><a href="https://scrutinizer-ci.com/docs/tools/php/php-analyzer/">PHP Analyzer</a> - 执行和编译器相同的流动分析</li><li><a href="https://github.com/mow/apache2nginx">apache2nginx</a> - 在线转换 apache 配置为 nginx 配置</li><li><a href="https://github.com/ekino/php-mirroring">php-mirroring</a> - Packagist and Github mirroring</li><li><a href="https://github.com/luofei614/SocketLog"><strong>SocketLog</strong></a> - 微信调试、API 调试和 AJAX 的调试的工具，能将日志通过 WebSocket 输出到 Chrome 浏览器的 console 中</li><li><a href="https://github.com/immobiliare/ApnsPHP">ApnsPHP</a> - iOS 推送通知</li><li><a href="https://github.com/clue/php-socket-raw">php-socket-raw</a></li><li><a href="https://github.com/fzaninotto/Faker">Faker</a> - 假数据生成器</li><li><a href="https://github.com/Respect/Validation">Validation</a> - 校验工具</li><li><a href="https://github.com/geocoder-php/Geocoder">Geocoder</a></li><li><a href="https://github.com/bjankord/Style-Guide-Boilerplate">Style-Guide-Boilerplate</a> - 手册制作工具</li><li><a href="https://github.com/coduo/php-humanizer"><strong>PHP Humanizer</strong></a> - 数据格式化（多语言）</li><li><a href="https://github.com/google/recaptcha">reCAPTCHA</a></li><li><a href="https://github.com/wapmorgan/UnifiedArchive">UnifiedArchive</a> - 压缩/解压</li><li><a href="https://github.com/sebastianbergmann/diff">Diff</a> - Diff的PHP实现</li><li><a href="https://github.com/php-ai/php-ml"><strong>PHP-ML</strong></a> - PHP 机器学习库</li><li><a href="https://github.com/thephpleague/geotools">Geotools</a> - GEO地理信息工具</li><li><a href="https://github.com/phpbrew/phpbrew"><strong>PHPBrew</strong></a> - PHP版本&amp;扩展管理工具</li><li><a href="https://github.com/kmvan/x-prober">X-Prober</a> - PHP探针</li><li><a href="https://github.com/mledoze/countries">Countries</a> - World countries in JSON, CSV, XML and YAML.</li><li><a href="https://github.com/vlucas/phpdotenv">PHP dotenv</a> - PHP <code>.env</code> 环境配置管理</li><li><a href="https://github.com/ramsey/uuid">ramsey/uuid</a> - uuid 生成器</li><li><a href="https://github.com/jrgp/linfo">Linfo</a> - Server stats UI/library</li><li><a href="https://github.com/php-casbin/php-casbin">PHP-Casbin</a> - 访问控制框架，支持 ACL、RBAC、ABAC 多种模型</li><li><a href="https://github.com/helei112g/payment">Payment</a> - 一个集成了支付宝支付、微信支付、招商支付的 PHP SDK</li><li><a href="https://github.com/emojione/emojione">EmojiOne</a> - Emoji 表情</li><li><a href="https://github.com/ennnnny/tbk">tbk</a> - 阿里淘宝客SDK</li><li><a href="https://github.com/medz/cors">CORS</a> - PHP CORS (Cross-origin resource sharing) middleware</li><li><a href="https://github.com/schmittjoh/php-option">php-option</a> - PHP Option Type</li><li><a href="https://github.com/paragonie/random_compat">random_compat</a> - PHP 5.x 版本的 <code>random_bytes()</code> 和 <code>random_int()</code></li><li><a href="https://github.com/sebastianbergmann/comparator">Comparator</a> - 对比两个 PHP 变量值是否相等</li><li><a href="https://github.com/sebastianbergmann/object-reflector">Object Reflector</a> - 对象反射</li><li><a href="https://github.com/Stichoza/google-translate-php">Google Translate PHP</a> - 谷歌翻译 API</li></ul><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><ul><li><a href="https://github.com/NoahBuscher/Macaw">Macaw</a> - PHP 路由类</li><li><a href="https://github.com/nikic/FastRoute">FastRoute</a> - PHP 路由类</li><li><a href="https://github.com/anandkunal/ToroPHP">ToroPHP</a> - 微型路由框架</li><li><a href="https://github.com/klein/klein.php">Klein.php</a> - 快速路由</li></ul><h3 id="异步-协程"><a href="#异步-协程" class="headerlink" title="异步/协程"></a>异步/协程</h3><ul><li><a href="https://github.com/amphp/amp">Amp</a> - 非阻塞协程并发框架</li><li><a href="https://github.com/recoilphp/recoil">Recoil</a> - 异步协程框架</li><li><a href="https://github.com/reactphp/promise">Promise</a> - Promises/A implementation for PHP</li><li><a href="https://github.com/guzzle/promises">Guzzle Promises</a> - Promises/A+ library for PHP with synchronous support</li></ul><h3 id="前端相关"><a href="#前端相关" class="headerlink" title="前端相关"></a>前端相关</h3><ul><li><a href="https://github.com/sabberworm/PHP-CSS-Parser">PHP-CSS-Parser</a> - PHP 实现的 CSS 解析器</li><li><a href="https://github.com/mrclay/minify">Minify</a> - JS 和 CSS 压缩工具</li><li><a href="http://mun.ee/">Munee</a> - 一个集图片尺寸调整、CSS-JS 合并/压缩、缓存等功能于一身的PHP库</li></ul><h3 id="聊天-短信"><a href="#聊天-短信" class="headerlink" title="聊天/短信"></a>聊天/短信</h3><ul><li><a href="https://github.com/overtrue/easy-sms">Easy SMS</a> - 短信发送组件</li><li><a href="https://github.com/toplan/phpsms">PhpSms</a> - 短信发送库</li><li><a href="https://github.com/botman/botman">BotMan</a> - 一个框架 PHP 库构建聊天机器人</li></ul><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><ul><li><a href="https://github.com/Rakume/pangu.php">pangu.php</a> - 自动添加文本的空格</li><li><a href="https://github.com/yosymfony/toml">TOML parser for PHP</a></li><li><a href="https://github.com/symfony/yaml">Yaml</a></li><li><a href="https://github.com/lizhichao/VicWord">VicWord</a> - 分词</li><li><a href="https://github.com/VerbalExpressions/PHPVerbalExpressions">PHPVerbalExpressions</a> - 更优雅的书写正则方式，就像 SQL Builder 一样</li></ul><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul><li><a href="https://github.com/mirahman/PHP-Data-Structure-and-Algorithms">PHP-Data-Structure-and-Algorithms</a> - PHP 数据结构和算法</li></ul><h3 id="代码检查-静态分析"><a href="#代码检查-静态分析" class="headerlink" title="代码检查/静态分析"></a>代码检查/静态分析</h3><ul><li><a href="https://github.com/phpstan/phpstan">PHPStan</a> - 静态分析工具，检测代码 Bug</li><li><a href="https://github.com/squizlabs/php_codesniffer">PHP_CodeSniffer</a> - PHP/JavaScript/CSS 代码规范检查工具</li><li><a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">PHP-CS-Fixer</a> - PHP 代码规范检测</li><li><a href="https://github.com/phpmd/phpmd">PHPMD</a> - PHP Mess Detector(PHP 问题探测器)</li><li><a href="https://github.com/PHPCheckstyle/phpcheckstyle">PHPCheckstyle</a> - 编码风格检测软件</li><li><a href="https://github.com/phpro/grumphp">GrumPHP</a> - 代码质量检测工具</li><li><a href="https://github.com/sebastianbergmann/php-code-coverage">CodeCoverage</a> - 代码覆盖率报表工具</li><li><a href="https://github.com/phpmetrics/PhpMetrics">PhpMetrics</a> - 可视化静态分析结果</li><li><a href="https://github.com/sebastianbergmann/phploc">PHPLOC</a> - 快速统计分析 PHP 项目结构</li></ul><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><ul><li><a href="https://github.com/thephpleague/climate"><strong>CLImate</strong></a> - 更好的命令行输出</li><li><a href="https://github.com/facebookarchive/phpsh">phpsh</a></li><li><a href="https://github.com/bobthecow/psysh">psysh</a></li><li><a href="https://github.com/borisrepl/boris">Boris</a></li><li><a href="https://github.com/c9s/CLIFramework">CLIFramework</a> - CLI 框架</li><li><a href="https://github.com/inhere/php-console">console tool</a> - PHP 命令行应用库</li><li><a href="https://github.com/clue/php-commander">clue/commander</a></li><li><a href="https://github.com/symfony/console">symfony/console</a></li></ul><h3 id="错误-异常"><a href="#错误-异常" class="headerlink" title="错误/异常"></a>错误/异常</h3><ul><li><a href="https://github.com/filp/whoops">Whoops</a> - 异常/错误处理类</li><li><a href="https://github.com/thephpleague/booboo">BooBoo</a> - 异常/错误处理类</li><li><a href="https://github.com/JosephLenton/PHP-Error">PHP-Error</a></li></ul><h3 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h3><ul><li><a href="https://github.com/maximebf/php-debugbar">PHP Debug Bar</a></li><li><a href="https://github.com/PeeHaa/OpCacheGUI">OpCacheGUI</a> - 漂亮且支持权限验证的 OPcache 界面管理工具</li><li><a href="https://github.com/rlerdorf/opcache-status">OPcache Status</a> - 单文件的 OPcache 状态配置管理</li><li><a href="https://www.php.net/manual/zh/book.phpdbg.php">phpdbg</a> - 内置的调试工具</li></ul><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ul><li><a href="https://github.com/caoym/phprs-restful">phprs</a> - 一款轻量、类 jax-rs、实用的 PHP 框架</li><li><a href="https://github.com/webonyx/graphql-php">graphql-php</a> - GraphQL 参考实现的 PHP 移植版本</li><li><a href="https://github.com/dingo/api">Dingo API</a> - A RESTful API package for the Laravel and Lumen frameworks</li></ul><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><ul><li><a href="https://github.com/acmephp/acmephp"><strong>Acme PHP</strong></a> - <code>Let&#39;s Encrypt</code> SSL 免费证书获取&amp;更新工具</li><li><a href="https://security.sensiolabs.org/">Security Advisories Checker</a> - 项目安全检测工具</li><li><a href="https://github.com/nbs-system/php-malware-finder">PHP Malware Finder</a> - 检测  webshell 和恶意软件混淆代码的工具</li><li><a href="https://github.com/danielmiessler/SecLists">SecLists</a> - 安全测试者的手</li><li><a href="https://github.com/psecio/iniscan">Iniscan</a> - <code>php.ini</code> 安全配置检测</li></ul><h3 id="加密-解密"><a href="#加密-解密" class="headerlink" title="加密/解密"></a>加密/解密</h3><ul><li><a href="https://github.com/defuse/php-encryption">php-encryption</a></li><li><a href="https://github.com/ircmaxell/password_compat">password_compat</a> - PHP版本 5.3.7 以上的 <code>password_*</code> 函数实现</li><li><a href="https://github.com/acmephp/ssl">Acme PHP SSL library</a> - SSL 工具</li></ul><h3 id="时间-日期"><a href="#时间-日期" class="headerlink" title="时间/日期"></a>时间/日期</h3><ul><li><a href="https://github.com/overtrue/chinese-calendar">Chinese calendar</a> - 中国农历（阴历）与阳历（公历）转换与查询工具</li><li><a href="https://github.com/briannesbitt/Carbon">Carbon</a> - 时间日期处理类</li></ul><h3 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h3><ul><li><a href="https://github.com/overtrue/wechat">EasyWeChat</a> - 微信 SDK</li><li><a href="https://github.com/dodgepudding/wechat-php-sdk">Wechat-PHP-SDK</a></li><li><a href="https://github.com/lixuancn/LaneWeChat">LaneWeChat</a></li><li><a href="https://github.com/HanSon/vbot">Vbot</a> - Web 微信机器人</li></ul><h3 id="网页抓取-代理"><a href="#网页抓取-代理" class="headerlink" title="网页抓取/代理"></a>网页抓取/代理</h3><ul><li><a href="https://github.com/JayBizzle/Crawler-Detect">CrawlerDetect</a> - 网页爬虫检查</li><li><a href="https://github.com/mvdbos/php-spider">PHP-Spider</a></li><li><a href="https://github.com/jae-jae/QueryList">QueryList</a></li><li><a href="https://github.com/fabpot/Goutte">Goutte</a> - 一个抓取网站数据的 PHP 库</li><li><a href="https://github.com/mmerian/phpcrawl">PHPcrawer</a></li><li><a href="https://github.com/blackfireio/player">Blackfire Player</a> - Blackfire Player is a powerful Web Crawling, Web Testing, and Web Scraper application</li></ul><h3 id="URL-Domain"><a href="#URL-Domain" class="headerlink" title="URL/Domain"></a>URL/Domain</h3><ul><li><a href="https://github.com/Cydrobolt/polr">Polr</a> - 开源短链工具</li><li><a href="https://github.com/mikecao/shorty">Shorty</a> - 开源短链工具</li><li><a href="https://github.com/jeremykendall/php-domain-parser">PHP Domain Parser</a> - 域名解析</li><li><a href="https://github.com/layershifter/TLDExtract">TLDExtract</a> - 顶级域名解析</li><li><a href="https://github.com/Whoisdoma/WhoisParser">WhoisParser</a> - Lookup domain names, IP addresses and AS numbers by WHOIS</li><li><a href="https://github.com/Whoisdoma/DomainParser">DomainParser</a> - A domain name parser to parse and to validate a domain name</li><li><a href="https://github.com/adriengibrat/torrent-rw">Torrent RW</a> - Torrent 文件读写</li></ul><h3 id="OAuth"><a href="#OAuth" class="headerlink" title="OAuth"></a>OAuth</h3><ul><li><a href="https://github.com/bshaffer/oauth2-server-php">oauth2-server-php</a></li><li><a href="http://code.google.com/p/oauth2-php/">OAuth2-PHP</a></li><li><a href="https://github.com/opauth/opauth">Opauth</a></li><li><a href="https://github.com/thephpleague/oauth2-server">OAuth 2.0 Server</a></li><li><a href="https://github.com/thephpleague/oauth2-client">OAuth 2.0 Client</a></li><li><a href="https://github.com/overtrue/socialite">Socialite</a></li><li><a href="https://github.com/hwi/HWIOAuthBundle">HWIOAuthBundle</a> - OAuth client integration for Symfony</li></ul><h3 id="Auth"><a href="#Auth" class="headerlink" title="Auth"></a>Auth</h3><ul><li><a href="https://github.com/tymondesigns/jwt-auth">jwt-auth</a> - JSON Web Token Authentication for Laravel &amp; Lumen</li></ul><h3 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a>API文档</h3><ul><li><a href="https://github.com/php-annotations/php-annotations">php-annotations</a> - 代码注解解析</li><li><a href="https://github.com/ApiGen/ApiGen">ApiGen</a> - 项目文档生成器</li><li><a href="https://github.com/FriendsOfPHP/Sami">Sami</a> - 项目文档生成工具</li><li><a href="https://github.com/nelmio/NelmioApiDocBundle">NelmioApiDocBundle</a> - REST API 文档生成</li><li><a href="https://github.com/Luracast/Restler"><strong>Restler</strong></a> - REST API 文档生成</li><li><a href="http://zircote.com/swagger-php">Swagger-PHP</a></li><li><a href="https://github.com/star7th/showdoc">ShowDoc</a></li><li><a href="https://github.com/phalapi/phalapi">PhalApi</a> - PHP 接口开发框架</li><li><a href="https://github.com/gouguoyin/phprap">PHPRAP</a> - API 接口文档管理系统</li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li><a href="https://github.com/doctrine">Doctine</a> - PHP 数据库 ORM（该组织还有其他优秀的开源项目）</li><li><a href="https://github.com/gabordemooij/redbean">RedBeanPHP</a> - ORM 映射框架</li><li><a href="https://github.com/robmorgan/phinx">Phinx</a> - 数据库迁移工具（支持 MySQL、PostgreSQL、SQLite、Microsoft SQL Server）</li><li><a href="https://github.com/vrana/adminer">Adminer</a> - 单文件 MySQL 管理客户端</li><li><a href="https://github.com/phpmyadmin/phpmyadmin">phpMyAdmin</a></li><li><a href="https://github.com/phpmyadmin/sql-parser">SQL Parser</a> - SQL 解析器</li><li><a href="https://github.com/catfan/Medoo">Medoo</a> - 最轻量级的 PHP 数据库框架</li><li><a href="https://github.com/dbtk/schema-loader">schema-loader</a> - Load database schema from an XML file</li><li><a href="https://github.com/ifsnop/mysqldump-php">MySQLDump-PHP</a> - 纯 PHP 实现的mysqldump工具</li><li><a href="https://github.com/shadowhand/latitude">Latitude</a> - SQL 语句构建工具</li><li><a href="https://github.com/mongodb/mongo-php-library">MongoDB PHP Library</a></li></ul><h3 id="队列-任务"><a href="#队列-任务" class="headerlink" title="队列/任务"></a>队列/任务</h3><ul><li><a href="https://github.com/Codegyre/Robo">RoboTask</a> - 面向对象的 PHP 任务运行器</li><li><a href="https://github.com/CoderKungfu/php-queue">PHP-Queue</a> - 管理队列后端的应用</li><li><a href="https://github.com/consolidation/Robo">RoboTask</a> - PHP 后台任务组件</li><li><a href="https://github.com/taskphp/task">Task</a> - 一个灵感来源于 Grunt 和 Gulp 的纯 PHP 任务运行器</li><li><a href="https://github.com/chrisboulton/php-resque">php-resque</a> - PHP 版Resque</li><li><a href="https://github.com/qq8044023/taskPHP">taskPHP</a> - 基于原生态 PHP 开发的定时计划任务框架</li><li><a href="https://github.com/SegmentFault/SimpleFork">SimpleFork</a> - 精简的 PHP 多进程控制库</li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul><li><a href="https://github.com/doctrine/cache">Doctrine Cache</a></li><li><a href="https://github.com/PHPSocialNetwork/phpfastcache">phpFastCache</a> - 缓存操作类</li><li><a href="https://github.com/tedious/Stash">Stash</a></li><li><a href="https://github.com/nrk/predis">Predis</a> - 纯 PHP 实现的 Redis 操作库</li><li><a href="https://github.com/thephpleague/monga">Monga</a> - 纯 PHP 实现的 MongoDB 操作库</li><li><a href="https://github.com/rogeriopvl/php-lrucache">php-lrucache</a> - LRU 算法缓存实现</li><li><a href="https://github.com/phpredis/phpredis">PhpRedis</a> - Redis 客户端扩展</li></ul><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ul><li><a href="https://github.com/michelf/php-markdown">PHP Markdown</a></li><li><a href="https://github.com/SegmentFault/HyperDown">HyperDown</a></li><li><a href="https://github.com/erusev/parsedown">Parsedown</a> - Markdown 解析类</li><li><a href="https://github.com/thephpleague/commonmark">CommonMark</a></li><li><a href="https://github.com/thephpleague/html-to-markdown">HTML To Markdown for PHP</a></li></ul><h3 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h3><ul><li><a href="http://swiftmailer.org/">Swift Mailer</a> - PHP 邮件库</li><li><a href="https://github.com/PHPMailer/PHPMailer">PHPMailer</a></li></ul><h3 id="Office"><a href="#Office" class="headerlink" title="Office"></a>Office</h3><ul><li><a href="https://github.com/PHPOffice/PHPWord">PHPWord</a></li><li><a href="https://github.com/PHPOffice/PhpSpreadsheet">PHPExcel</a></li><li><a href="https://github.com/PHPOffice/PHPPresentation">PHPPowerPoint</a></li><li><a href="https://github.com/thephpleague/csv">CSV</a> - CSV 操作类</li><li><a href="https://github.com/faisalman/simple-excel-php">Simple Excel</a></li><li><a href="https://github.com/PHPOffice/PHPProject">PHPProject</a></li><li><a href="https://github.com/PHPOffice/PHPVisio">PHPVisio</a></li></ul><h3 id="PDF-条形码"><a href="#PDF-条形码" class="headerlink" title="PDF/条形码"></a>PDF/条形码</h3><ul><li><a href="http://www.barcodephp.com/">Barcode</a> - Barcode 生成工具</li><li><a href="https://github.com/KnpLabs/snappy"><strong>Snappy</strong></a> - 根据 URL 或 HTML 页面生成图片或 PDF 格式的缩略图</li><li><a href="https://github.com/tecnickcom/TCPDF">TCPDF</a> - 使用官方 PDF 类生成 PDF 文档和条形码生成工具</li><li><a href="https://github.com/lsolesen/fpdf">FPDF</a> - 利用纯 PHP 代码生成 PDF 文件</li><li><a href="https://github.com/smalot/pdfparser">PDFParser</a> - PDF 文档解析库</li><li><a href="https://github.com/dompdf/dompdf">Dompdf</a></li><li><a href="https://github.com/spatie/browsershot">Browsershot</a> - 将 HTML 转换为图像、PDF 或字符串</li></ul><h3 id="HTTP-网络通信"><a href="#HTTP-网络通信" class="headerlink" title="HTTP/网络通信"></a>HTTP/网络通信</h3><ul><li><a href="https://github.com/guzzle/guzzle">Guzzle</a> - PHP HTTP client and webservice framework</li><li><a href="https://github.com/rmccue/Requests">Requests for PHP</a> - HTTP 库</li><li><a href="https://github.com/Mashape/unirest-php">Unirest</a> - HTTP 开发库</li><li><a href="https://github.com/php-curl-class/php-curl-class">PHP Curl Class</a> - 支持并发的 PHP Curl 封装类</li><li><a href="https://github.com/guzzle/RingPHP">RingPHP</a></li><li><a href="https://github.com/ares333/php-curlmulti">php-curlmulti</a> - 国产 CURL 并发类</li></ul><ul><li><a href="https://github.com/phpseclib/phpseclib">phpseclib</a> - 安全通信库</li><li><a href="https://github.com/symfony/http-foundation">symfony/http-foundation</a></li><li><a href="https://github.com/phpWhois/phpWhois">phpWhois</a> - Whois 信息查询</li></ul><h3 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h3><ul><li><a href="http://www.phpspec.net/">PHPSpec</a> - SpecBDD 测试框架</li><li><a href="http://behat.org/">Behat</a> - StoryBDD 测试框架</li><li><a href="http://codeception.com/">Codeception</a> - BDD 全栈测试框架</li><li><a href="https://github.com/sebastianbergmann/phpunit">PHPUnit</a> - 单元测试框架</li><li><a href="https://github.com/atoum/atoum">atoum</a> - 单元测试框架</li><li><a href="https://github.com/Enhance-PHP/Enhance-PHP">Enhance-PHP</a> - 单元测试框架</li><li><a href="https://github.com/mockery/mockery">Mockery</a></li></ul><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><ul><li><a href="http://twig.sensiolabs.org/">Twig</a></li><li><a href="http://www.smarty.net/">Smarty</a></li><li><a href="http://platesphp.com/">Plates</a></li><li><a href="https://github.com/bobthecow/mustache.php">Mustache</a></li><li><a href="http://phptal.org/">PHPTAL</a></li><li><a href="http://dwoo.org/">Dwoo</a></li><li><a href="https://github.com/nette/latte">Latte</a></li><li><a href="https://github.com/box/brainy">Brainy</a></li><li><a href="https://github.com/auraphp/Aura.View">Aura.View</a></li></ul><h3 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h3><ul><li><a href="https://github.com/avalanche123/Imagine">Imagine</a> - 图片操作类</li><li><a href="https://github.com/nielse63/php-image-cache">Image Cache</a> - 图片压缩、缓存类</li><li><a href="https://github.com/Sybio/ImageWorkshop">ImageWorkshop</a> - 管理和操作图片的 PHP 类库</li><li><a href="https://github.com/Intervention/image">Intervention Image</a> - 功能强大的图片操作类</li><li><a href="http://mun.ee/">Munee</a> - 图片尺寸调整、CSS-JS 合并/压缩、缓存等功能</li><li><a href="http://bastianallgeier.com/gantti">Gantti</a> - 甘特图生成</li><li><a href="http://wideimage.sourceforge.net/">Wideimage</a> - 图像处理库</li><li><a href="https://github.com/lincanbin/Material-Design-Avatars">Material Design Avatars</a> - PHP 头像生成类</li><li><a href="http://www.shearphoto.com/">ShearPhoto</a> - 截图工具</li><li><a href="https://github.com/thephpleague/glide">Glide</a> - 基于 HTTP 的图像操作</li><li><a href="https://github.com/thephpleague/color-extractor">ColorExtractor</a> - 获取图片中的颜色</li><li><a href="https://github.com/Gregwar/Captcha">Captcha</a> - 验证码</li><li><a href="https://github.com/electerious/Lychee">Lychee</a> - 图片管理系统</li></ul><h2 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h2><blockquote><p>最好用的 PHP 包管理器，没有之一</p></blockquote><ul><li>GitHub: <a href="https://github.com/composer/composer">https://github.com/composer/composer</a></li><li>官方站: <a href="https://getcomposer.org/">https://getcomposer.org</a></li><li>中文站: <a href="http://www.phpcomposer.com/">http://www.phpcomposer.com</a></li><li>包仓库: <a href="https://packagist.org/">https://packagist.org</a></li><li><a href="https://github.com/composer/installers">Composer Installers</a>: 多框架 Composer 库安装器</li><li>中国全量镜像: <a href="https://pkg.phpcomposer.com/">https://pkg.phpcomposer.com</a></li><li><a href="https://github.com/jakoch/awesome-composer">Awesome Composer</a>: A curated list of resources for Composer, Packagist, Satis, Plugins, Scripts, Videos, Tutorials</li><li><a href="https://github.com/zencodex/composer-mirror">ZComposer</a> - Composer 镜像，有助于了解 Composer 镜像的原理</li></ul><h2 id="PHP-扩展"><a href="#PHP-扩展" class="headerlink" title="PHP 扩展"></a>PHP 扩展</h2><ul><li><a href="https://github.com/FriendsOfPHP/pickle"><strong>pickle</strong></a> - PHP 扩展安装工具</li><li><a href="https://github.com/Qihoo360/phptrace">PHPTrace</a> - 跟踪和分析 PHP 脚本的工具</li><li><a href="https://github.com/phalcon/zephir">Zephir</a> - 编写 PHP 扩展的编程语言</li><li><a href="https://github.com/laruence/yaconf">Yaconf</a> - 高性能的配置管理扩展</li><li><a href="https://github.com/liexusong/php-beast">php-beast</a> - PHP 源码加密模块</li></ul><h2 id="PHP相关软件-工具"><a href="#PHP相关软件-工具" class="headerlink" title="PHP相关软件/工具"></a>PHP相关软件/工具</h2><ul><li><a href="https://github.com/laradock/laradock"><strong>Laradock</strong></a> - PHP Docker 开发环境工具</li><li><a href="https://lnmp.org/">LNMP一键安装包(1)</a></li><li><a href="https://github.com/lj2007331/lnmp">LNMP一键安装包(2)</a></li><li><a href="https://oneinstack.com/"><strong>OneinStack</strong></a> - 一键 PHP/JAVA 环境安装工具</li><li><a href="https://php-osx.liip.ch/">MacOS PHP安装工具</a></li><li><a href="https://github.com/wxphp/wxphp">wxPHP</a> - 用 PHP 开发桌面应用</li><li><a href="http://www.upupw.net/">UPUPW</a> - PHP 环境集成包</li><li><a href="http://www.phpbench.com/">PHP Benchmark</a> - PHP 性能测试工具</li><li><a href="http://www.firephp.org/">FirePHP</a> - PHP Debug 工具</li><li><a href="https://github.com/apache/thrift/tree/master/lib/php">Thrift for PHP</a></li><li><a href="https://github.com/rybakit/msgpack.php">msgpack.php</a></li><li><a href="https://github.com/hprose/hprose-php">Hprose for PHP</a> - 高性能的跨语言序列化与 RPC 引擎</li><li><a href="http://sourceforge.net/projects/hessianphp">HessianPHP</a> - 采用二进制格式传输的服务框架</li><li><a href="https://github.com/Neeke/JsonNet">JsonNet-PHP</a> - Google Jsonnet 对 PHP 的支持扩展</li><li><a href="https://github.com/benmatselby/sublime-phpcs">sublime-phpcs</a> - Sublime Text 的 PHP 代码格式检查插件</li></ul>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GO语言语法入门篇</title>
    <link href="/2017/06/15/Golang/GO%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <url>/2017/06/15/Golang/GO%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h5 id="GO语言语法入门篇"><a href="#GO语言语法入门篇" class="headerlink" title="GO语言语法入门篇"></a>GO语言语法入门篇</h5><p>课程地址：<a href="https://www.imooc.com/learn/968">https://www.imooc.com/learn/968</a></p><p><img src="https://img-blog.csdnimg.cn/20190617085622206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085637240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2019061708564567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085723299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085743963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085752627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085805632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085911739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085932216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085944782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617085950368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019061709000264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090008810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090013779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090019236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090026145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090033652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090039467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090045655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090052935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617090058564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang之文本编码处理</title>
    <link href="/2017/06/15/Golang/Golang%E4%B9%8B%E6%96%87%E6%9C%AC%E7%BC%96%E7%A0%81%E5%A4%84%E7%90%86/"/>
    <url>/2017/06/15/Golang/Golang%E4%B9%8B%E6%96%87%E6%9C%AC%E7%BC%96%E7%A0%81%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>课程地址：<a href="https://www.imooc.com/coursescore/305">https://www.imooc.com/coursescore/305</a></p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fileExists</span><span class="hljs-params">(filename <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>_, err := os.Stat(filename)<br><span class="hljs-keyword">return</span> err == <span class="hljs-literal">nil</span> || os.IsExist(err)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">copyFileAction</span><span class="hljs-params">(src, dst <span class="hljs-keyword">string</span>, showProgress, force <span class="hljs-keyword">bool</span>)</span></span>  &#123;<br><span class="hljs-keyword">if</span> !force &#123;<br><span class="hljs-keyword">if</span> fileExists(dst) &#123;<br>fmt.Println(<span class="hljs-string">&quot;%s exists override ? y/n\n&quot;</span>, dst)<br>reader := bufio.NewReader(os.Stdin)<br>data, _, _ := reader.ReadLine()<br><br><span class="hljs-keyword">if</span> strings.TrimSpace(<span class="hljs-keyword">string</span>(data)) != <span class="hljs-string">&quot;y&quot;</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br><br>copyFile(src, dst)<br><br><span class="hljs-keyword">if</span> showProgress &#123;<br>fmt.Println(<span class="hljs-string">&quot;&#x27;%s&#x27; -&gt; &#x27;%s&#x27;\n&quot;</span>, src, dst)<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">copyFile</span><span class="hljs-params">(src, dst <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(w <span class="hljs-keyword">int64</span>, err error)</span></span>  &#123;<br>srcFile, err := os.Open(src)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">defer</span> srcFile.Close()<br><br>dstFile, err := os.Create(dst)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">defer</span> dstFile.Close()<br><br><span class="hljs-keyword">return</span> io.Copy(dstFile, srcFile)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> showProgress, force <span class="hljs-keyword">bool</span><br><br><span class="hljs-comment">// 定义命令行参数</span><br>flag.BoolVar(&amp;force, <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;force copy when existing&quot;</span>)<br>flag.BoolVar(&amp;showProgress, <span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;explain what is being done&quot;</span>)<br><br>flag.Parse()<br><br><span class="hljs-comment">// 非法命令行数量检测</span><br><span class="hljs-keyword">if</span> flag.NArg() &lt; <span class="hljs-number">2</span> &#123;<br>flag.Usage()<br><span class="hljs-keyword">return</span><br>&#125;<br><br>copyFileAction(flag.Arg(<span class="hljs-number">0</span>), flag.Arg(<span class="hljs-number">1</span>), showProgress, force)<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式之系统底层原理</title>
    <link href="/2017/04/20/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B9%8B%E7%B3%BB%E7%BB%9F%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <url>/2017/04/20/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B9%8B%E7%B3%BB%E7%BB%9F%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>分布式之系统底层原理：<a href="https://mp.weixin.qq.com/s/KKrxuVCrjlXXWMPTXQ-fvA">https://mp.weixin.qq.com/s/KKrxuVCrjlXXWMPTXQ-fvA</a></p>]]></content>
    
    
    <categories>
      
      <category>分布式之系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式之系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus入门2</title>
    <link href="/2016/06/17/Java/MyBatis/MyBatis-Plus%E5%85%A5%E9%97%A82/"/>
    <url>/2016/06/17/Java/MyBatis/MyBatis-Plus%E5%85%A5%E9%97%A82/</url>
    
    <content type="html"><![CDATA[<h4 id="查询方法"><a href="#查询方法" class="headerlink" title="查询方法"></a>查询方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mp;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.Wrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Wrappers;<br><span class="hljs-keyword">import</span> com.mp.dao.UserMapper;<br><span class="hljs-keyword">import</span> com.mp.entity.User;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> mohuani</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-12-25 11:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RetrieveTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectById</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = userMapper.selectById(<span class="hljs-number">1088250446457389058L</span>);<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectBatchIds</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Long&gt; list = Arrays.asList(<span class="hljs-number">1088248166370832385L</span>, <span class="hljs-number">1094590409767661570L</span>, <span class="hljs-number">1209509417456001025L</span>);<br>        List&lt;User&gt; userList = userMapper.selectBatchIds(list);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByMap</span><span class="hljs-params">()</span> </span>&#123;<br>        Map&lt;String, Object&gt; columnMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        columnMap.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;李艺伟&quot;</span>);<br>        columnMap.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">28</span>);<br>        List&lt;User&gt; userList = userMapper.selectByMap(columnMap);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1、名字中包含雨并且年龄小于40</span><br><span class="hljs-comment">     * name like &#x27;%雨%&#x27; and age&lt;40</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;雨&quot;</span>).lt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">40</span>);<br><br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 2、名字中包含雨年并且龄大于等于20且小于等于40并且email不为空</span><br><span class="hljs-comment">     *    name like &#x27;%雨%&#x27; and age between 20 and 40 and email is not null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper2</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;雨&quot;</span>).between(<span class="hljs-string">&quot;age&quot;</span> ,<span class="hljs-number">20</span> ,<span class="hljs-number">40</span>).isNotNull(<span class="hljs-string">&quot;email&quot;</span>);<br><br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 3、名字为王姓或者年龄大于等于25，按照年龄降序排列，年龄相同按照id升序排列</span><br><span class="hljs-comment">     *    name like &#x27;王%&#x27; or age&gt;=25 order by age desc,id asc</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper3</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.likeRight(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;王&quot;</span>).or().gt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">25</span>).orderByDesc(<span class="hljs-string">&quot;age&quot;</span>).orderByAsc(<span class="hljs-string">&quot;id&quot;</span>);<br><br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 4、创建日期为2019年2月14日并且直属上级为名字为王姓</span><br><span class="hljs-comment">     *       date_format(create_time,&#x27;%Y-%m-%d&#x27;)=&#x27;2019-02-14&#x27; and manager_id in (select id from user where name like &#x27;王%&#x27;)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper4</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.apply(<span class="hljs-string">&quot;date_format(create_time, &#x27;%Y-%m-%d&#x27;) = &#123;0&#125;&quot;</span>, <span class="hljs-string">&quot;2019-02-14&quot;</span>)<br>                .inSql(<span class="hljs-string">&quot;manager_id&quot;</span>, <span class="hljs-string">&quot;select id from user where name like &#x27;王%&#x27;&quot;</span>);<br><br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 5、名字为王姓并且（年龄小于40或邮箱不为空）</span><br><span class="hljs-comment">     *     name like &#x27;王%&#x27; and (age&lt;40 or email is not null)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper5</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.likeRight(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;王&quot;</span>).and(userQueryWrapper -&gt; userQueryWrapper.gt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">40</span>).or().isNotNull(<span class="hljs-string">&quot;email&quot;</span>));<br><br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 6、名字为王姓或者（年龄小于40并且年龄大于20并且邮箱不为空）</span><br><span class="hljs-comment">     *     name like &#x27;王%&#x27; or (age&lt;40 and age&gt;20 and email is not null)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper6</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.likeRight(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;王&quot;</span>).or(userQueryWrapper -&gt; userQueryWrapper.lt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">40</span>).gt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>).isNotNull(<span class="hljs-string">&quot;email&quot;</span>));<br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 7、（年龄小于40或邮箱不为空）并且名字为王姓</span><br><span class="hljs-comment">     *     (age&lt;40 or email is not null) and name like &#x27;王%&#x27;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper7</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.nested(userQueryWrapper -&gt; userQueryWrapper.lt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">40</span>).or().isNotNull(<span class="hljs-string">&quot;email&quot;</span>))<br>                .likeRight(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;王&quot;</span>);<br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 8、年龄为30、31、34、35</span><br><span class="hljs-comment">     *     age in (30、31、34、35)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper8</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.in(<span class="hljs-string">&quot;age&quot;</span>, Arrays.asList(<span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>));<br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 9、只返回满足条件的其中一条语句即可</span><br><span class="hljs-comment">     * limit 1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapper9</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.in(<span class="hljs-string">&quot;age&quot;</span>, Arrays.asList(<span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>)).last(<span class="hljs-string">&quot;limit 1&quot;</span>);<br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 二、select中字段不全部出现的查询</span><br><span class="hljs-comment">     * 10.1、名字中包含雨并且年龄小于40(需求1加强版)</span><br><span class="hljs-comment">     *     第一种情况：select id,name</span><br><span class="hljs-comment">     *     from user</span><br><span class="hljs-comment">     *     where name like &#x27;%雨%&#x27; and age&lt;40</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapperSupper</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.select(<span class="hljs-string">&quot;id, name&quot;</span>).like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;雨&quot;</span>).lt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">40</span>);<br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 10.2第二种情况：select id,name,age,email</span><br><span class="hljs-comment">     *     from user</span><br><span class="hljs-comment">     *     where name like &#x27;%雨%&#x27; and age&lt;40</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapperSupper2</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;雨&quot;</span>).lt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">40</span>)<br>                .select(User.class, tableFieldInfo -&gt; !tableFieldInfo.getColumn().equals(<span class="hljs-string">&quot;create_time&quot;</span>) &amp;&amp;<br>                        !tableFieldInfo.getColumn().equals(<span class="hljs-string">&quot;manager_id&quot;</span>));<br>        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapperMaps</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.select(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>).like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;雨&quot;</span>).lt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">40</span>);<br><br>        List&lt;Map&lt;String, Object&gt;&gt; userList = userMapper.selectMaps(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 11、按照直属上级分组，查询每组的平均年龄、最大年龄、最小年龄。</span><br><span class="hljs-comment">     * 并且只取年龄总和小于500的组。</span><br><span class="hljs-comment">     * select avg(age) avg_age,min(age) min_age,max(age) max_age</span><br><span class="hljs-comment">     * from user</span><br><span class="hljs-comment">     * group by manager_id</span><br><span class="hljs-comment">     * having sum(age) &lt;500</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByWrapperMaps2</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.select(<span class="hljs-string">&quot;avg(age) avg_age&quot;</span>, <span class="hljs-string">&quot;min(age) min_age&quot;</span>, <span class="hljs-string">&quot;max(age) max_age&quot;</span>)<br>                .groupBy(<span class="hljs-string">&quot;manager_id&quot;</span>).having(<span class="hljs-string">&quot;sum(age)&lt;&#123;0&#125;&quot;</span>, <span class="hljs-number">500</span>);<br><br>        List&lt;Map&lt;String, Object&gt;&gt; userList = userMapper.selectMaps(queryWrapper);<br>        userList.forEach(System.out::println);<br>    &#125;<br>    <br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>实体作为条件构造器构造方法的参数时</strong></p><ul><li>实体参数和条件构造器构造的条件互不干扰，都会拼接到SQL语句里面，所以用的时候选择其中的一种方式就行了。</li></ul><p><strong>allEq</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">allEq(Map&lt;R, V&gt; params)<br>allEq(Map&lt;R, V&gt; params, <span class="hljs-keyword">boolean</span> null2IsNull)<br>allEq(<span class="hljs-keyword">boolean</span> condition, Map&lt;R, V&gt; params, <span class="hljs-keyword">boolean</span> null2IsNull)<br></code></pre></div></td></tr></table></figure><ul><li>全部eq(或个别isNull)</li></ul><blockquote><p>params : key为数据库字段名,value为字段值<br>null2IsNull : 为true则在map的value为null时调用 isNull 方法,为false时则忽略value为null的</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20191225180435655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参考： <a href="https://mp.baomidou.com/guide/wrapper.html#alleq">https://mp.baomidou.com/guide/wrapper.html#alleq</a></p><p><strong>selectObjs</strong></p><ul><li>只会返回结果集的第一列，其他列不返回，比较鸡肋</li></ul><p><strong>selectCount</strong></p><ul><li>查询总记录数</li></ul><p><strong>selectOne</strong></p><ul><li>返回一个实体对象，如果查询的结果不止一条就会直接报错</li></ul><h4 id="Lambda查询"><a href="#Lambda查询" class="headerlink" title="Lambda查询"></a>Lambda查询</h4><ul><li>编写查询条件的时候我们容易把字段名写错，但是编译检查不出来。使用Lambda的方式，可以减少字段名写错的情况，在编译的时候会直接检测出来。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 第一种构建方式</span><br>LambdaQueryWrapper&lt;User&gt; lambda = <span class="hljs-keyword">new</span> QueryWrapper&lt;User&gt;().lambda();<br><span class="hljs-comment">// 第二种构建方式</span><br>LambdaQueryWrapper&lt;User&gt; userLambdaQueryWrapper = <span class="hljs-keyword">new</span> LambdaQueryWrapper&lt;&gt;();<br><span class="hljs-comment">// 第三种构建方式</span><br>LambdaQueryWrapper&lt;User&gt; lambdaQuery = Wrappers.&lt;User&gt;lambdaQuery();<br></code></pre></div></td></tr></table></figure><p>查询示例代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectLambda</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">// LambdaQueryWrapper&lt;User&gt; lambda = new QueryWrapper&lt;User&gt;().lambda();</span><br>       <span class="hljs-comment">// LambdaQueryWrapper&lt;User&gt; userLambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br>       LambdaQueryWrapper&lt;User&gt; lambdaQuery = Wrappers.&lt;User&gt;lambdaQuery();<br>       lambdaQuery.like(User::getName, <span class="hljs-string">&quot;雨&quot;</span>).lt(User::getAge, <span class="hljs-number">40</span>);<br><br>       List&lt;User&gt; userList = userMapper.selectList(lambdaQuery);<br>       userList.forEach(System.out::println);<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *  5.名字为王姓并且（年龄小于40或邮箱不为空）</span><br><span class="hljs-comment">    *     name like &#x27;王%&#x27; and (age&lt;40 or email is not null)</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectLambda2</span><span class="hljs-params">()</span> </span>&#123;<br>       LambdaQueryWrapper&lt;User&gt; lambdaQuery = Wrappers.lambdaQuery();<br>       lambdaQuery.likeRight(User::getName, <span class="hljs-string">&quot;王&quot;</span>)<br>               .and(userLambdaQueryWrapper -&gt; userLambdaQueryWrapper.lt(User::getAge, <span class="hljs-number">40</span>).or().isNotNull(User::getEmail));<br>       List&lt;User&gt; userList = userMapper.selectList(lambdaQuery);<br>       userList.forEach(System.out::println);<br>   &#125;<br><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectLambda3</span><span class="hljs-params">()</span> </span>&#123;<br>       List&lt;User&gt; userList = <span class="hljs-keyword">new</span> LambdaQueryChainWrapper&lt;User&gt;(userMapper)<br>               .like(User::getName, <span class="hljs-string">&quot;雨&quot;</span>).ge(User::getAge, <span class="hljs-number">20</span>).list();<br><br>       userList.forEach(System.out::println);<br>   &#125;<br></code></pre></div></td></tr></table></figure><h4 id="自定义查询"><a href="#自定义查询" class="headerlink" title="自定义查询"></a>自定义查询</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mp.dao;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.Wrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Constants;<br><span class="hljs-keyword">import</span> com.mp.entity.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> mohuani</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-12-24 22:55</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;<br><br><span class="hljs-comment">// 此处的ew，写法是固定的，框架约定的名字</span><br>    <span class="hljs-meta">@Select(&quot;select * from user $&#123;ew.customSqlSegment&#125;&quot;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">selectAll</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;User&gt; wrapper)</span></span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectMy</span><span class="hljs-params">()</span> </span>&#123;<br>       LambdaQueryWrapper&lt;User&gt; lambdaQuery = Wrappers.lambdaQuery();<br>       lambdaQuery.likeRight(User::getName, <span class="hljs-string">&quot;王&quot;</span>)<br>               .and(userLambdaQueryWrapper -&gt; userLambdaQueryWrapper.lt(User::getAge, <span class="hljs-number">40</span>).or().isNotNull(User::getEmail));<br>       List&lt;User&gt; userList = userMapper.selectAll(lambdaQuery);<br>       userList.forEach(System.out::println);<br>   &#125;<br></code></pre></div></td></tr></table></figure><p>也可以通过xml配置自定义查询</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 无条件翻页查询</span><br><span class="hljs-function">IPage&lt;T&gt; <span class="hljs-title">page</span><span class="hljs-params">(IPage&lt;T&gt; page)</span></span>;<br><span class="hljs-comment">// 翻页查询</span><br><span class="hljs-function">IPage&lt;T&gt; <span class="hljs-title">page</span><span class="hljs-params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span></span>;<br><span class="hljs-comment">// 无条件翻页查询</span><br>IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps(IPage&lt;T&gt; page);<br><span class="hljs-comment">// 翻页查询</span><br>IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper);<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">分页查询步骤:<br>1:创建并完善配置类MybatisPlusConfig.java<br>2.实例化Page对象<br> 2.1: Page对象构造函数参数:<br>   1:当前页<br>   2:一页的数量<br>   3.分页总数<br>   4:是否需要查询总条数(false:不查,true:查,少发出一条sql)<br>3.1 使用selectPage 或 selectMapsPage(区别:前者封装进实体类中,后者封装进Map对象中)<br>3.2 如果为多表查询,则需要进行自定义方法,此时需要配置UserMapper接口文件,返回值为IPage类型<br>    注:切记不可返回Page类型,否者代码运行无报错,也能看到sql查询,但是在获取getRecords时无数据<br>   3.2.1 IPage&lt;User&gt; selectAllByPage(Page&lt;User&gt; page, @Param(Constants.WRAPPER) Wrapper&lt;User&gt; wrapper);<br>   3.2.2 配置@select注解 或者 配置xml文件<br>      @select注解附:@Select(&quot;select * from User $&#123;ew.customSqlSegment&#125;&quot;)<br>      xml配置附:&lt;select id=&quot;selectAllByPageXml&quot; resultType=&quot;com.mp.pojo.User&quot;&gt;<br>              select * from User $&#123;ew.customSqlSegment&#125;<br>           &lt;/select&gt;<br>4.传入参数Page对象和QueryWrapper对象<br>   4.1: 使用getTotal获取总条数<br>   4.2: 使用getPages获取总页数<br></code></pre></div></td></tr></table></figure><p>参考：<a href="https://mp.baomidou.com/guide/crud-interface.html#page">https://mp.baomidou.com/guide/crud-interface.html#page</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty入门之WebSocket-1</title>
    <link href="/2016/06/17/Java/Netty%E5%85%A5%E9%97%A8%E4%B9%8BWebSocket-1/"/>
    <url>/2016/06/17/Java/Netty%E5%85%A5%E9%97%A8%E4%B9%8BWebSocket-1/</url>
    
    <content type="html"><![CDATA[<p>课程地址：<a href="https://www.imooc.com/learn/1118">https://www.imooc.com/learn/1118</a></p><p><img src="../../images/2021/2019122712345645.png"></p><p><img src="../../images/2021/2020022021533739.png" alt="2020022021533739"></p><p><img src="../../images/2021/20191227123315503.png" alt="20191227123315503"></p><p><img src="../../images/2021/20191227123818509-1.png" alt="20191227123818509-1"></p><p><img src="../../images/2021/20191227123818509.png" alt="20191227123818509"></p><p><img src="../../images/2021/20191227123840309.png" alt="20191227123840309"></p><p><img src="../../images/2021/20191227124110634.png" alt="20191227124110634"></p><p><img src="../../images/2021/20191227124127188.png" alt="20191227124127188"></p><p><img src="../../images/2021/20191227124522259.png" alt="20191227124522259"></p><p><img src="../../images/2021/20191227124546309.png" alt="20191227124546309"></p><p><img src="../../images/2021/20191227125344840.png" alt="20191227125344840"></p><p><img src="../../images/2021/20191227125409161.png" alt="20191227125409161"></p><p><img src="../../images/2021/20191227125647446.png" alt="20191227125647446"></p><p><img src="../../images/2021/20191227125731360.png" alt="20191227125731360"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Netty</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus入门3</title>
    <link href="/2016/06/17/Java/MyBatis/MyBatis-Plus%E5%85%A5%E9%97%A83/"/>
    <url>/2016/06/17/Java/MyBatis/MyBatis-Plus%E5%85%A5%E9%97%A83/</url>
    
    <content type="html"><![CDATA[<h4 id="update-更新"><a href="#update-更新" class="headerlink" title="update 更新"></a>update 更新</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 参考：https://mp.baomidou.com/guide/crud-interface.html#update</span><br><br><span class="hljs-comment">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">update</span><span class="hljs-params">(Wrapper&lt;T&gt; updateWrapper)</span></span>;<br><span class="hljs-comment">// 根据 whereEntity 条件，更新记录</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">update</span><span class="hljs-params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span></span>;<br><span class="hljs-comment">// 根据 ID 选择修改</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">updateById</span><span class="hljs-params">(T entity)</span></span>;<br><span class="hljs-comment">// 根据ID 批量更新</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">updateBatchById</span><span class="hljs-params">(Collection&lt;T&gt; entityList)</span></span>;<br><span class="hljs-comment">// 根据ID 批量更新</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">updateBatchById</span><span class="hljs-params">(Collection&lt;T&gt; entityList, <span class="hljs-keyword">int</span> batchSize)</span></span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mp;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Wrappers;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.additional.update.impl.LambdaUpdateChainWrapper;<br><span class="hljs-keyword">import</span> com.mp.dao.UserMapper;<br><span class="hljs-keyword">import</span> com.mp.entity.User;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> mohuani</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-12-24 23:01</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UpdateTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateById</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setId(<span class="hljs-number">1088248166370832385L</span>);<br>        user.setAge(<span class="hljs-number">26</span>);<br>        user.setEmail(<span class="hljs-string">&quot;wtf2@baomidou.com&quot;</span>);<br>        <span class="hljs-keyword">int</span> rows = userMapper.updateById(user);<br>        System.out.println(<span class="hljs-string">&quot;影响记录条数：&quot;</span> + rows);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过Wrapper形式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateByWrapper</span><span class="hljs-params">()</span> </span>&#123;<br>        UpdateWrapper&lt;User&gt; updateWrapper = <span class="hljs-keyword">new</span> UpdateWrapper&lt;&gt;();<br>        updateWrapper.eq(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;李艺伟&quot;</span>).eq(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">28</span>);<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setEmail(<span class="hljs-string">&quot;lyw2019@baomidou.com&quot;</span>);<br>        user.setAge(<span class="hljs-number">29</span>);<br>        <span class="hljs-keyword">int</span> rows = userMapper.update(user, updateWrapper);<br>        System.out.println(<span class="hljs-string">&quot;影响记录条数：&quot;</span> + rows);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造where条件的时候直接设置update的内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateByWrapper3</span><span class="hljs-params">()</span> </span>&#123;<br>        UpdateWrapper&lt;User&gt; updateWrapper = <span class="hljs-keyword">new</span> UpdateWrapper&lt;&gt;();<br>        updateWrapper.eq(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;李艺伟&quot;</span>).eq(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">29</span>).set(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">30</span>);<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setEmail(<span class="hljs-string">&quot;lyw2019@baomidou.com&quot;</span>);<br>        user.setAge(<span class="hljs-number">29</span>);<br>        <span class="hljs-keyword">int</span> rows = userMapper.update(user, updateWrapper);<br>        System.out.println(<span class="hljs-string">&quot;影响记录条数：&quot;</span> + rows);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过Lambda形式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateByWrapper4</span><span class="hljs-params">()</span> </span>&#123;<br>        LambdaUpdateWrapper&lt;User&gt; lambdaUpdateWrapper = Wrappers.lambdaUpdate();<br>        lambdaUpdateWrapper.eq(User::getName, <span class="hljs-string">&quot;李艺伟&quot;</span>).eq(User::getAge, <span class="hljs-number">30</span>).set(User::getAge, <span class="hljs-number">31</span>);<br><br>        <span class="hljs-keyword">int</span> rows = userMapper.update(<span class="hljs-keyword">null</span>, lambdaUpdateWrapper);<br>        System.out.println(<span class="hljs-string">&quot;影响记录条数：&quot;</span> + rows);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过Lambda形式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateByWrapper5</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> update = <span class="hljs-keyword">new</span> LambdaUpdateChainWrapper&lt;&gt;(userMapper)<br>                .eq(User::getName, <span class="hljs-string">&quot;李艺伟&quot;</span>).eq(User::getAge, <span class="hljs-number">31</span>).set(User::getAge, <span class="hljs-number">32</span>).update();<br>        System.out.println(update);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="删除-delete"><a href="#删除-delete" class="headerlink" title="删除 delete"></a>删除 delete</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 参考：https://mp.baomidou.com/guide/crud-interface.html#delete</span><br><br><span class="hljs-comment">// 根据 entity 条件，删除记录</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; wrapper)</span></span>;<br><span class="hljs-comment">// 删除（根据ID 批量删除）</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteBatchIds</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;<br><span class="hljs-comment">// 根据 ID 删除</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteById</span><span class="hljs-params">(Serializable id)</span></span>;<br><span class="hljs-comment">// 根据 columnMap 条件，删除记录</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteByMap</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mp;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Wrappers;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.additional.update.impl.LambdaUpdateChainWrapper;<br><span class="hljs-keyword">import</span> com.mp.dao.UserMapper;<br><span class="hljs-keyword">import</span> com.mp.entity.User;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> mohuani</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-12-24 23:01</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeleteTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteById</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> rows = userMapper.deleteById(<span class="hljs-number">1088248166370832385L</span>);<br>        System.out.println(<span class="hljs-string">&quot;删除记录条数：&quot;</span> + rows);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造where条件删除</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteByMap</span><span class="hljs-params">()</span> </span>&#123;<br>        Map&lt;String, Object&gt; columnMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        columnMap.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;刘明强5&quot;</span>);<br>        columnMap.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">31</span>);<br><br>        <span class="hljs-keyword">int</span> rows = userMapper.deleteByMap(columnMap);<br>        System.out.println(<span class="hljs-string">&quot;删除记录条数：&quot;</span> + rows);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量删除</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteBatchIds</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> rows = userMapper.deleteBatchIds(Arrays.asList(<span class="hljs-number">1209754139000852481L</span>, <span class="hljs-number">1209838254358319105L</span>, <span class="hljs-number">1209838329864204289L</span>));<br>        System.out.println(<span class="hljs-string">&quot;删除记录条数：&quot;</span> + rows);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过Lambda形式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateByWrapper4</span><span class="hljs-params">()</span> </span>&#123;<br>        LambdaQueryWrapper&lt;User&gt; lambdaQuery = Wrappers.lambdaQuery();<br>        lambdaQuery.gt(User::getAge, <span class="hljs-number">35</span>).lt(User::getAge, <span class="hljs-number">40</span>);<br>        <span class="hljs-keyword">int</span> rows = userMapper.delete(lambdaQuery);<br>        System.out.println(<span class="hljs-string">&quot;影响记录条数：&quot;</span> + rows);<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty入门之WebSocket-2</title>
    <link href="/2016/06/17/Java/Netty%E5%85%A5%E9%97%A8%E4%B9%8BWebSocket-2/"/>
    <url>/2016/06/17/Java/Netty%E5%85%A5%E9%97%A8%E4%B9%8BWebSocket-2/</url>
    
    <content type="html"><![CDATA[<p>课程代码<br><strong>websocket.html</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset = utf-8&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>WebSocket客户端<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> socket;</span><br><span class="javascript"><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">window</span>.WebSocket)&#123;</span><br><span class="javascript"><span class="hljs-built_in">window</span>.WebSocket = <span class="hljs-built_in">window</span>.MozWebSocket;</span><br>&#125;<br><br><span class="javascript"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">window</span>.WebSocket)&#123;</span><br><span class="javascript">socket = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">&quot;ws://localhost:8888/websocket&quot;</span>);</span><br><span class="javascript">socket.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> ta = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;responseContent&#x27;</span>);</span><br><span class="javascript">ta.value += event.data + <span class="hljs-string">&quot;\r\n&quot;</span>;</span><br>&#125;;<br><br><span class="javascript">socket.onopen = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> ta = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;responseContent&#x27;</span>);</span><br><span class="javascript">ta.value = <span class="hljs-string">&quot;你当前的浏览器支持WebSocket,请进行后续操作\r\n&quot;</span>;</span><br>&#125;;<br><br><span class="javascript">socket.onclose = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> ta = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;responseContent&#x27;</span>);</span><br><span class="javascript">ta.value = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">ta.value = <span class="hljs-string">&quot;WebSocket连接已经关闭\r\n&quot;</span>;</span><br>&#125;;<br><span class="javascript">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">alert(<span class="hljs-string">&quot;您的浏览器不支持WebSocket&quot;</span>);</span><br>&#125;<br><br><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params">message</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">window</span>.WebSocket)&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span>;</span><br>&#125;<br>if(socket.readyState == WebSocket.OPEN)&#123;<br>socket.send(message);<br><span class="javascript">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">alert(<span class="hljs-string">&quot;WebSocket连接没有建立成功！！&quot;</span>);</span><br>&#125;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&quot;return false;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;发送WebSocket请求消息&quot;</span> <span class="hljs-attr">onClick</span> = <span class="hljs-string">&quot;send(this.form.message.value)&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>客户端接收到服务端返回的应答消息<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;responseContent&quot;</span> <span class="hljs-attr">style</span> = <span class="hljs-string">&quot;width:1024px; height:300px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>NettyConfig.java</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.imooc.netty;<br><br><span class="hljs-keyword">import</span> io.netty.channel.group.ChannelGroup;<br><span class="hljs-keyword">import</span> io.netty.channel.group.DefaultChannelGroup;<br><span class="hljs-keyword">import</span> io.netty.util.concurrent.GlobalEventExecutor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 存储整个工程的全局配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuyazhuang</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NettyConfig</span> </span>&#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 存储每一个客户端接入进来时的channel对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ChannelGroup group = <span class="hljs-keyword">new</span> DefaultChannelGroup(GlobalEventExecutor.INSTANCE);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>MyWebSocketHandler.java</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.imooc.netty;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">import</span> io.netty.buffer.ByteBuf;<br><span class="hljs-keyword">import</span> io.netty.buffer.Unpooled;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelFuture;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelFutureListener;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelHandlerContext;<br><span class="hljs-keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.DefaultFullHttpResponse;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.FullHttpRequest;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.HttpResponseStatus;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.HttpVersion;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.PingWebSocketFrame;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.PongWebSocketFrame;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.TextWebSocketFrame;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.WebSocketFrame;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory;<br><span class="hljs-keyword">import</span> io.netty.util.CharsetUtil;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 接收/处理/响应客户端websocket请求的核心业务处理类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuyazhuang</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyWebSocketHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleChannelInboundHandler</span>&lt;<span class="hljs-title">Object</span>&gt; </span>&#123;<br><br><span class="hljs-keyword">private</span> WebSocketServerHandshaker handshaker;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String WEB_SOCKET_URL = <span class="hljs-string">&quot;ws://localhost:8888/websocket&quot;</span>;<br><span class="hljs-comment">//客户端与服务端创建连接的时候调用</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>NettyConfig.group.add(ctx.channel());<br>System.out.println(<span class="hljs-string">&quot;客户端与服务端连接开启...&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//客户端与服务端断开连接的时候调用</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelInactive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>NettyConfig.group.remove(ctx.channel());<br>System.out.println(<span class="hljs-string">&quot;客户端与服务端连接关闭...&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//服务端接收客户端发送过来的数据结束之后调用</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelReadComplete</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>ctx.flush();<br>&#125;<br><br><span class="hljs-comment">//工程出现异常的时候调用</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exceptionCaught</span><span class="hljs-params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>cause.printStackTrace();<br>ctx.close();<br>&#125;<br><br><span class="hljs-comment">//服务端处理客户端websocket请求的核心方法</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">messageReceived</span><span class="hljs-params">(ChannelHandlerContext context, Object msg)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-comment">//处理客户端向服务端发起http握手请求的业务</span><br><span class="hljs-keyword">if</span> (msg <span class="hljs-keyword">instanceof</span> FullHttpRequest) &#123;<br>handHttpRequest(context,  (FullHttpRequest)msg);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (msg <span class="hljs-keyword">instanceof</span> WebSocketFrame) &#123; <span class="hljs-comment">//处理websocket连接业务</span><br>handWebsocketFrame(context, (WebSocketFrame)msg);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理客户端与服务端之前的websocket业务</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ctx</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> frame</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handWebsocketFrame</span><span class="hljs-params">(ChannelHandlerContext ctx, WebSocketFrame frame)</span></span>&#123;<br><span class="hljs-comment">//判断是否是关闭websocket的指令</span><br><span class="hljs-keyword">if</span> (frame <span class="hljs-keyword">instanceof</span> CloseWebSocketFrame) &#123;<br>handshaker.close(ctx.channel(), (CloseWebSocketFrame)frame.retain());<br>&#125;<br><span class="hljs-comment">//判断是否是ping消息</span><br><span class="hljs-keyword">if</span> (frame <span class="hljs-keyword">instanceof</span> PingWebSocketFrame) &#123;<br>ctx.channel().write(<span class="hljs-keyword">new</span> PongWebSocketFrame(frame.content().retain()));<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//判断是否是二进制消息，如果是二进制消息，抛出异常</span><br><span class="hljs-keyword">if</span>( ! (frame <span class="hljs-keyword">instanceof</span> TextWebSocketFrame) )&#123;<br>System.out.println(<span class="hljs-string">&quot;目前我们不支持二进制消息&quot;</span>);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;【&quot;</span>+<span class="hljs-keyword">this</span>.getClass().getName()+<span class="hljs-string">&quot;】不支持消息&quot;</span>);<br>&#125;<br><span class="hljs-comment">//返回应答消息</span><br><span class="hljs-comment">//获取客户端向服务端发送的消息</span><br>String request = ((TextWebSocketFrame) frame).text();<br>System.out.println(<span class="hljs-string">&quot;服务端收到客户端的消息====&gt;&gt;&gt;&quot;</span> + request);<br>TextWebSocketFrame tws = <span class="hljs-keyword">new</span> TextWebSocketFrame(<span class="hljs-keyword">new</span> Date().toString() <br>+ ctx.channel().id() <br>+ <span class="hljs-string">&quot; ===&gt;&gt;&gt; &quot;</span> <br>+ request);<br><span class="hljs-comment">//群发，服务端向每个连接上来的客户端群发消息</span><br>NettyConfig.group.writeAndFlush(tws);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理客户端向服务端发起http握手请求的业务</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ctx</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handHttpRequest</span><span class="hljs-params">(ChannelHandlerContext ctx, FullHttpRequest req)</span></span>&#123;<br><span class="hljs-keyword">if</span> (!req.getDecoderResult().isSuccess() <br>|| ! (<span class="hljs-string">&quot;websocket&quot;</span>.equals(req.headers().get(<span class="hljs-string">&quot;Upgrade&quot;</span>)))) &#123;<br>sendHttpResponse(ctx, req, <br><span class="hljs-keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.BAD_REQUEST));<br><span class="hljs-keyword">return</span>;<br>&#125;<br>WebSocketServerHandshakerFactory wsFactory = <span class="hljs-keyword">new</span> WebSocketServerHandshakerFactory(<br>WEB_SOCKET_URL, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">false</span>);<br>handshaker = wsFactory.newHandshaker(req);<br><span class="hljs-keyword">if</span> (handshaker == <span class="hljs-keyword">null</span>) &#123;<br>WebSocketServerHandshakerFactory.sendUnsupportedWebSocketVersionResponse(ctx.channel());<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>handshaker.handshake(ctx.channel(), req);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 服务端向客户端响应消息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ctx</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> res</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendHttpResponse</span><span class="hljs-params">(ChannelHandlerContext ctx, FullHttpRequest req,</span></span><br><span class="hljs-function"><span class="hljs-params">DefaultFullHttpResponse res)</span></span>&#123;<br><span class="hljs-keyword">if</span> (res.getStatus().code() != <span class="hljs-number">200</span>) &#123;<br>ByteBuf buf = Unpooled.copiedBuffer(res.getStatus().toString(), CharsetUtil.UTF_8);<br>res.content().writeBytes(buf);<br>buf.release();<br>&#125;<br><span class="hljs-comment">//服务端向客户端发送数据</span><br>ChannelFuture f = ctx.channel().writeAndFlush(res);<br><span class="hljs-keyword">if</span> (res.getStatus().code() != <span class="hljs-number">200</span>) &#123;<br>f.addListener(ChannelFutureListener.CLOSE);<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>MyWebSocketChannelHandler.java</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.imooc.netty;<br><br><span class="hljs-keyword">import</span> io.netty.channel.ChannelInitializer;<br><span class="hljs-keyword">import</span> io.netty.channel.socket.SocketChannel;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.HttpObjectAggregator;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;<br><span class="hljs-keyword">import</span> io.netty.handler.stream.ChunkedWriteHandler;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化连接时候的各个组件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuyazhuang</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyWebSocketChannelHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ChannelInitializer</span>&lt;<span class="hljs-title">SocketChannel</span>&gt; </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(SocketChannel e)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>e.pipeline().addLast(<span class="hljs-string">&quot;http-codec&quot;</span>, <span class="hljs-keyword">new</span> HttpServerCodec());<br>e.pipeline().addLast(<span class="hljs-string">&quot;aggregator&quot;</span>, <span class="hljs-keyword">new</span> HttpObjectAggregator(<span class="hljs-number">65536</span>));<br>e.pipeline().addLast(<span class="hljs-string">&quot;http-chunked&quot;</span>, <span class="hljs-keyword">new</span> ChunkedWriteHandler());<br>e.pipeline().addLast(<span class="hljs-string">&quot;handler&quot;</span>, <span class="hljs-keyword">new</span> MyWebSocketHandler());<br>&#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>Main.java</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.imooc.netty;<br><br><span class="hljs-keyword">import</span> io.netty.bootstrap.ServerBootstrap;<br><span class="hljs-keyword">import</span> io.netty.channel.Channel;<br><span class="hljs-keyword">import</span> io.netty.channel.EventLoopGroup;<br><span class="hljs-keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;<br><span class="hljs-keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 程序的入口，负责启动应用</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuyazhuang</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>EventLoopGroup bossGroup = <span class="hljs-keyword">new</span> NioEventLoopGroup();<br>EventLoopGroup workGroup = <span class="hljs-keyword">new</span> NioEventLoopGroup();<br><span class="hljs-keyword">try</span> &#123;<br>ServerBootstrap b = <span class="hljs-keyword">new</span> ServerBootstrap();<br>b.group(bossGroup, workGroup);<br>b.channel(NioServerSocketChannel.class);<br>b.childHandler(<span class="hljs-keyword">new</span> MyWebSocketChannelHandler());<br>System.out.println(<span class="hljs-string">&quot;服务端开启等待客户端连接....&quot;</span>);<br>Channel ch = b.bind(<span class="hljs-number">8888</span>).sync().channel();<br>ch.closeFuture().sync();<br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-comment">//优雅的退出程序</span><br>bossGroup.shutdownGracefully();<br>workGroup.shutdownGracefully();<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Netty</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven基础入门</title>
    <link href="/2016/06/17/Java/Maven%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <url>/2016/06/17/Java/Maven%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven-Learning-Notes"><a href="#Maven-Learning-Notes" class="headerlink" title="Maven Learning Notes"></a>Maven Learning Notes</h1><h1 id="Maven学习笔记"><a href="#Maven学习笔记" class="headerlink" title="Maven学习笔记"></a>Maven学习笔记</h1><hr><h2 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一.介绍"></a>一.介绍</h2><p><strong>Maven</strong>是基于项目对象模型（POM），可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。</p><ol><li>bin目录是包含mvn的运行脚本</li><li>boot目录包含一个类加载器的框架，maven使用它加载自己的类库</li><li>conf配置文件</li><li>lib包含maven运行时的依赖类库</li></ol><h2 id="二-环境变量的配置"><a href="#二-环境变量的配置" class="headerlink" title="二.环境变量的配置"></a>二.环境变量的配置</h2><p><a href="http://maven.apache.org/download.cgi" title="下载地址">点击下载</a><br><br><strong>maven</strong>环境配置，增加一个环境变量<strong>MAVEN_HOME</strong>,值是maven的安装路径（<code>C:\Program Files\apache-maven-3.5.0-bin\apache-maven-3.5.0</code>）<br>修改path则是在path最后面添加<code>;%MAVEN_HOME%\bin</code>。</p><h3 id="Maven的项目结构"><a href="#Maven的项目结构" class="headerlink" title="Maven的项目结构"></a>Maven的项目结构</h3><div class="hljs code-wrapper"><pre><code>项目名    -src        -main            -java                 -package       -test            -java                 -package    -pom.xml</code></pre></div><h2 id="三-常用命令"><a href="#三-常用命令" class="headerlink" title="三.常用命令"></a>三.常用命令</h2><div class="hljs code-wrapper"><pre><code>    mvn -v         查看maven版本     compile    编译     test        测试     package    打包     clean        删除target     install    安装jar包到本地仓库</code></pre></div><h3 id="maven快速创建项目骨架目录"><a href="#maven快速创建项目骨架目录" class="headerlink" title="maven快速创建项目骨架目录"></a>maven快速创建项目骨架目录</h3><h4 id="两种方式："><a href="#两种方式：" class="headerlink" title="两种方式："></a>两种方式：</h4><div class="hljs code-wrapper"><pre><code>1.  mvn archetype:generate 按照提示进行选择2.  mvn archetype:generate  -DgroupId=com.imooc.maven   -DartifactId=  maven-service   -Dversion=1.0.0SNAPSHOT   -Dpackage=com.imooc.maven.demo    1. -DgroupId=组织名，公司网址反写+项目名    2. -DartifactId=项目名+模块名    3. -Dversion=版本号    4. -Dpackage=代码所存在的包名</code></pre></div><h2 id="四-Maven中的坐标和仓库"><a href="#四-Maven中的坐标和仓库" class="headerlink" title="四.Maven中的坐标和仓库"></a>四.Maven中的坐标和仓库</h2><p><strong>构件坐标:</strong></p><div class="hljs code-wrapper"><pre><code>        1. groupId:公司名字+项目名        2. artifactId：项目名+模块名        3. varsion:版本号</code></pre></div><p><strong>仓库：</strong></p><div class="hljs code-wrapper"><pre><code>        1. 本地仓库        2. 远程仓库        3. 镜像仓库</code></pre></div><h2 id="五-更改仓库默认路径"><a href="#五-更改仓库默认路径" class="headerlink" title="五.更改仓库默认路径"></a>五.更改仓库默认路径</h2><p>已安装到本地仓库中的jar包位置：</p><div class="hljs code-wrapper"><pre><code>C:\Users\用户\.m2\repository\com\tiakon\demo</code></pre></div><p>安装路径conf文件夹下settings.xml文件<br>打开找到这段备注是的代码：</p><div class="hljs code-wrapper"><pre><code>      &lt;!-- localRepository       | The path to the local repository maven will use to store artifacts.       | Default: $&#123;user.home&#125;/.m2/repository      &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;      --&gt;</code></pre></div><p>复制粘贴出来</p><div class="hljs code-wrapper"><pre><code>    &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code></pre></div><p><strong>将localRepository便签内的值替换成新路径即可。</strong></p><h2 id="六-maven生命周期"><a href="#六-maven生命周期" class="headerlink" title="六.maven生命周期"></a>六.maven生命周期</h2><p>完整的项目构建过程包括：</p><p><strong>清理、编译、测试、打包、集成测试、验证、部署</strong></p><p><strong>maven三套独立的生命周期</strong></p><div class="hljs code-wrapper"><pre><code>    clean     清理项目            1.pre-clean    执行清理前的工作            2.clean        清理上一次构建生成的所有文件            3.post-clean     执行清理后的文件    default 构建项目（最核心）            compile test package install    site     生成项目站点            1. pre-site     在生成项目站点前要完成的工作            2. site     生成项目的站点文档            3. post-site    在生成项目站点后要完成的工作            4. site-deploy    发布生成的站点到服务器上</code></pre></div><h2 id="七-maven中pom-xml常见元素介绍"><a href="#七-maven中pom-xml常见元素介绍" class="headerlink" title="七.maven中pom.xml常见元素介绍"></a>七.maven中pom.xml常见元素介绍</h2><div class="hljs code-wrapper"><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;             xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;!--指定了当前pom的版本--&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;groupId&gt;com.tiakon.maven.demo&lt;/groupId&gt;    &lt;artifactId&gt;HoictasStudio-MavenDemo01&lt;/artifactId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;!--        第一个0表示大版本号        第二个0表示分支版本号        第三个0表示小版本号        0.0.1        snapshot    快照        alpha       内部测试        beta        公测        Release     稳定        GA          正式发布    --&gt;    &lt;!--        打包方式:默认是jar,可选war、zip、pom        &lt;packaging&gt;&lt;/packaging&gt;    --&gt;    &lt;!--        项目名        &lt;name&gt;&lt;/name&gt;        项目地址        &lt;url&gt;&lt;/url&gt;        项目描述        &lt;description&gt;&lt;/description&gt;        开发人员列表        &lt;developers&gt;&lt;/developers&gt;        许可证信息        &lt;licenses&gt;&lt;/licenses&gt;        组织信息        &lt;organization&gt;&lt;/organization&gt;    --&gt;</code></pre></div><p>​<br>        <!--依赖列表--><br>        <dependencies><br>            <!--依赖项--><br>            <dependency><br>                <groupId>junit</groupId><br>                <artifactId>junit</artifactId><br>                <version>RELEASE</version><br>                <!--<type></type>--><br>                <!--依赖范围--><br>                <!--<scope></scope>--><br>                <!--设置依赖是否可选（默认）false--><br>                <!--<optional></optional>--><br>                <!--排斥依赖传递列表--><br>                <!--                    <exclusions>                        <exclusion>                        </exclusion>                    </exclusions>                --><br>            </dependency><br>        </dependencies><br>        <!--依赖的管理，作用主要定义在父模块中，对子模块进行管理--><br>        &lt;!–<br>            <dependencyManagement><br>                <dependencies></p><div class="hljs code-wrapper"><pre><code>            &lt;/dependencies&gt;        &lt;/dependencyManagement&gt;    --&gt;    &lt;!--对构件的行为提供相应的支持--&gt;    &lt;build&gt;        &lt;!--插件列表--&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;                &lt;version&gt;3.0.1&lt;/version&gt;                &lt;executions&gt;                    &lt;execution&gt;                        &lt;phase&gt;package&lt;/phase&gt;                        &lt;goals&gt;                            &lt;goal&gt;                                jar-no-fork                            &lt;/goal&gt;                        &lt;/goals&gt;                    &lt;/execution&gt;                &lt;/executions&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;    &lt;!--通常用于子模块对父模块pom的继承--&gt;    &lt;!--&lt;parent&gt;&lt;/parent&gt;--&gt;    &lt;!--用来聚合运行Maven项目，指定多个模块一起编译--&gt;    &lt;!--        &lt;modules&gt;            &lt;module&gt;&lt;/module&gt;        &lt;/modules&gt;    --&gt;&lt;/project&gt;</code></pre></div><h2 id="八-Maven的依赖范围"><a href="#八-Maven的依赖范围" class="headerlink" title="八.Maven的依赖范围"></a>八.Maven的依赖范围</h2><div class="hljs code-wrapper"><pre><code>三种classpath    1. 编译    2. 测试    3. 运行</code></pre></div><p><strong>maven提供了6种可选依赖范围:</strong></p><div class="hljs code-wrapper"><pre><code>1. compile:    默认范围，编译测试运行都有效。2. provided:    在编译和测试时有效。（比如说在开发JavaEE时，你在本地运行的servlet，是需要调用已添加到项目中的servlet-api.jar这个jar包的。这个过程就包含了编译【就是把Java文件编译成class文件的过程中也要调用】和测试【测试就是在本地运行】，那么他说的运行是指，整个项目已开发完成，编译、测试通过后，将class文件或包含有class文件的war包发布到服务器上的Tomcat中运行，这时启动项目，就可以直接调Tomcat中的servlet-api.jar，不必再将自己的jar包添加到项目中去。也就是说当你选择provided时，项目发布时Maven不会将你添加的jar包，加入到项目中。）3. runtime:    在测试和运行时有效。(典型例子：JDBC驱动的实现。)4. test:    只在测试是有效。5. system:    类似provided，与本机系统相关联，可移植性差。6. import:    导入范围，他只是用在dependencyManagement中，表示从其他的pom中导入dependecy的配置。（以下引用官网案例并不难理解。）Importing Dependencies&lt;project&gt;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;groupId&gt;maven&lt;/groupId&gt;  &lt;artifactId&gt;B&lt;/artifactId&gt;  &lt;packaging&gt;pom&lt;/packaging&gt;  &lt;name&gt;B&lt;/name&gt;  &lt;version&gt;1.0&lt;/version&gt;  &lt;dependencyManagement&gt;        &lt;dependencies&gt;                  &lt;dependency&gt;                    &lt;groupId&gt;maven&lt;/groupId&gt;                    &lt;artifactId&gt;A&lt;/artifactId&gt;                    &lt;version&gt;1.0&lt;/version&gt;                    &lt;type&gt;pom&lt;/type&gt;                    &lt;scope&gt;import&lt;/scope&gt;                  &lt;/dependency&gt;                          &lt;dependency&gt;                            &lt;groupId&gt;test&lt;/groupId&gt;                            &lt;artifactId&gt;d&lt;/artifactId&gt;                            &lt;version&gt;1.0&lt;/version&gt;                          &lt;/dependency&gt;        &lt;/dependencies&gt;  &lt;/dependencyManagement&gt;  &lt;dependencies&gt;            &lt;dependency&gt;              &lt;groupId&gt;test&lt;/groupId&gt;              &lt;artifactId&gt;a&lt;/artifactId&gt;              &lt;version&gt;1.0&lt;/version&gt;              &lt;scope&gt;runtime&lt;/scope&gt;            &lt;/dependency&gt;                    &lt;dependency&gt;                      &lt;groupId&gt;test&lt;/groupId&gt;                      &lt;artifactId&gt;c&lt;/artifactId&gt;                      &lt;scope&gt;runtime&lt;/scope&gt;                    &lt;/dependency&gt;  &lt;/dependencies&gt;&lt;/project&gt;</code></pre></div><p>Assuming A is the pom defined in the preceding example, the end result would be the same. <strong>All of A’s managed dependencies would be incorporated into B except for d since it is defined in this pom.</strong></p><p>假设A是前面示例中定义的pom，那么最终结果将是相同的。<strong>所有管理的依赖项都将被合并到B中，除了在这个pom中定义的d之外。</strong></p><h2 id="九-依赖冲突"><a href="#九-依赖冲突" class="headerlink" title="九.依赖冲突"></a>九.依赖冲突</h2><div class="hljs code-wrapper"><pre><code>1.短路优先:    C-&gt;B-&gt;A-&gt;X1(jar)    C-&gt;B-&gt;X2(jar)【C依赖B,B依赖A,A和B都包含同一个不同版本的Jar,则取B的依赖版本。（c的pom.xml中不必注明jar坐标）】2.先声明先优先    如果路径相同长度相同，则谁先声明，先解析谁。【C依赖A和B,A和B都包含同一个不同版本的Jar,谁依赖在前取谁的依赖版本。】</code></pre></div><h2 id="十-聚合与继承"><a href="#十-聚合与继承" class="headerlink" title="十.聚合与继承"></a>十.聚合与继承</h2><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><div class="hljs code-wrapper"><pre><code>&lt;packaging&gt;pom&lt;/packaging&gt;&lt;modules&gt;    &lt;module&gt;../HoictasStudio-MavenDemo01&lt;/module&gt;    &lt;module&gt;../HoictasStudio-MavenDemo02&lt;/module&gt;    &lt;module&gt;../HoictasStudio-MavenDemo03&lt;/module&gt;&lt;/modules&gt;</code></pre></div><p>假设在<strong>HoictasStudio-MavenParent</strong>模块中添如以上代码，输入<code>clean install</code>命令后，即可同时安装多个jar到本地仓库中</p><div class="hljs code-wrapper"><pre><code>    [INFO] HoictasStudio-MavenDemo01 .......................... SUCCESS [  4.618 s]    [INFO] HoictasStudio-MavenDemo02 .......................... SUCCESS [  0.828 s]    [INFO] HoictasStudio-MavenDemo03 .......................... SUCCESS [  0.923 s]    [INFO] HoictasStudio-MavenParent .......................... SUCCESS [  0.021 s]</code></pre></div><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><strong>根据官方文档说明继承会根据父模块与子模块的包含与否，对pom.xml的写法则有两种。</strong></p><h4 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h4><p>假设我们有两个模块，前一个叫 <code>com.mycompany.app:my-app:1</code>，后一个叫<code>com.mycompany.app:my-module:1</code>。</p><p>my-app的pom文件为：</p><div class="hljs code-wrapper"><pre><code>&lt;project&gt;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;  &lt;artifactId&gt;my-app&lt;/artifactId&gt;  &lt;version&gt;1&lt;/version&gt;&lt;/project&gt;</code></pre></div><p>my-module的pom文件为：</p><div class="hljs code-wrapper"><pre><code>&lt;project&gt;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;  &lt;artifactId&gt;my-module&lt;/artifactId&gt;  &lt;version&gt;1&lt;/version&gt;&lt;/project&gt;</code></pre></div><p>我们指定如下项目结构：</p><div class="hljs code-wrapper"><pre><code>    .     |-- my-module     |   `-- pom.xml     `-- pom.xml</code></pre></div><p>那么，我们需要<code>my-module</code>去继承<code>my-app</code>，则需要在<code>my-module</code>的pom文件中添加以下代码：</p><div class="hljs code-wrapper"><pre><code>    &lt;project&gt;      &lt;parent&gt;        &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;        &lt;artifactId&gt;my-app&lt;/artifactId&gt;        &lt;version&gt;1&lt;/version&gt;      &lt;/parent&gt;      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;      &lt;artifactId&gt;my-module&lt;/artifactId&gt;      &lt;version&gt;1&lt;/version&gt;    &lt;/project&gt;</code></pre></div><h4 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h4><div class="hljs code-wrapper"><pre><code>However, that would work if the parent project was already installed inour local repository or was in that specific directory structure (parent pom.xml is one directory higher than that of the module&#39;s pom.xml). But what if the parent is not yet installed and if the directory structure is. |-- my-module |   `-- pom.xml `-- parent     `-- pom.xml    </code></pre></div><p>上一段话摘自官网对继承的介绍，就是说如果你的父模块已在本地安装或者父模块不包含子模块，目录级别甚至是<br>比子模块的还要高，就在第一种写法上添加<code>&lt;relativePath&gt;</code>标签。</p><div class="hljs code-wrapper"><pre><code>&lt;project&gt;      &lt;parent&gt;        &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;        &lt;artifactId&gt;my-app&lt;/artifactId&gt;        &lt;version&gt;1&lt;/version&gt;        &lt;relativePath&gt;../parent/pom.xml&lt;/relativePath&gt;      &lt;/parent&gt;      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;artifactId&gt;my-module&lt;/artifactId&gt;&lt;/project&gt;</code></pre></div><p>笔者在看视频时就发现，当父模块与子模块处于同一级别时，在按照视频中的写法（第一种写法）test时就会报错，<br>而此时的情况是不包含子模块，所以应该在<code>&lt;parent&gt;</code>标签中添加<code>&lt;relativePath&gt;</code>标签即可测试通过。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JsonWebToken</title>
    <link href="/2016/06/17/Java/JsonWebToken/"/>
    <url>/2016/06/17/Java/JsonWebToken/</url>
    
    <content type="html"><![CDATA[<p>参考阮一峰老师的博客：<a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</a></p><p>课程参考：<a href="https://www.imooc.com/video/19018">https://www.imooc.com/video/19018</a></p><p>JWT官网：<a href="https://jwt.io/">https://jwt.io/</a><br><img src="https://img-blog.csdnimg.cn/20190428161255871.png?x-oss-process=image/wat!%5B%E5%9C%A8%E8%BF%99%E9%87%8C%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%8F%8F%E8%BF%B0%5D(https://img-blog.csdnimg.cn/2019042816125835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190428161617968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus入门1</title>
    <link href="/2016/06/17/Java/MyBatis/MyBatis-Plus%E5%85%A5%E9%97%A81/"/>
    <url>/2016/06/17/Java/MyBatis/MyBatis-Plus%E5%85%A5%E9%97%A81/</url>
    
    <content type="html"><![CDATA[<h4 id="课程资料"><a href="#课程资料" class="headerlink" title="课程资料"></a>课程资料</h4><p>视频地址：<a href="https://www.imooc.com/learn/1130">https://www.imooc.com/learn/1130</a><br>文档地址：<a href="https://mp.baomidou.com/guide/">https://mp.baomidou.com/guide/</a></p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>first<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- spring boot 启动器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- spring boot test 启动器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- lombok简化java代码 如果没有安装，先安装这个插件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- mybatis-plus插件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- mysql jdbc驱动 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mp?useSSL=false&amp;serverTimezone=GMT%2B8</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">root:</span> <span class="hljs-string">warn</span><br>    <span class="hljs-attr">com.mp.dao:</span> <span class="hljs-string">trace</span><br>  <span class="hljs-attr">pattern:</span><br>    <span class="hljs-attr">console:</span> <span class="hljs-string">&#x27;%p%m%n&#x27;</span><br>    <span class="hljs-comment"># %p: 日志级别</span><br>    <span class="hljs-comment"># %m: 日志内容</span><br>    <span class="hljs-comment"># %n: 换行</span><br></code></pre></div></td></tr></table></figure><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Data</td><td>注解是lombok.jar包下的注解，该注解通常用在实体bean上，不需要写出set和get方法，但是具备实体bean所具备的方法，简化编程提高变成速度</td></tr><tr><td>@TableId</td><td>设置主键，mp默认匹配数据表中的id字段为主键，如果没有id字段，需要在实体类使用该注解表名主键字段</td></tr><tr><td>@TableName(“mp_user”)</td><td>设置表名，表名和实体类的名字不一致</td></tr><tr><td>@TableField(“real_name”)</td><td>设置字段名，表中字段名和实体类的名字不一致</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/2019122500464781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="当一个字段在表中忽略"><a href="#当一个字段在表中忽略" class="headerlink" title="当一个字段在表中忽略 :"></a>当一个字段在表中忽略 :</h5><ol><li>用transient 不可序列化<br><code>private transient String remark;</code></li><li>用static 许自动生成setget<br><code>private static String remark;</code></li><li>@TableField(exist=false)</li></ol><h5 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h5><ol><li>selectById</li><li>selectBatchIds，实际查询是 select  where id in (id1, id2, id3)</li><li>selectByMap, 实际是拼接where条件查询，其中<strong>map里面的key和数据表字段大小写一致</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mp;<br><br><span class="hljs-keyword">import</span> com.mp.dao.UserMapper;<br><span class="hljs-keyword">import</span> com.mp.entity.User;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> mohuani</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-12-25 11:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RetrieveTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectById</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = userMapper.selectById(<span class="hljs-number">1088250446457389058L</span>);<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectBatchIds</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Long&gt; list = Arrays.asList(<span class="hljs-number">1088248166370832385L</span>, <span class="hljs-number">1094590409767661570L</span>, <span class="hljs-number">1209509417456001025L</span>);<br>        List&lt;User&gt; userList = userMapper.selectBatchIds(list);<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByMap</span><span class="hljs-params">()</span> </span>&#123;<br>        Map&lt;String, Object&gt; columnMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        columnMap.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;李艺伟&quot;</span>);<br>        columnMap.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">28</span>);<br>        List&lt;User&gt; userList = userMapper.selectByMap(columnMap);<br>        userList.forEach(System.out::println);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot启动失败常见问题</title>
    <link href="/2016/06/17/Java/springboot%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <url>/2016/06/17/Java/springboot%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<!-- - 刚开始使用springboot连接mysql数据库，项目启动的时候报了一个错误 --><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Loading class `com.mysql.jdbc.Driver<span class="hljs-string">&#x27;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&#x27;</span>. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.<br></code></pre></div></td></tr></table></figure><p>原因：现在很多定的教学视频都比较老，教学使用的mysql版本和你自己本地使用的版本不一致，新版本的mysql需要设置成  “com.mysql.cj.jdbc.Driver”，另外还需要增加一个参数 serverTimezone=UTC<br>参考文档：<a href="https://blog.csdn.net/weixin_43770545/article/details/90486809">https://blog.csdn.net/weixin_43770545/article/details/90486809</a></p><ul><li>项目启动的时候报错，很显然数据库没有正常连接<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">java.sql.SQLException: Access denied <span class="hljs-keyword">for</span> user <span class="hljs-string">&#x27;&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> (using password: NO)<br></code></pre></div></td></tr></table></figure>我当时写的配置是，写的时候IDEA直接提示选了一个，单词没选对data-username 和 data-password，实际应该使用 username 和 password，主要还是没有记清楚配置。当作是一个教训吧。<br>错误的配置：<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;charseterEncoding=utf-8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">data-username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">data-password:</span> <span class="hljs-string">root</span><br></code></pre></div></td></tr></table></figure>正确的配置<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;charseterEncoding=utf-8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus入门4</title>
    <link href="/2016/06/17/Java/MyBatis/MyBatis-Plus%E5%85%A5%E9%97%A84/"/>
    <url>/2016/06/17/Java/MyBatis/MyBatis-Plus%E5%85%A5%E9%97%A84/</url>
    
    <content type="html"><![CDATA[<h4 id="AR模式"><a href="#AR模式" class="headerlink" title="AR模式"></a>AR模式</h4><p>通过直接操作实体类的方式，对数据表进行增删改查的操作</p><ol><li>必须存在对应的原始mapper并继承Model<User> 泛型类，并配置相应类注解</li><li>同时申明序列号  serialVersionUID = 1L</li><li>需要继承BaseMapper</li></ol><p><img src="https://img-blog.csdnimg.cn/2019122522344990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191225223524774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="主键策略"><a href="#主键策略" class="headerlink" title="主键策略"></a>主键策略</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 参考：https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/IdType.java</span><br><br><span class="hljs-keyword">package</span> com.baomidou.mybatisplus.annotation;<br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成ID类型枚举类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> hubin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2015-11-10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">IdType</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据库ID自增</span><br><span class="hljs-comment">     */</span><br>    AUTO(<span class="hljs-number">0</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</span><br><span class="hljs-comment">     */</span><br>    NONE(<span class="hljs-number">1</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户输入ID</span><br><span class="hljs-comment">     * &lt;p&gt;该类型可以通过自己注册自动填充插件进行填充&lt;/p&gt;</span><br><span class="hljs-comment">     */</span><br>    INPUT(<span class="hljs-number">2</span>),<br><br>    <span class="hljs-comment">/* 以下3种类型、只有当插入对象ID 为空，才自动填充。 */</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分配ID (主键类型为number或string）,</span><br><span class="hljs-comment">     * 默认实现类 &#123;<span class="hljs-doctag">@link</span> com.baomidou.mybatisplus.core.incrementer.DefaultIdentifierGenerator&#125;(雪花算法)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 3.3.0</span><br><span class="hljs-comment">     */</span><br>    ASSIGN_ID(<span class="hljs-number">3</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分配UUID (主键类型为 string)</span><br><span class="hljs-comment">     * 默认实现类 &#123;<span class="hljs-doctag">@link</span> com.baomidou.mybatisplus.core.incrementer.DefaultIdentifierGenerator&#125;(UUID.replace(&quot;-&quot;,&quot;&quot;))</span><br><span class="hljs-comment">     */</span><br>    ASSIGN_UUID(<span class="hljs-number">4</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@deprecated</span> 3.3.0 please use &#123;<span class="hljs-doctag">@link</span> #ASSIGN_ID&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    ID_WORKER(<span class="hljs-number">3</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@deprecated</span> 3.3.0 please use &#123;<span class="hljs-doctag">@link</span> #ASSIGN_ID&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    ID_WORKER_STR(<span class="hljs-number">3</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@deprecated</span> 3.3.0 please use &#123;<span class="hljs-doctag">@link</span> #ASSIGN_UUID&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    UUID(<span class="hljs-number">4</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> key;<br><br>    IdType(<span class="hljs-keyword">int</span> key) &#123;<br>        <span class="hljs-keyword">this</span>.key = key;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>策略配置：局部策略优先全局策略<br><a href="https://mp.baomidou.com/config/#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE">https://mp.baomidou.com/config/#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-注解</title>
    <link href="/2016/06/15/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java-%E6%B3%A8%E8%A7%A3/"/>
    <url>/2016/06/15/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java-%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h5 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h5><p>反射——全面解析Java注解 <a href="https://www.imooc.com/learn/456">https://www.imooc.com/learn/456</a></p><hr><h4 id="Java中的常见注解"><a href="#Java中的常见注解" class="headerlink" title="Java中的常见注解"></a>Java中的常见注解</h4><p>JDK自带注解</p><ul><li><p>@Override，表示当前的方法定义将覆盖超类中的方法。</p></li><li><p>@Deprecated，使用了注解为它的元素编译器将发出警告，过时被弃用的代码，不建议再使用。</p></li><li><p>@SuppressWarnings，关闭不当编译器警告信息。</p><p>  例子：@SuppressWarnings(“deprecation”)，仍然使用已经不推荐的方法</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20190409151031923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="注解分类"><a href="#注解分类" class="headerlink" title="注解分类"></a>注解分类</h4><p><img src="https://img-blog.csdnimg.cn/20190409151116246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190409151127566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p><img src="https://img-blog.csdnimg.cn/20190409151219170.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190409151719465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190409151905183.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190409152012363.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190409152127111.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190409152211808.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="注解应用实战"><a href="#注解应用实战" class="headerlink" title="注解应用实战"></a>注解应用实战</h4><p><img src="https://img-blog.csdnimg.cn/20190409152502113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190409161122387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gson创建和解析Json</title>
    <link href="/2016/06/15/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Gson%E5%88%9B%E5%BB%BA%E5%92%8C%E8%A7%A3%E6%9E%90Json/"/>
    <url>/2016/06/15/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Gson%E5%88%9B%E5%BB%BA%E5%92%8C%E8%A7%A3%E6%9E%90Json/</url>
    
    <content type="html"><![CDATA[<p>课程地址：<a href="https://www.imooc.com/learn/523">https://www.imooc.com/learn/523</a><br>Gson是google开发的一个开源Json解析库，最新版本以及源码可以在官方的github上查看：<a href="https://github.com/google/gson">https://github.com/google/gson</a></p><h5 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maven">&lt;dependency&gt;<br>  &lt;groupId&gt;com.google.code.gson&lt;&#x2F;groupId&gt;<br>  &lt;artifactId&gt;gson&lt;&#x2F;artifactId&gt;<br>  &lt;version&gt;2.8.5&lt;&#x2F;version&gt;<br>&lt;&#x2F;dependency&gt;<br></code></pre></div></td></tr></table></figure><h5 id="创建javaBean"><a href="#创建javaBean" class="headerlink" title="创建javaBean"></a>创建javaBean</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> bean;<br><br><span class="hljs-keyword">import</span> com.google.gson.annotations.SerializedName;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> mohuani</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-05-08 23:00</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Diaosi</span> </span>&#123;<br><br><span class="hljs-comment">//    @SerializedName(&quot;NAME&quot;)  // 通过注解将属性name变成NAME</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String school;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> has_girlfriend;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> age;<br>    <span class="hljs-keyword">private</span> Object car;<br>    <span class="hljs-keyword">private</span> Object house;<br>    <span class="hljs-keyword">private</span> String[] major;<br>    <span class="hljs-keyword">private</span> String comment;<br>    <span class="hljs-keyword">private</span> String birthday;<br><br><br><span class="hljs-comment">// 如果用transient声明一个实例变量，当对象存储时，它的值不需要维持。换句话来说就是，用transient关键字标记的成员变量不参与序列化过程</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String ignore;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getIgnore</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ignore;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setIgnore</span><span class="hljs-params">(String ignore)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.ignore = ignore;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSchool</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> school;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSchool</span><span class="hljs-params">(String school)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.school = school;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isHas_girlfriend</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> has_girlfriend;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHas_girlfriend</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> has_girlfriend)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.has_girlfriend = has_girlfriend;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">double</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getCar</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> car;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCar</span><span class="hljs-params">(Object car)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.car = car;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getHouse</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> house;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHouse</span><span class="hljs-params">(Object house)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.house = house;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String[] getMajor() &#123;<br>        <span class="hljs-keyword">return</span> major;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMajor</span><span class="hljs-params">(String[] major)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.major = major;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getComment</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> comment;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setComment</span><span class="hljs-params">(String comment)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.comment = comment;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBirthday</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBirthday</span><span class="hljs-params">(String birthday)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.birthday = birthday;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Diaosi&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, school=&#x27;&quot;</span> + school + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, has_girlfriend=&quot;</span> + has_girlfriend +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, car=&quot;</span> + car +<br>                <span class="hljs-string">&quot;, house=&quot;</span> + house +<br>                <span class="hljs-string">&quot;, major=&quot;</span> + Arrays.toString(major) +<br>                <span class="hljs-string">&quot;, comment=&#x27;&quot;</span> + comment + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, birthday=&#x27;&quot;</span> + birthday + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>ps:关键字  <strong>transient</strong>  如果用transient声明一个实例变量，当对象存储时，它的值不需要维持。换句话来说就是，用transient关键字标记的成员变量不参与序列化过程。</p><h5 id="生成json"><a href="#生成json" class="headerlink" title="生成json"></a>生成json</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> gson;<br><br><span class="hljs-keyword">import</span> bean.Diaosi;<br><span class="hljs-keyword">import</span> com.google.gson.FieldNamingStrategy;<br><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><span class="hljs-keyword">import</span> com.google.gson.GsonBuilder;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> mohuani</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-05-09 0:15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GsonCreateSample</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Diaosi diaosi = <span class="hljs-keyword">new</span> Diaosi();<br>        diaosi.setName(<span class="hljs-string">&quot;wfk&quot;</span>);<br>        diaosi.setAge(<span class="hljs-number">25.2</span>);<br>        diaosi.setBirthday(<span class="hljs-string">&quot;1996-07-01&quot;</span>);<br>        diaosi.setSchool(<span class="hljs-string">&quot;蓝翔&quot;</span>);<br>        diaosi.setMajor(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;理发&quot;</span>, <span class="hljs-string">&quot;挖掘机&quot;</span>&#125;);<br>        diaosi.setHas_girlfriend(<span class="hljs-keyword">true</span>);<br>        diaosi.setCar(<span class="hljs-keyword">null</span>);<br>        diaosi.setHouse(<span class="hljs-keyword">null</span>);<br>        diaosi.setComment(<span class="hljs-string">&quot;这是一个注释1&quot;</span>);<br>        diaosi.setIgnore(<span class="hljs-string">&quot;忽略这条属性&quot;</span>);<br><br>        Gson gson = <span class="hljs-keyword">new</span> Gson();<br>        System.out.println(gson.toJson(diaosi));<br><br>        <span class="hljs-comment">// 美化调试</span><br>        GsonBuilder gsonBuilder = <span class="hljs-keyword">new</span> GsonBuilder();<br>        gsonBuilder.setPrettyPrinting();<br>        gsonBuilder.setFieldNamingStrategy(<span class="hljs-keyword">new</span> FieldNamingStrategy() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">translateName</span><span class="hljs-params">(Field field)</span> </span>&#123;<br>                <span class="hljs-comment">// 将原有的属性name变成NAME</span><br>                <span class="hljs-keyword">if</span> (field.getName().equals(<span class="hljs-string">&quot;name&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;NAME&quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">return</span> field.getName();<br>            &#125;<br>        &#125;);<br>        Gson gson1 = gsonBuilder.create();<br>        System.out.println(gson1.toJson(diaosi));<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 反射</title>
    <link href="/2016/06/15/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%20%E5%8F%8D%E5%B0%84/"/>
    <url>/2016/06/15/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%20%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h5 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h5><p>反射——Java高级开发必须懂的 <a href="https://www.imooc.com/learn/199">https://www.imooc.com/learn/199</a></p><hr><h4 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h4><ul><li>在面向对象的世界里，万事万物皆对象。（java语言中，静态的成员、普通数据类型除外)<br> 类是不是对象呢?类是(哪个类的对象呢?)谁的对象呢?<br> 类是对象，类是java.lang.Class类的实例对象</li><li>这个对象到底如何表示</li><li>Class.forName(“类的全称”)<div class="hljs code-wrapper"><pre><code> 不仅表示了，类的类类型，还代表了动态加载类 请大家区分编译、运行 编译时刻加载类是静态加载类， new创建对象是静态加载类，在编译时刻就需要加载所有的可能使用到的类， 运行时刻加载类是动态加载类</code></pre></div></li><li>基本的数据类型<div class="hljs code-wrapper"><pre><code>void关键字  都存在类类型 </code></pre></div></li><li>Class类的基本API操作</li></ul><h4 id="方法的反射"><a href="#方法的反射" class="headerlink" title="方法的反射"></a>方法的反射</h4><ul><li>如何获取某个方法<br>  方法的名称和方法的参数列表才能唯一决定某个方法</li><li>方法反射的操作<br> method.invoke(对象，参数列表)</li><li>为什么要用方法的反射<br>  why?指定方法名称调用方法<br>  举个实际应用的案例  —-&gt;通过标准JavaBean的属性名获取其属性值<br>  BeanUtil类</li><li>通过Class,Method来认识泛型的本质</li></ul><h5 id="反射-Class类的使用"><a href="#反射-Class类的使用" class="headerlink" title="反射-Class类的使用"></a>反射-Class类的使用</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.imooc.reflect;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassDemo1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//Foo的实例对象如何表示</span><br>Foo foo1 = <span class="hljs-keyword">new</span> Foo();<span class="hljs-comment">//foo1就表示出来了.</span><br><span class="hljs-comment">//Foo这个类 也是一个实例对象，Class类的实例对象,如何表示呢</span><br><span class="hljs-comment">//任何一个类都是Class的实例对象，这个实例对象有三种表示方式</span><br><br><span class="hljs-comment">//第一种表示方式---&gt;实际在告诉我们任何一个类都有一个隐含的静态成员变量class</span><br>Class c1 = Foo.class;<br><br><span class="hljs-comment">//第二中表达方式  已经知道该类的对象通过getClass方法</span><br>Class c2 = foo1.getClass();<br><br><span class="hljs-comment">/*官网 c1 ,c2 表示了Foo类的类类型(class type)</span><br><span class="hljs-comment"> * 万事万物皆对象，</span><br><span class="hljs-comment"> * 类也是对象，是Class类的实例对象</span><br><span class="hljs-comment"> * 这个对象我们称为该类的类类型</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//不管c1  or c2都代表了Foo类的类类型，一个类只可能是Class类的一个实例对象</span><br>System.out.println(c1 == c2);<br><br><span class="hljs-comment">//第三种表达方式</span><br>Class c3 = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>c3 = Class.forName(<span class="hljs-string">&quot;com.imooc.reflect.Foo&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>System.out.println(c2==c3);<br><br><span class="hljs-comment">//我们完全可以通过类的类类型创建该类的对象实例----&gt;通过c1 or c2 or c3创建Foo的实例对象</span><br><span class="hljs-keyword">try</span> &#123;<br>Foo foo = (Foo)c1.newInstance();<span class="hljs-comment">//需要有无参数的构造方法</span><br>foo.print();<br>&#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><br><br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;foo&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="动态加载类"><a href="#动态加载类" class="headerlink" title="动态加载类"></a>动态加载类</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.reflect;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassDemo2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>Class c1 = <span class="hljs-keyword">int</span>.class;<span class="hljs-comment">//int 的类类型</span><br>Class c2 = String.class;<span class="hljs-comment">//String类的类类型   String类字节码（自己发明的)</span><br>Class c3 = <span class="hljs-keyword">double</span>.class;<br>Class c4 = Double.class;<br>Class c5 = <span class="hljs-keyword">void</span>.class;<br><br>System.out.println(c1.getName());<br>System.out.println(c2.getName());<br>System.out.println(c2.getSimpleName());<span class="hljs-comment">//不包含包名的类的名称</span><br>System.out.println(c5.getName());<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="获取-方法信息-和-成员变量构造函数信息"><a href="#获取-方法信息-和-成员变量构造函数信息" class="headerlink" title="获取 方法信息 和 成员变量构造函数信息"></a>获取 方法信息 和 成员变量构造函数信息</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.reflect;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassUtil</span> </span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打印类的信息，包括类的成员函数、成员变量(只获取成员函数)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> obj 该对象所属类的信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printClassMethodMessage</span><span class="hljs-params">(Object obj)</span></span>&#123;<br><span class="hljs-comment">//要获取类的信息  首先要获取类的类类型</span><br>Class c = obj.getClass();<span class="hljs-comment">//传递的是哪个子类的对象  c就是该子类的类类型</span><br><span class="hljs-comment">//获取类的名称</span><br>System.out.println(<span class="hljs-string">&quot;类的名称是:&quot;</span>+c.getName());<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Method类，方法对象</span><br><span class="hljs-comment"> * 一个成员方法就是一个Method对象</span><br><span class="hljs-comment"> * getMethods()方法获取的是所有的public的函数，包括父类继承而来的</span><br><span class="hljs-comment"> * getDeclaredMethods()获取的是所有该类自己声明的方法，不问访问权限</span><br><span class="hljs-comment"> */</span><br>Method[] ms = c.getMethods();<span class="hljs-comment">//c.getDeclaredMethods()</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ms.length;i++)&#123;<br><span class="hljs-comment">//得到方法的返回值类型的类类型</span><br>Class returnType = ms[i].getReturnType();<br>System.out.print(returnType.getName()+<span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-comment">//得到方法的名称</span><br>System.out.print(ms[i].getName()+<span class="hljs-string">&quot;(&quot;</span>);<br><span class="hljs-comment">//获取参数类型---&gt;得到的是参数列表的类型的类类型</span><br>Class[] paramTypes = ms[i].getParameterTypes();<br><span class="hljs-keyword">for</span> (Class class1 : paramTypes) &#123;<br>System.out.print(class1.getName()+<span class="hljs-string">&quot;,&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;)&quot;</span>);<br>&#125;<br>&#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取成员变量的信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> obj</span><br><span class="hljs-comment">     */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printFieldMessage</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>Class c = obj.getClass();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 成员变量也是对象</span><br><span class="hljs-comment"> * java.lang.reflect.Field</span><br><span class="hljs-comment"> * Field类封装了关于成员变量的操作</span><br><span class="hljs-comment"> * getFields()方法获取的是所有的public的成员变量的信息</span><br><span class="hljs-comment"> * getDeclaredFields获取的是该类自己声明的成员变量的信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//Field[] fs = c.getFields();</span><br>Field[] fs = c.getDeclaredFields();<br><span class="hljs-keyword">for</span> (Field field : fs) &#123;<br><span class="hljs-comment">//得到成员变量的类型的类类型</span><br>Class fieldType = field.getType();<br>String typeName = fieldType.getName();<br><span class="hljs-comment">//得到成员变量的名称</span><br>String fieldName = field.getName();<br>System.out.println(typeName+<span class="hljs-string">&quot; &quot;</span>+fieldName);<br>&#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打印对象的构造函数的信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> obj</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printConMessage</span><span class="hljs-params">(Object obj)</span></span>&#123;<br>Class c = obj.getClass();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 构造函数也是对象</span><br><span class="hljs-comment"> * java.lang. Constructor中封装了构造函数的信息</span><br><span class="hljs-comment"> * getConstructors获取所有的public的构造函数</span><br><span class="hljs-comment"> * getDeclaredConstructors得到所有的构造函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//Constructor[] cs = c.getConstructors();</span><br>Constructor[] cs = c.getDeclaredConstructors();<br><span class="hljs-keyword">for</span> (Constructor constructor : cs) &#123;<br>System.out.print(constructor.getName()+<span class="hljs-string">&quot;(&quot;</span>);<br><span class="hljs-comment">//获取构造函数的参数列表---&gt;得到的是参数列表的类类型</span><br>Class[] paramTypes = constructor.getParameterTypes();<br><span class="hljs-keyword">for</span> (Class class1 : paramTypes) &#123;<br>System.out.print(class1.getName()+<span class="hljs-string">&quot;,&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;)&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.reflect;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassDemo3</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>String s = <span class="hljs-string">&quot;hello&quot;</span>;<br>ClassUtil.printClassMethodMessage(s);<br><br>    Integer n1 = <span class="hljs-number">1</span>;<br>    ClassUtil.printClassMethodMessage(n1);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.reflect;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassDemo5</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>ClassUtil.printConMessage(<span class="hljs-string">&quot;hello&quot;</span>);<br>ClassUtil.printConMessage(<span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>));<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="方法反射的基本操作"><a href="#方法反射的基本操作" class="headerlink" title="方法反射的基本操作"></a>方法反射的基本操作</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.reflect;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodDemo1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>   <span class="hljs-comment">//要获取print(int ,int )方法  1.要获取一个方法就是获取类的信息，获取类的信息首先要获取类的类类型</span><br>A a1 = <span class="hljs-keyword">new</span> A();<br>Class c = a1.getClass();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 2.获取方法 名称和参数列表来决定  </span><br><span class="hljs-comment"> * getMethod获取的是public的方法</span><br><span class="hljs-comment"> * getDelcaredMethod自己声明的方法</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//Method m =  c.getMethod(&quot;print&quot;, new Class[]&#123;int.class,int.class&#125;);</span><br>    Method m = c.getMethod(<span class="hljs-string">&quot;print&quot;</span>, <span class="hljs-keyword">int</span>.class,<span class="hljs-keyword">int</span>.class);<br>    <br>    <span class="hljs-comment">//方法的反射操作  </span><br>    <span class="hljs-comment">//a1.print(10, 20);方法的反射操作是用m对象来进行方法调用 和a1.print调用的效果完全相同</span><br>        <span class="hljs-comment">//方法如果没有返回值返回null,有返回值返回具体的返回值</span><br>    <span class="hljs-comment">//Object o = m.invoke(a1,new Object[]&#123;10,20&#125;);</span><br>    Object o = m.invoke(a1, <span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br>    System.out.println(<span class="hljs-string">&quot;==================&quot;</span>);<br>    <span class="hljs-comment">//获取方法print(String,String)</span><br>            Method m1 = c.getMethod(<span class="hljs-string">&quot;print&quot;</span>,String.class,String.class);<br>            <span class="hljs-comment">//用方法进行反射操作</span><br>            <span class="hljs-comment">//a1.print(&quot;hello&quot;, &quot;WORLD&quot;);</span><br>            o = m1.invoke(a1, <span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;WORLD&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;===================&quot;</span>);<br>            <span class="hljs-comment">//Method m2 = c.getMethod(&quot;print&quot;, new Class[]&#123;&#125;);</span><br>            Method m2 = c.getMethod(<span class="hljs-string">&quot;print&quot;</span>);<br>            <span class="hljs-comment">// m2.invoke(a1, new Object[]&#123;&#125;);</span><br>            m2.invoke(a1);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125; <br>     <br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>System.out.println(a+b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(String a,String b)</span></span>&#123;<br>System.out.println(a.toUpperCase()+<span class="hljs-string">&quot;,&quot;</span>+b.toLowerCase());<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>通过反射了解集合泛型的本质</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.reflect;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodDemo4</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br><br>ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>list1.add(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-comment">//list1.add(20);错误的</span><br>Class c1 = list.getClass();<br>Class c2 = list1.getClass();<br>System.out.println(c1 == c2);<br><span class="hljs-comment">//反射的操作都是编译之后的操作</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * c1==c2结果返回true说明编译之后集合的泛型是去泛型化的</span><br><span class="hljs-comment"> * Java中集合的泛型，是防止错误输入的，只在编译阶段有效，</span><br><span class="hljs-comment"> * 绕过编译就无效了</span><br><span class="hljs-comment"> * 验证：我们可以通过方法的反射来操作，绕过编译</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">try</span> &#123;<br>Method m = c2.getMethod(<span class="hljs-string">&quot;add&quot;</span>, Object.class);<br>m.invoke(list1, <span class="hljs-number">20</span>);<span class="hljs-comment">//绕过编译操作就绕过了泛型</span><br>System.out.println(list1.size());<br>System.out.println(list1);<br><span class="hljs-comment">/*for (String string : list1) &#123;</span><br><span class="hljs-comment">System.out.println(string);</span><br><span class="hljs-comment">&#125;*/</span><span class="hljs-comment">//现在不能这样遍历</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>  e.printStackTrace();<br>&#125;<br>&#125;<br><br>&#125;<br><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java序列化</title>
    <link href="/2016/06/15/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2016/06/15/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p>Java 中提供了一种对象持久化保存的技术。常规的对象，在程序结束后就会被回收处理，如果想要对象能被持久化保存下来方便下次使用，就需要使用到对象的序列化和反序列化。<br>序列化成功的条件</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua"><span class="hljs-number">1</span>、该类必须实现java.<span class="hljs-built_in">io</span>.Serializable接口<br><span class="hljs-number">2</span>、类的所有字段都必须是可序列化的（属性类型是实现类java.<span class="hljs-built_in">io</span>.Serializable接口的）；<br></code></pre></div></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs aspectj">序列化是排除某个字段<br>只需要用<span class="hljs-keyword">transient</span>关键字修饰这个字段。<br></code></pre></div></td></tr></table></figure><h5 id="序列化-1"><a href="#序列化-1" class="headerlink" title="序列化"></a>序列化</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pers.pwz.cmdemo;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProgramMain</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>  </span>&#123;<br>Persons p=<span class="hljs-keyword">new</span> Persons();<br>p.Age=<span class="hljs-number">10</span>;<br>p.Name=<span class="hljs-string">&quot;pwz&quot;</span>;<br>p.Height=<span class="hljs-number">170</span>;<br>p.Weight=<span class="hljs-number">60</span>;<br><span class="hljs-keyword">try</span> &#123;<br>File myFile=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;.\\temp&quot;</span>);<br><span class="hljs-keyword">if</span>(!myFile.exists())<br><br>&#123;<br>myFile.mkdirs();<br>&#125;<br><br>FileOutputStream fo=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;.\\temp\\persons.ser&quot;</span>);<br>ObjectOutputStream oo = <span class="hljs-keyword">new</span> ObjectOutputStream(fo);<br>oo.writeObject(p);<br>oo.close();<br>fo.close();<br><br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><br><br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Persons</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span>//这是个标记接口</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Age;<br><span class="hljs-keyword">public</span> String Name;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> Height;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> Weight;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>System.out.println(Name+<span class="hljs-string">&quot;你好&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pers.pwz.cmdemo;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProgramMain</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>  </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>FileInputStream fo=<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;.\\temp\\persons.ser&quot;</span>);<br>ObjectInputStream oo = <span class="hljs-keyword">new</span> ObjectInputStream(fo);<br>Persons p=(Persons) oo.readObject();<br>p.sayHello();<br>oo.close();<br>fo.close();<br><br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><br><br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Persons</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span>//这是个标记接口</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Age;<br><span class="hljs-keyword">public</span> String Name;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> Height;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> Weight;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>System.out.println(Name+<span class="hljs-string">&quot;你好&quot;</span>);<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反射的三种实现方式</title>
    <link href="/2016/06/15/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%E5%8F%8D%E5%B0%84%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <url>/2016/06/15/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%E5%8F%8D%E5%B0%84%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>Java反射的三种实现方式</p><p>Foo foo = new Foo();</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">第一种：通过Object类的getClass方法<br>Class cla = foo.getClass();<br><br>第二种：通过对象实例方法获取对象<br>Class cla = foo.class;<br><br>第三种：通过Class.forName方式<br>Class cla = Class.forName(<span class="hljs-string">&quot;xx.xx.Foo&quot;</span>);<br><br>对于有空构造函数的类 可以直接用字节码文件获取实例：<br>Object o = clazz.newInstance();　　<span class="hljs-comment">// 会调用空参构造器 如果没有则会报错</span><br><br>对于没有空的构造函数的类则需要先获取到他的构造对象 在通过该构造方法类获取实例：<br>Constroctor constroctor = clazz.getConstructor(String.class, <span class="hljs-keyword">int</span>.class); <span class="hljs-comment">// 获取构造函数 </span><br>Object obj = constroctor.newInstance(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">18</span>); <span class="hljs-comment">// 通过构造器对象的newInstance方法进行对象的初始化</span><br><br>Constroctor constroctor = clazz.getConstructors(); <span class="hljs-comment">// 获取所有的构造函数 </span><br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProgramMain</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Persons person = getInstance(<span class="hljs-string">&quot;english&quot;</span>);<br>        person.say();<br><br>        Persons person2 = getInstanceByReflector(Chinese.class);<br>        person2.say();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Persons <span class="hljs-title">getInstance</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Persons person = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">if</span> (name.equalsIgnoreCase(<span class="hljs-string">&quot;Chinese&quot;</span>)) &#123;<br>            person = <span class="hljs-keyword">new</span> Chinese();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name.equalsIgnoreCase(<span class="hljs-string">&quot;English&quot;</span>)) &#123;<br>            person = <span class="hljs-keyword">new</span> English();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;请传递正确的参数&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过反射</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> personClass</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Persons <span class="hljs-title">getInstanceByReflector</span><span class="hljs-params">(Class personClass)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Persons person = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            person = (Persons) personClass.getConstructor().newInstance();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;请传入正确的参数&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="获取构造函数"><a href="#获取构造函数" class="headerlink" title="获取构造函数"></a>获取构造函数</h5><p>1、知道构造函数精确的参数类型的</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br>Constructor c=c1.getConstructor(String.class,Integer.class);<span class="hljs-comment">//参数可以为空，根据知道的参数类型和个数来写</span><br></code></pre></div></td></tr></table></figure><p>2、不知道构造函数精确的参数类型</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br>Constructor[] constructors=c1.getConstructors();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; constructors.length; i++) &#123;<br> Class [] parameters= constructors[i].getParameterTypes();<span class="hljs-comment">//获得构造函数的参数列表</span><br> <span class="hljs-keyword">if</span>(parameters.length&lt;=<span class="hljs-number">0</span>)<br> &#123;<br> <br> System.out.println(<span class="hljs-string">&quot;一个无参的构造函数&quot;</span>);<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br> String [] typeName=<span class="hljs-keyword">new</span> String[parameters.length];<br> <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;typeName.length;j++)<br> &#123;<br> typeName[j]= parameters[j].getSimpleName();<span class="hljs-comment">//获取参数的类型名 </span><br> &#125;<br> System.out.println(String.join(<span class="hljs-string">&quot;,&quot;</span>, typeName));<br> &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="创建实例对象"><a href="#创建实例对象" class="headerlink" title="创建实例对象"></a>创建实例对象</h5><p>通过构造函数去创建，调用Constructor对象的newInstance()方法创建对象。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br>Chinese chinese=(Chinese) c1.getConstructor().newInstance();<br>chinese.say();<br></code></pre></div></td></tr></table></figure><h5 id="获取方法并执行"><a href="#获取方法并执行" class="headerlink" title="获取方法并执行"></a>获取方法并执行</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">1</span>、获取所有的非<span class="hljs-keyword">private</span>方法<br>Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br>Object chinese= c1.getConstructor().newInstance();<br>Method[] methods1= c1.getMethods();<span class="hljs-comment">//获取所有的非private方法，并且父类的方法也会获取</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;methods1.length;i++)<br>&#123;<br>Class[] parameters= methods1[i].getParameterTypes();<br><span class="hljs-keyword">if</span>(parameters.length&lt;=<span class="hljs-number">0</span>)<br>&#123;<br> System.out.println(methods1[i].getName()+<span class="hljs-string">&quot;()&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>String [] typeName=<span class="hljs-keyword">new</span> String[parameters.length];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;parameters.length;j++)<br>&#123;<br><br>typeName[j]=parameters[j].getSimpleName();<br>&#125;<br>System.out.println(methods1[i].getName()+<span class="hljs-string">&quot;(&quot;</span>+String.join(<span class="hljs-string">&quot;,&quot;</span>,typeName)+<span class="hljs-string">&quot;)&quot;</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-number">2</span>、获取所有的当前类定义的所有方法，包括私有方法<br>Method[] methods1= c1.getDeclaredMethods();<span class="hljs-comment">//获取当前类定义的所有，包括私有方法</span><br><span class="hljs-number">3</span>、获取指定方法名的方法<br>    Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br>Object chinese= c1.getConstructor().newInstance();<br>    Method setNumber=c1.getDeclaredMethod(<span class="hljs-string">&quot;setNumber&quot;</span>, Integer.class);<span class="hljs-comment">//如果方法没有参数就可以不用写，另外需要注意参数类型和定义方法的参数类型保持一致</span><br><br><span class="hljs-number">4</span>、获取父类的私有方法<br>Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br>    Class c2=c1.getSuperclass();<br>    <span class="hljs-comment">//通过c2去获取父类中的私有方法</span><br><br><span class="hljs-number">5</span>、执行方法<br>Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br>Object chinese= c1.getConstructor().newInstance();<br>    Method setNumber=c1.getDeclaredMethod(<span class="hljs-string">&quot;setNumber&quot;</span>, Integer.class);<span class="hljs-comment">//如果方法没有参数就可以不用写，另外需要注意参数类型和定义方法的参数类型保持一致</span><br>    setNumber.invoke(chinese, <span class="hljs-number">1</span>);<span class="hljs-comment">//第一个参数是实例对象，后面的参数是调用方法所需的参数</span><br></code></pre></div></td></tr></table></figure><h5 id="获取字段"><a href="#获取字段" class="headerlink" title="获取字段"></a>获取字段</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-number">1</span>、获取所有非<span class="hljs-keyword">private</span>类型的字段，包括父类的<br> Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br> Object object=c1.getConstructor().newInstance();<br> Field [] fields=  c1.getFields();<span class="hljs-comment">//或者所有的非private类型的字段，包括父类的</span><br> <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;fields.length;i++)<br> &#123;<br> System.out.println(fields[i].getName());<br> &#125;<br> <br><span class="hljs-number">2</span>、获取当前类所有字段，包括私有的<br> Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br> Object object=c1.getConstructor().newInstance();<br> Field [] fields=  c1.getDeclaredFields();<span class="hljs-comment">//获取当前类中所有的字段</span><br> <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;fields.length;i++)<br> &#123;<br> System.out.println(fields[i].getName());<br> &#125;<br> <br><span class="hljs-number">3</span>、获取父类的所有字段，包括私有的<br><br>    Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br>    Class c2=c1.getSuperclass();<br>    <span class="hljs-comment">//通过c2去获取父类中的私有字段</span><br><span class="hljs-number">4</span>、获取指定的字段<br> Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br> Object object=c1.getConstructor().newInstance();<br> Field field=  c1.getDeclaredField(<span class="hljs-string">&quot;Age&quot;</span>);<br><br><span class="hljs-number">5</span>、使用<br> Class c1=Class.forName(<span class="hljs-string">&quot;pers.pwz.cmdemo.Chinese&quot;</span>);<br> Object object1=c1.getConstructor().newInstance();<br> Field field=  c1.getDeclaredField(<span class="hljs-string">&quot;Age&quot;</span>);<br> field.setAccessible(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//如果字段是私有的，需要先这是允许访问</span><br> <span class="hljs-comment">//取值</span><br> Object  object2=field.get(object1);<br> System.out.println(object2);<br> <span class="hljs-comment">//赋值</span><br> field.set(object1, <span class="hljs-number">21</span>);<br> <span class="hljs-comment">//取值</span><br> Object  object3=field.get(object1);<br> System.out.println(object3);<br><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的session和cookie</title>
    <link href="/2016/06/15/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%E4%B8%AD%E7%9A%84session%E5%92%8Ccookie/"/>
    <url>/2016/06/15/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%E4%B8%AD%E7%9A%84session%E5%92%8Ccookie/</url>
    
    <content type="html"><![CDATA[<h5 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h5><p>cookie是小段文本信息，在网络服务器上生成，并发给浏览器，通过使用cookie可以记录一些请求数据。流览器将cookie以key/value的形式保存到客户端的某个指定目录下。<br>在使用cookie时，应确保客户端上允许使用cookie，如果客户端禁止使用cookie的话，将导致cookie失效。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">读取cookie<br>Cookie [] cookies=request.getCookies();<br><span class="hljs-keyword">for</span>(Cookie item:cookies)<br>&#123;<br>   System.out.println(item.getName()+”:”+URLDecoder.decode(item.getValue()));<br>\\System.out.println(item.getName()+”:”+ item.getValue());<br><br>设置cookie<br>Cookie cookie=<span class="hljs-keyword">new</span> Cookie(“userName”,”pwz”);<br>response.addCookie(cookie);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果指定名称的cookie已经存在了，那么执行addCookie方法后，新添加的cookie值将会覆盖旧值。</p><p>注意<br>在向cookie保存的信息中如果包含了中文，则需要先使用java.net.URLDecoder类下的encode()方法对信息编码。而在读取这个cookie信息的时候，需要使用decode()方法对信息进行解码</p><h5 id="cookie的作用域"><a href="#cookie的作用域" class="headerlink" title="cookie的作用域"></a>cookie的作用域</h5><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">1</span>、<span class="hljs-selector-tag">setPath</span>()<br>通过<span class="hljs-selector-tag">setPath</span>可以限制<span class="hljs-selector-tag">cookies</span>的使用范围，<span class="hljs-selector-tag">cookie</span>默认的使用方范围实在它产生的目录及其目录之内的目录，产生目录外的目录中都不能使用次<span class="hljs-selector-tag">cookie</span>。<br>假设在<span class="hljs-selector-tag">tomcat</span>的<span class="hljs-selector-tag">webapp</span>目录下有两个项目<span class="hljs-selector-tag">weba</span>和<span class="hljs-selector-tag">webb</span>，<br>如果在保存<span class="hljs-selector-tag">cookie</span>时将<span class="hljs-selector-tag">setPath</span>()的参数设置为“/”那么在<span class="hljs-selector-tag">weba</span>和<span class="hljs-selector-tag">webb</span>中都能使用次<span class="hljs-selector-tag">cookie</span>;<br>如果设置为“/<span class="hljs-selector-tag">weba</span>”或者”/<span class="hljs-selector-tag">web</span>/”,那么只能在<span class="hljs-selector-tag">weba</span>下面使用；<br>如果在<span class="hljs-selector-tag">weba</span>中创建的<span class="hljs-selector-tag">cookie</span>，而<span class="hljs-selector-tag">path</span>设置为”/<span class="hljs-selector-tag">webb</span>/”那么在<span class="hljs-selector-tag">weba</span>中也无法使用，只能在<span class="hljs-selector-tag">webb</span>中使用<br><span class="hljs-selector-tag">2</span>、<span class="hljs-selector-tag">setDomain</span>()<br><span class="hljs-selector-tag">A</span>机所在的域：<span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.com</span>,<span class="hljs-selector-tag">A</span>有应用<span class="hljs-selector-tag">weba</span> <br><span class="hljs-selector-tag">B</span>机所在的域：<span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.com</span>，<span class="hljs-selector-tag">B</span>有应用<span class="hljs-selector-tag">webb</span> <br><span class="hljs-selector-tag">1</span>）在<span class="hljs-selector-tag">weba</span>下面设置<span class="hljs-selector-tag">cookie</span>的时候，增加<span class="hljs-selector-tag">cookie</span><span class="hljs-selector-class">.setDomain</span>(“.b.com”);，这样在<span class="hljs-selector-tag">webb</span>下面就可以取到<span class="hljs-selector-tag">cookie</span>。<br><br><span class="hljs-selector-tag">2</span>）输入<span class="hljs-selector-tag">url</span>访问<span class="hljs-selector-tag">webapp_b</span>的时候，必须输入域名才能解析。比如说在<span class="hljs-selector-tag">A</span>机器输入：<span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//haha.b.com:8080/webb,可以获取weba在客户端设置的cookie，而B机器访问本机的应用，输入：http://localhost:8080/webb则不可以获得cookie。</span><br><br><span class="hljs-selector-tag">3</span>）设置了<span class="hljs-selector-tag">cookie</span><span class="hljs-selector-class">.setDomain</span>(“.b.com”);，还可以在默认的<span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.com</span>下面共享<br></code></pre></div></td></tr></table></figure><h5 id="cookie的有效期"><a href="#cookie的有效期" class="headerlink" title="cookie的有效期"></a>cookie的有效期</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">1、如果没有显示设置cookie的有效期，那么cookie的有效期就是浏览器关闭后失效<br>2、如果<span class="hljs-keyword">set</span>MaxAge<span class="hljs-params">()</span>的参数为整数，那么就cookie一直到指定时候后失效，这个过程中无论浏览器是否关闭，cookie中保存的信息都会有效。<br>3、如果<span class="hljs-keyword">set</span>MaxAge<span class="hljs-params">()</span>的参数为0，那么就表示删除该cookie。<br>4、如果<span class="hljs-keyword">set</span>MaxAge<span class="hljs-params">()</span>的参数为负数，那么cookie就是临时保存，不会持久化保存到浏览器指定的目录中去。当窗口或者子窗口关闭后就会失效。<br>5、<span class="hljs-keyword">set</span>MaxAge的参数单位是秒<br></code></pre></div></td></tr></table></figure><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><p> session在网络中被称为会话，和cookie的功能类似，用于保存请求信息。用户可以通过session在引用程序的web页面之间进行跳转，使整个会话一直保存，知道浏览器关闭。但是如果一个会话长时间没有向服务器发出请求，那么这个会话会自动关闭失效。这个时间取决于服务器，例如，tomcat服务器默认为30秒，这个时间可以通过程序进行修改。<br>实际上，一个会话过程可以理解为一次打电话，通过从拿起电话开始，到挂断电话为止，在这过程中，你可以聊很多话题，甚至是重复的话题。一个会话也是</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">保存会话信息<br><span class="hljs-keyword">session</span>.setAttribute(String <span class="hljs-type">name</span>,<span class="hljs-keyword">Object</span> <span class="hljs-keyword">object</span>);<br><span class="hljs-type">name</span>是会话信息中的名字，<span class="hljs-keyword">object</span>是会话名字所代表的值。<br><br>读取会话信息<br><span class="hljs-keyword">session</span>.getAttribute(String <span class="hljs-type">name</span>);<br>点用此方法的返回值是<span class="hljs-keyword">Object</span>类型的，因此在使用之前需要对其进行类型转化。<br><br>移除指定的会话<br><span class="hljs-keyword">session</span>.removeAttribute(String <span class="hljs-type">name</span>);<br>注：如果要需要的会话名不存在，那么将会抛出异常<br><br>设置<span class="hljs-keyword">session</span>有效时间<br>在浏览器长时间没有向服务器发出请求的情况下，可以设置<span class="hljs-keyword">session</span>在多少时间后过期<br><span class="hljs-keyword">session</span>.setMaxInactiveInterval(<span class="hljs-type">int</span> <span class="hljs-type">time</span>)//单位是秒<br><br>销毁<span class="hljs-keyword">session</span><br><span class="hljs-keyword">session</span>.invalidate();<br><span class="hljs-keyword">session</span>对象销毁后，就不可以在当前请求中继续使用该<span class="hljs-keyword">session</span>对象了，如果销毁后再调用就会抛出异常。当浏览器重新发出请求后，服务器会重新创建一个<span class="hljs-keyword">session</span>对象，之前的<span class="hljs-keyword">session</span>对象失效。<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Navicat Premium 12破解方法</title>
    <link href="/2016/04/19/%E5%B7%A5%E5%85%B7/Navicat%20Premium%2012%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/"/>
    <url>/2016/04/19/%E5%B7%A5%E5%85%B7/Navicat%20Premium%2012%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h5 id="Navicat-Premium-12破解方法"><a href="#Navicat-Premium-12破解方法" class="headerlink" title="Navicat Premium 12破解方法"></a>Navicat Premium 12破解方法</h5><div class="hljs code-wrapper"><pre><code>下载地址：http://www.navicat.com.cn/download/navicat-premium破解工具地址：https://github.com/DoubleLabyrinth/navicat-keygen/releases激活原理:https://www.52pojie.cn/thread-688820-1-1.html中文教程:https://www.jianshu.com/p/20eb454a1da4</code></pre></div><p>大家有能力的话，希望还是支持正版。</p>]]></content>
    
    
    <categories>
      
      <category>Navicat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Navicat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel - DB - facade实现CURD</title>
    <link href="/2015/12/04/PHP/Laravel/Laravel%20-%20DB%20-%20facade%E5%AE%9E%E7%8E%B0CURD/"/>
    <url>/2015/12/04/PHP/Laravel/Laravel%20-%20DB%20-%20facade%E5%AE%9E%E7%8E%B0CURD/</url>
    
    <content type="html"><![CDATA[<p>新建的数据表SQL</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> students(<br>    `id` <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    `age` TINYINT UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    `sex` TINYINT UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">10</span> COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>,<br>    `created_at` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> COMMENT <span class="hljs-string">&#x27;新增时间&#x27;</span>,<br>    `updated_at` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span><br>)ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>UTF8 AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">1001</span> COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;学生表&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>在控制器中实现基本的CURD</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">DB</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>    <span class="hljs-comment">//查询操作</span><br>        <span class="hljs-variable">$student</span> = DB::select(<span class="hljs-string">&#x27;select * from student&#x27;</span>);<br>        var_dump(<span class="hljs-variable">$student</span>);<br><br><span class="hljs-comment">//插入操作</span><br>        <span class="hljs-variable">$bool</span> = DB::insert(<span class="hljs-string">&#x27;insert into student (name, age) values (?, ?)&#x27;</span>,<br>            [<span class="hljs-string">&#x27;imooc&#x27;</span>, <span class="hljs-number">19</span>]);<br>        var_dump(<span class="hljs-variable">$bool</span>);<br><br><span class="hljs-comment">//更新操作</span><br>        <span class="hljs-variable">$num</span> = DB::update(<span class="hljs-string">&#x27;update student set age = ? where name = ?&#x27;</span>,<br>            [<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;wfk&#x27;</span>]);<br>        var_dump(<span class="hljs-variable">$num</span>);<br><br><span class="hljs-comment">//查询操作</span><br>        <span class="hljs-variable">$student</span> = DB::select(<span class="hljs-string">&#x27;select * from student where id &gt; ?&#x27;</span>,<br>            [<span class="hljs-number">1001</span>]);<br>        var_dump(<span class="hljs-variable">$student</span>);<br>        dd(<span class="hljs-variable">$student</span>);<br><br><span class="hljs-comment">//删除操作</span><br>        <span class="hljs-variable">$num</span> = DB::delete(<span class="hljs-string">&#x27;delete from student where id &gt; ?&#x27;</span>, [<span class="hljs-number">1001</span>]);<br>        var_dump(<span class="hljs-variable">$num</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel 查询构造器的使用（一）</title>
    <link href="/2015/12/04/PHP/Laravel/Laravel%20%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2015/12/04/PHP/Laravel/Laravel%20%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>使用查询构造器对数据库的 增 - 删 - 改 操作</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//使用查询构造器新增数据</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query1</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">   </span>&#123;<br>       <span class="hljs-variable">$bool</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;insert(<br>           [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;mohuani&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">19</span>]<br>       );<br>       var_dump(<span class="hljs-variable">$bool</span>);<br><br>       <span class="hljs-variable">$id</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;insertGetId(<br>           [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;sean&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">18</span>]<br>       );<br>       var_dump(<span class="hljs-variable">$id</span>);<br><br><br>       <span class="hljs-variable">$id</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;insert([<br>           [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;name1&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">21</span>],<br>           [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;name2&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">22</span>]<br>       ]);<br>       var_dump(<span class="hljs-variable">$id</span>);<br><br>   &#125;<br><br><br>   <span class="hljs-comment">//使用查询构造器更新数据</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query2</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">   </span>&#123;<br>       <span class="hljs-variable">$sum</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>           -&gt;where(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-number">1001</span>)<br>           -&gt;update([<span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">30</span>]);<br>       var_dump(<span class="hljs-variable">$sum</span>);<br><br>       <span class="hljs-comment">//实现自增</span><br>       <span class="hljs-variable">$sum</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;increment(<span class="hljs-string">&#x27;age&#x27;</span>);<br>       <span class="hljs-variable">$sum</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;increment(<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-number">3</span>);<br><br>       <span class="hljs-comment">//实现自减</span><br>       <span class="hljs-variable">$sum</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;decrement(<span class="hljs-string">&#x27;age&#x27;</span>);<br>       <span class="hljs-variable">$sum</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;decrement(<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-number">3</span>);<br><br>       <span class="hljs-comment">//使用where条件更新</span><br>       <span class="hljs-variable">$num</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>           -&gt;where(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-number">1004</span>)<br>           -&gt;decrement(<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-number">3</span>);<br>       var_dump(<span class="hljs-variable">$num</span>);<br><br>       <span class="hljs-comment">//使用where条件更新</span><br>       <span class="hljs-variable">$num</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>           -&gt;where(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-number">1004</span>)<br>           -&gt;decrement(<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-number">3</span>, [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;iimooc&#x27;</span>]);<br>       var_dump(<span class="hljs-variable">$num</span>);<br>   &#125;<br><br>   <span class="hljs-comment">//使用查询构造器删除数据</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query3</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">   </span>&#123;<br>       <span class="hljs-variable">$num</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>           -&gt;where(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-number">1008</span>)<br>           -&gt;delete();<br>       var_dump(<span class="hljs-variable">$num</span>);<br><br>       <span class="hljs-variable">$num</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>           -&gt;where(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;&gt;=&#x27;</span>, <span class="hljs-number">1008</span>)<br>           -&gt;delete();<br>       var_dump(<span class="hljs-variable">$num</span>);<br><br>       DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;truncate();<br>   &#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel 查询构造器的使用（三）</title>
    <link href="/2015/12/04/PHP/Laravel/Laravel%20%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2015/12/04/PHP/Laravel/Laravel%20%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>查询构造器中的构造函数</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//聚合函数</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query5</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">   </span>&#123;<br>       <span class="hljs-variable">$num</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;count();<br>       var_dump(<span class="hljs-variable">$num</span>);<br><br>       <span class="hljs-variable">$max</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;max(<span class="hljs-string">&#x27;age&#x27;</span>);<br>       var_dump(<span class="hljs-variable">$max</span>);<br><br>       <span class="hljs-variable">$min</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;min(<span class="hljs-string">&#x27;age&#x27;</span>);<br>       var_dump(<span class="hljs-variable">$min</span>);<br><br>       <span class="hljs-variable">$avg</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;avg(<span class="hljs-string">&#x27;age&#x27;</span>);<br>       var_dump(<span class="hljs-variable">$avg</span>);<br><br>       <span class="hljs-variable">$sum</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;sum(<span class="hljs-string">&#x27;age&#x27;</span>);<br>       var_dump(<span class="hljs-variable">$sum</span>);<br>   &#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel 查询构造器的使用（二）</title>
    <link href="/2015/12/04/PHP/Laravel/Laravel%20%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2015/12/04/PHP/Laravel/Laravel%20%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>使用查询构造器对数据库的 查询 操作</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//使用查询构造器查询数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query4</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//get()取出所有的数据</span><br>        <span class="hljs-variable">$student</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;get();<br>        dd(<span class="hljs-variable">$student</span>);<br><br>        <span class="hljs-comment">//first()取出结果集中的第一条数据</span><br>        <span class="hljs-variable">$student</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;first();<br>        dd(<span class="hljs-variable">$student</span>);<br><br>        <span class="hljs-variable">$student</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>            -&gt;orderBy(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>)<br>            -&gt;first();<br>        dd(<span class="hljs-variable">$student</span>);<br>        <br>        <span class="hljs-comment">//单个where()条件</span><br>        <span class="hljs-variable">$student</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>            -&gt;where(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;&gt;=&#x27;</span>, <span class="hljs-number">1002</span>)<br>            -&gt;get();<br>        dd(<span class="hljs-variable">$student</span>);<br><br>        <span class="hljs-comment">//多个whereRaw()条件</span><br>        <span class="hljs-variable">$student</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>            -&gt;whereRaw(<span class="hljs-string">&#x27;id &gt;= ? and age  &gt; ?&#x27;</span>, [<span class="hljs-number">1002</span>, <span class="hljs-number">20</span>])<br>            -&gt;get();<br>        dd(<span class="hljs-variable">$student</span>);<br><br>        <span class="hljs-comment">//pluck()返回具体的字段</span><br>        <span class="hljs-variable">$name</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>            -&gt;pluck(<span class="hljs-string">&#x27;name&#x27;</span>);<br>        dd(<span class="hljs-variable">$name</span>);<br><br>        <span class="hljs-comment">//lists()效果和pluck()类似</span><br>        <span class="hljs-variable">$name</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>            -&gt;lists(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>);<br>        dd(<span class="hljs-variable">$name</span>);<br><br>        <span class="hljs-comment">//select()</span><br>        <span class="hljs-variable">$student</span> = DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)<br>            -&gt;select(<span class="hljs-string">&#x27;id&#x27;</span> ,<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>)<br>            -&gt;get();<br>        dd(<span class="hljs-variable">$student</span>);<br><br>        <span class="hljs-comment">//chunk()一次查询几条数据</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span>;<br>        DB::table(<span class="hljs-string">&#x27;student&#x27;</span>)-&gt;chunk(<span class="hljs-number">2</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$student</span></span>)</span>&#123;<br>            var_dump(<span class="hljs-variable">$student</span>);<br>        &#125;);<br>    &#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel-事件监听</title>
    <link href="/2015/12/04/PHP/Laravel/Laravel-%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/"/>
    <url>/2015/12/04/PHP/Laravel/Laravel-%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/</url>
    
    <content type="html"><![CDATA[<p>看同事的代码里面经常出现Laravel事件，简单的学一下，了解了解执行逻辑</p><p>参考资料：</p><p>Bilibili视频：<a href="https://www.bilibili.com/video/BV1DJ411Q7rT">Laravel 6 事件 （解耦必备）</a><br>Laravel8文档：<a href="https://learnku.com/docs/laravel/8.x/events/9391#">事件系统</a>博客：<a href="https://www.cnblogs.com/fps2tao/p/9681455.html">简单易懂的laravel事件</a></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP  namespace</title>
    <link href="/2015/12/04/PHP/Laravel/PHP%20%20namespace%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2015/12/04/PHP/Laravel/PHP%20%20namespace%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>#命名空间的作用域</p><h3 id="1-函数的namespace"><a href="#1-函数的namespace" class="headerlink" title="1.函数的namespace"></a><strong>1.函数的namespace</strong></h3><ul><li>各自命名空间调用各自命名空间的函数</li></ul><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">a</span><br>&#123;<br>    <span class="hljs-title">function</span> <span class="hljs-title">hello</span>()<br>    &#123;<br>        return &#x27;命名空间&#x27; . __NAMESPACE__ . &#x27;&lt;br&gt;函数名称是：&#x27; . __FUNCTION__;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">b</span><br>&#123;<br>    <span class="hljs-title">function</span> <span class="hljs-title">hello</span>()<br>    &#123;<br>        return &#x27;命名空间&#x27; . __NAMESPACE__ . &#x27;&lt;br&gt;函数名称是：&#x27; . __FUNCTION__;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span><br>&#123;<br>    <span class="hljs-title">echo</span> <span class="hljs-title">a</span>\<span class="hljs-title">hello</span>();     <span class="hljs-comment">//调用a空间中的hello</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> b\hello();     <span class="hljs-comment">//调用b空间中的hello</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>运行的结果</p><p><img src="https://img-blog.csdn.net/20180410160251563?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><ul><li>还可以在b的命名空间中调用a命名空间中的函数</li></ul><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">a</span><br>&#123;<br>    <span class="hljs-title">function</span> <span class="hljs-title">hello</span>()<br>    &#123;<br>        return &#x27;命名空间&#x27; . __NAMESPACE__ . &#x27;&lt;br&gt;函数名称是：&#x27; . __FUNCTION__;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">b</span><br>&#123;<br>    <span class="hljs-title">function</span> <span class="hljs-title">hello</span>()<br>    &#123;<br>        <span class="hljs-title">return</span> \<span class="hljs-title">a</span>\<span class="hljs-title">hello</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span><br>&#123;<br>    <span class="hljs-title">echo</span> <span class="hljs-title">a</span>\<span class="hljs-title">hello</span>();     <span class="hljs-comment">//调用a空间中的hello</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> b\hello();     <span class="hljs-comment">//b调用a空间中的hello</span><br>&#125;<br><br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>运行结果</p><p><img src="https://img-blog.csdn.net/20180410161125940?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="2-类的命名空间"><a href="#2-类的命名空间" class="headerlink" title="2.类的命名空间"></a><strong>2.类的命名空间</strong></h3><ul><li>各自命名空间调用各自命名空间的函数</li></ul><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">a</span><br>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">A</span><br>    &#123;<br>        public $name = &#x27;mohuani&#x27;;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$namespace</span> = <span class="hljs-string">&#x27;命名空间：&#x27;</span> . <span class="hljs-keyword">__NAMESPACE__</span>;<br>            <span class="hljs-variable">$className</span> = <span class="hljs-string">&#x27;类名&#x27;</span> . <span class="hljs-keyword">__CLASS__</span>;<br>            <span class="hljs-variable">$methodName</span> = <span class="hljs-string">&#x27;方法名&#x27;</span> . <span class="hljs-keyword">__METHOD__</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$namespace</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$className</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$methodName</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;name;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">b</span><br>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">A</span><br>    &#123;<br>        public $name = &#x27;mohuani&#x27;;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$namespace</span> = <span class="hljs-string">&#x27;命名空间：&#x27;</span> . <span class="hljs-keyword">__NAMESPACE__</span>;<br>            <span class="hljs-variable">$className</span> = <span class="hljs-string">&#x27;类名&#x27;</span> . <span class="hljs-keyword">__CLASS__</span>;<br>            <span class="hljs-variable">$methodName</span> = <span class="hljs-string">&#x27;方法名&#x27;</span> . <span class="hljs-keyword">__METHOD__</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$namespace</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$className</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$methodName</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;name;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span><br>&#123;<br>    <span class="hljs-title">echo</span> (<span class="hljs-title">new</span> <span class="hljs-title">a</span>\<span class="hljs-title">A</span>)-&gt;<span class="hljs-title">say</span>();<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> (<span class="hljs-keyword">new</span> b\A)-&gt;say();<br>&#125;<br><br><br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>运行结果</p><p><img src="https://img-blog.csdn.net/20180410162810247?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><ul><li>在b的空间中调用a空间中的类</li></ul><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">a</span><br>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">A</span><br>    &#123;<br>        public $name = &#x27;陌花拟&#x27;;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$namespace</span> = <span class="hljs-string">&#x27;命名空间：&#x27;</span> . <span class="hljs-keyword">__NAMESPACE__</span>;<br>            <span class="hljs-variable">$className</span> = <span class="hljs-string">&#x27;类名&#x27;</span> . <span class="hljs-keyword">__CLASS__</span>;<br>            <span class="hljs-variable">$methodName</span> = <span class="hljs-string">&#x27;方法名&#x27;</span> . <span class="hljs-keyword">__METHOD__</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$namespace</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$className</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$methodName</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;name;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">b</span><br>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">A</span><br>    &#123;<br>        public $name = &#x27;mohuani&#x27;;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$namespace</span> = <span class="hljs-string">&#x27;命名空间：&#x27;</span> . <span class="hljs-keyword">__NAMESPACE__</span>;<br>            <span class="hljs-variable">$className</span> = <span class="hljs-string">&#x27;类名&#x27;</span> . <span class="hljs-keyword">__CLASS__</span>;<br>            <span class="hljs-variable">$methodName</span> = <span class="hljs-string">&#x27;方法名&#x27;</span> . <span class="hljs-keyword">__METHOD__</span>;<br>            <span class="hljs-variable">$temp</span> = (<span class="hljs-keyword">new</span> \a\A)-&gt;name;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$namespace</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$className</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$methodName</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$temp</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span><br>&#123;<br>    <span class="hljs-title">echo</span> (<span class="hljs-title">new</span> <span class="hljs-title">a</span>\<span class="hljs-title">A</span>)-&gt;<span class="hljs-title">say</span>();<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> (<span class="hljs-keyword">new</span> b\A)-&gt;say();<br>&#125;<br><br><br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>运行结果</p><p><img src="https://img-blog.csdn.net/20180410163339119?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>###<strong>3.常量的命名空间</strong></p><ul><li>const创建的常量，受命名空间的限制 </li><li>define创建的常量，不受命名空间的限制</li></ul><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">a</span><br>&#123;<br>    const SITE_NAME = &#x27;陌花拟&#x27;;<br>    <span class="hljs-comment">//define(&#x27;SITE_NAME&#x27;,&#x27;陌花拟&#x27;)</span><br>    <span class="hljs-comment">//define创建的常量，不收命名空间的限制</span><br>&#125;<br><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">b</span><br>&#123;<br>    const SITE_NAME = &#x27;mohuani&#x27;;<br>&#125;<br><br><span class="hljs-keyword">namespace</span><br>&#123;<br>    <span class="hljs-title">echo</span> <span class="hljs-title">a</span>\<span class="hljs-title">SITE_NAME</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> b\SITE_NAME;<br>&#125;<br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>运行结果</p><p><img src="https://img-blog.csdn.net/20180410164321969?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dmazI5NzUwMTk2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel - Eloquent ORM数据处理</title>
    <link href="/2015/12/04/PHP/Laravel/Laravel%20-%20Eloquent%20ORM%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <url>/2015/12/04/PHP/Laravel/Laravel%20-%20Eloquent%20ORM%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>#Laravel - Eloquent ORM数据处理</p><ul><li>将数据库和Model进行绑定</li></ul><figure class="highlight php-template"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php-template"><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><br><span class="php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;</span><br><br><span class="php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Model</span>;</span><br><br><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span></span><br><span class="php">&#123;</span><br><span class="php">    <span class="hljs-comment">// 指定表名</span></span><br><span class="php">    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;student&#x27;</span>;</span><br><br><span class="php">    <span class="hljs-comment">// 指定id</span></span><br><span class="php">    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$primaryKey</span> = <span class="hljs-string">&#x27;id&#x27;</span>;</span><br><br><span class="php">    <span class="hljs-comment">// 指定允许批量赋值的字段</span></span><br><span class="php">    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$fillable</span> = [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>];</span><br><br><span class="php">    <span class="hljs-comment">// 指定不允许批量赋值的字段</span></span><br><span class="php">    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$guarded</span> = [];</span><br><br><span class="php">    <span class="hljs-comment">//自动维护时间戳</span></span><br><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$timestamp</span> = <span class="hljs-literal">true</span>;</span><br><br><span class="php">    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDateFormat</span>(<span class="hljs-params"></span>)</span></span><br><span class="php">    &#123;</span><br><span class="php">        <span class="hljs-keyword">return</span> time();</span><br><span class="php">    &#125;</span><br><br><span class="php">    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asDateTime</span>(<span class="hljs-params"><span class="hljs-variable">$val</span></span>)</span></span><br><span class="php">    &#123;</span><br><span class="php">        <span class="hljs-keyword">return</span> <span class="hljs-variable">$val</span>;</span><br><span class="php">    &#125;</span><br><span class="php">&#125;</span><br></code></pre></div></td></tr></table></figure><p> <strong>1. 使用模型查询数据</strong></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">orm1</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//all()</span><br>    <span class="hljs-variable">$student</span> = Student::all();<br>    dd(<span class="hljs-variable">$student</span>);<br><br>    <span class="hljs-comment">//find()</span><br>    Student::find(<span class="hljs-number">1001</span>);<br>    dd(<span class="hljs-variable">$student</span>);<br><br>    <span class="hljs-comment">//findOrFail()</span><br>    <span class="hljs-variable">$student</span> = Student::findOrFail(<span class="hljs-number">1001</span>);<br>    dd(<span class="hljs-variable">$student</span>);<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>2.使用模型新增数据</strong></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">orm2</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//使用模型新增数据</span><br>    <span class="hljs-variable">$student</span> = <span class="hljs-keyword">new</span> Student();<br>    <span class="hljs-variable">$student</span>-&gt;name = <span class="hljs-string">&#x27;sean1&#x27;</span>;<br>    <span class="hljs-variable">$student</span>-&gt;age = <span class="hljs-number">19</span>;<br>    <span class="hljs-variable">$bool</span> = <span class="hljs-variable">$student</span>-&gt;save();<br>    dd(<span class="hljs-variable">$bool</span>);<br><br>    <span class="hljs-variable">$student</span> = Student::find(<span class="hljs-number">1012</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$student</span>-&gt;created_at;<br>    <span class="hljs-keyword">echo</span> date(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>);<br><br>    <span class="hljs-comment">//使用模型的Create()方法新增数据</span><br>    <span class="hljs-variable">$student</span> = Student::create(<br>        [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;imooc&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">18</span>]<br>    );<br>    dd(<span class="hljs-variable">$student</span>);<br><br>    <span class="hljs-comment">//firstOrCreate()</span><br>    <span class="hljs-variable">$student</span> = Student::firstOrCreate(<br>        [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;imoocs&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">18</span>]<br>    );<br>    dd(<span class="hljs-variable">$student</span>);<br><br>    <span class="hljs-comment">//firstOrNew()</span><br>    <span class="hljs-variable">$student</span> = Student::firstOrNew(<br>        [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;imoocss&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">18</span>]<br>    );<br>    <span class="hljs-variable">$bool</span> = <span class="hljs-variable">$student</span>-&gt;save();<br>    dd(<span class="hljs-variable">$student</span>);<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>3.通过模型更新数据</strong></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">orm3</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//通过模型更新数据</span><br>    <span class="hljs-variable">$student</span> = Student::find(<span class="hljs-number">1014</span>);<br>    <span class="hljs-variable">$student</span>-&gt;name = <span class="hljs-string">&#x27;kitty&#x27;</span>;<br>    <span class="hljs-variable">$bool</span> = <span class="hljs-variable">$student</span>-&gt;save();<br>    var_dump(<span class="hljs-variable">$bool</span>);<br><br>    <span class="hljs-variable">$sum</span> = Student::where(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-number">1013</span>)-&gt;update(<br>        [<span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">32</span>]<br>    );<br>    var_dump(<span class="hljs-variable">$sum</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>4.通过模型删除数据</strong></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">orm4</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//通过主键查找</span><br>    <span class="hljs-variable">$bool</span> = Student::find(<span class="hljs-number">1005</span>)-&gt;delete();<br>    dd(<span class="hljs-variable">$bool</span>);<br><br>    <span class="hljs-comment">//通过主键删除税数据</span><br>    <span class="hljs-variable">$num</span> = Student::detroy(<span class="hljs-number">1013</span>);<br>    <span class="hljs-variable">$num</span> = Student::detroy(<span class="hljs-number">1013</span>, <span class="hljs-number">1014</span>);<br>    <span class="hljs-variable">$num</span> = Student::detroy([<span class="hljs-number">1013</span>,<span class="hljs-number">1014</span>]);<br>    var_dump(<span class="hljs-variable">$num</span>);<br><br>    <span class="hljs-comment">//通过where条件删除数据</span><br>    <span class="hljs-variable">$num</span> = Student::where(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-string">&#x27;1007&#x27;</span>)-&gt;delete();<br>    var_dump(<span class="hljs-variable">$num</span>);<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
